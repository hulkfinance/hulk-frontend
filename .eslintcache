[{"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/index.tsx":"1","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/Providers.tsx":"2","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/App.tsx":"3","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/PageLoader.tsx":"4","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/style/Global.tsx":"5","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/NotFound.tsx":"6","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/hooks.ts":"7","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/index.ts":"8","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/index.ts":"9","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/index.ts":"10","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getRpcUrl.ts":"11","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/index.tsx":"12","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ThemeContext.tsx":"13","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/RefreshContext.tsx":"14","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/BlockContext.tsx":"15","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/languageContext.tsx":"16","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Page.tsx":"17","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/index.ts":"18","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/actions.ts":"19","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/types.ts":"20","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/config.ts":"21","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/Home.tsx":"22","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/Farms.tsx":"23","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/Pools.tsx":"24","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/multicall.ts":"25","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useI18n.ts":"26","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/nfts.ts":"27","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Container.tsx":"28","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useRefresh.ts":"29","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/index.ts":"30","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTheme.ts":"31","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/web3.ts":"32","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/translationsContext.ts":"33","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/localisation/languageCodes.ts":"34","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/translateTextHelpers.ts":"35","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TwitterCard.tsx":"36","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/Divider.tsx":"37","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/Divider.tsx":"38","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard.tsx":"39","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/Coming.tsx":"40","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/FarmCard.tsx":"41","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TotalValueLockedCard.tsx":"42","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeStats.tsx":"43","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/FarmStakingCard.tsx":"44","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/index.ts":"45","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPoolsUser.ts":"46","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPools.ts":"47","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/formatBalance.ts":"48","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/addressHelpers.ts":"49","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Flex.tsx":"50","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useBlock.ts":"51","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolTabButtons/index.tsx":"52","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/CardTitle.tsx":"53","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/Card.tsx":"54","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/CardFooter.tsx":"55","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/HarvestButton.tsx":"56","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmTabButtons/index.tsx":"57","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/OldSyrupTitle.tsx":"58","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTokenBalance.ts":"59","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyButton.tsx":"60","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardActionsContainer.tsx":"61","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CardValue.tsx":"62","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardHeading.tsx":"63","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeHarvestBalance.tsx":"64","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeWalletBalance.tsx":"65","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarmUser.ts":"66","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarms.ts":"67","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/pools.ts":"68","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/index.ts":"69","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Tags.tsx":"70","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/UnlockButton.tsx":"71","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/farms.ts":"72","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyCalculatorModal.tsx":"73","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx":"74","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/StakeAction.tsx":"75","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/contracts.ts":"76","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/erc20.ts":"77","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Balance.tsx":"78","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useApprove.ts":"79","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useStake.ts":"80","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/WithdrawModal.tsx":"81","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/DepositModal.tsx":"82","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useContract.ts":"83","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/compoundApyHelpers.ts":"84","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useUnstake.ts":"85","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useHarvest.ts":"86","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getLiquidityUrlPathParts.ts":"87","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/callHelpers.ts":"88","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/index.ts":"89","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/index.ts":"90","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useWeb3.ts":"91","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/TokenInput.tsx":"92","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/ModalActions.tsx":"93","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/index.ts":"94","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/ifo.ts":"95","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/index.ts":"96","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/index.ts":"97","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/Input.tsx":"98","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/Spacer.tsx":"99","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/DetailsSection.tsx":"100","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/WithdrawModal.tsx":"101","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/CompoundModal.tsx":"102","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/DepositModal.tsx":"103","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useFarmsWithBalance.ts":"104","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/index.ts":"105","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/index.ts":"106","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/ExpandableSectionButton.tsx":"107","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/Label.tsx":"108","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/Timer.tsx":"109","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/PreSale.tsx":"110","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/index.ts":"111","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/PreSale.tsx":"112","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Timeline.tsx":"113","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Form.tsx":"114","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/index.ts":"115","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/formatAddress.ts":"116","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/usePresale.ts":"117","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ToastContext.tsx":"118","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/index.ts":"119","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/Referral.tsx":"120","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useReferral.ts":"121","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Swap.tsx":"122","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useHulkSwap.ts":"123"},{"size":278,"mtime":1620390462404,"results":"124","hashOfConfig":"125"},{"size":1526,"mtime":1644225405067,"results":"126","hashOfConfig":"125"},{"size":3887,"mtime":1644234251025,"results":"127","hashOfConfig":"125"},{"size":397,"mtime":1643802521119,"results":"128","hashOfConfig":"125"},{"size":589,"mtime":1643962053712,"results":"129","hashOfConfig":"125"},{"size":856,"mtime":1643802521127,"results":"130","hashOfConfig":"125"},{"size":3603,"mtime":1621018093129,"results":"131","hashOfConfig":"125"},{"size":35,"mtime":1620390462422,"results":"132","hashOfConfig":"125"},{"size":34,"mtime":1620390462427,"results":"133","hashOfConfig":"125"},{"size":35,"mtime":1620672580164,"results":"134","hashOfConfig":"125"},{"size":329,"mtime":1620390462413,"results":"135","hashOfConfig":"125"},{"size":1212,"mtime":1643802521139,"results":"136","hashOfConfig":"125"},{"size":937,"mtime":1643803227629,"results":"137","hashOfConfig":"125"},{"size":942,"mtime":1620390462396,"results":"138","hashOfConfig":"125"},{"size":772,"mtime":1620390462394,"results":"139","hashOfConfig":"125"},{"size":3233,"mtime":1620390462395,"results":"140","hashOfConfig":"125"},{"size":426,"mtime":1620390462379,"results":"141","hashOfConfig":"125"},{"size":286,"mtime":1620390462407,"results":"142","hashOfConfig":"125"},{"size":265,"mtime":1620390462405,"results":"143","hashOfConfig":"125"},{"size":2130,"mtime":1620947417661,"results":"144","hashOfConfig":"125"},{"size":1802,"mtime":1643802830872,"results":"145","hashOfConfig":"125"},{"size":2280,"mtime":1643962376630,"results":"146","hashOfConfig":"125"},{"size":5048,"mtime":1644686208974,"results":"147","hashOfConfig":"125"},{"size":12305,"mtime":1643802557541,"results":"148","hashOfConfig":"125"},{"size":964,"mtime":1620744764472,"results":"149","hashOfConfig":"125"},{"size":566,"mtime":1620390462401,"results":"150","hashOfConfig":"125"},{"size":2120,"mtime":1620390462392,"results":"151","hashOfConfig":"125"},{"size":321,"mtime":1643887946961,"results":"152","hashOfConfig":"125"},{"size":260,"mtime":1620390462402,"results":"153","hashOfConfig":"125"},{"size":6287,"mtime":1620919238337,"results":"154","hashOfConfig":"125"},{"size":371,"mtime":1643895010342,"results":"155","hashOfConfig":"125"},{"size":770,"mtime":1620390462415,"results":"156","hashOfConfig":"125"},{"size":404,"mtime":1620390462395,"results":"157","hashOfConfig":"125"},{"size":2034,"mtime":1620390462394,"results":"158","hashOfConfig":"125"},{"size":1614,"mtime":1620390462415,"results":"159","hashOfConfig":"125"},{"size":1649,"mtime":1644686543302,"results":"160","hashOfConfig":"125"},{"size":193,"mtime":1620390462417,"results":"161","hashOfConfig":"125"},{"size":193,"mtime":1620390462469,"results":"162","hashOfConfig":"125"},{"size":9111,"mtime":1643802521403,"results":"163","hashOfConfig":"125"},{"size":2179,"mtime":1643802521550,"results":"164","hashOfConfig":"125"},{"size":6767,"mtime":1643901245680,"results":"165","hashOfConfig":"125"},{"size":2341,"mtime":1643962947908,"results":"166","hashOfConfig":"125"},{"size":3341,"mtime":1644650854711,"results":"167","hashOfConfig":"125"},{"size":5971,"mtime":1644651086713,"results":"168","hashOfConfig":"125"},{"size":2133,"mtime":1620390462406,"results":"169","hashOfConfig":"125"},{"size":3971,"mtime":1620724856398,"results":"170","hashOfConfig":"125"},{"size":2433,"mtime":1620390462407,"results":"171","hashOfConfig":"125"},{"size":400,"mtime":1620390462412,"results":"172","hashOfConfig":"125"},{"size":770,"mtime":1643967149304,"results":"173","hashOfConfig":"125"},{"size":298,"mtime":1620390462379,"results":"174","hashOfConfig":"125"},{"size":214,"mtime":1620390462399,"results":"175","hashOfConfig":"125"},{"size":910,"mtime":1643802521097,"results":"176","hashOfConfig":"125"},{"size":359,"mtime":1620390462467,"results":"177","hashOfConfig":"125"},{"size":694,"mtime":1620390462466,"results":"178","hashOfConfig":"125"},{"size":3808,"mtime":1620759097165,"results":"179","hashOfConfig":"125"},{"size":3213,"mtime":1620390462469,"results":"180","hashOfConfig":"125"},{"size":1319,"mtime":1643802521464,"results":"181","hashOfConfig":"125"},{"size":885,"mtime":1620390462470,"results":"182","hashOfConfig":"125"},{"size":2002,"mtime":1620390462403,"results":"183","hashOfConfig":"125"},{"size":1051,"mtime":1643802521313,"results":"184","hashOfConfig":"125"},{"size":3200,"mtime":1643901488951,"results":"185","hashOfConfig":"125"},{"size":1194,"mtime":1644650992887,"results":"186","hashOfConfig":"125"},{"size":1334,"mtime":1643900839454,"results":"187","hashOfConfig":"125"},{"size":689,"mtime":1643888154041,"results":"188","hashOfConfig":"125"},{"size":765,"mtime":1643802521461,"results":"189","hashOfConfig":"125"},{"size":2532,"mtime":1620390462405,"results":"190","hashOfConfig":"125"},{"size":4593,"mtime":1620390462406,"results":"191","hashOfConfig":"125"},{"size":3578,"mtime":1621251946494,"results":"192","hashOfConfig":"125"},{"size":297,"mtime":1643965896506,"results":"193","hashOfConfig":"125"},{"size":819,"mtime":1643802521325,"results":"194","hashOfConfig":"125"},{"size":545,"mtime":1643802521546,"results":"195","hashOfConfig":"125"},{"size":7699,"mtime":1620680787255,"results":"196","hashOfConfig":"125"},{"size":4734,"mtime":1643802521150,"results":"197","hashOfConfig":"125"},{"size":2062,"mtime":1643901432465,"results":"198","hashOfConfig":"125"},{"size":2154,"mtime":1643901488957,"results":"199","hashOfConfig":"125"},{"size":1240,"mtime":1644088748327,"results":"200","hashOfConfig":"125"},{"size":1105,"mtime":1620390462411,"results":"201","hashOfConfig":"125"},{"size":1141,"mtime":1643802521301,"results":"202","hashOfConfig":"125"},{"size":3356,"mtime":1644228728670,"results":"203","hashOfConfig":"125"},{"size":1690,"mtime":1620390462402,"results":"204","hashOfConfig":"125"},{"size":1914,"mtime":1643802521304,"results":"205","hashOfConfig":"125"},{"size":2023,"mtime":1643802521397,"results":"206","hashOfConfig":"125"},{"size":3448,"mtime":1644685485219,"results":"207","hashOfConfig":"125"},{"size":1316,"mtime":1620390462410,"results":"208","hashOfConfig":"125"},{"size":2051,"mtime":1620670205409,"results":"209","hashOfConfig":"125"},{"size":2055,"mtime":1620390462400,"results":"210","hashOfConfig":"125"},{"size":584,"mtime":1620390462413,"results":"211","hashOfConfig":"125"},{"size":3448,"mtime":1620390462410,"results":"212","hashOfConfig":"125"},{"size":40,"mtime":1620390462376,"results":"213","hashOfConfig":"125"},{"size":42,"mtime":1620390462372,"results":"214","hashOfConfig":"125"},{"size":1023,"mtime":1620390462404,"results":"215","hashOfConfig":"125"},{"size":2084,"mtime":1643802521448,"results":"216","hashOfConfig":"125"},{"size":797,"mtime":1620390462372,"results":"217","hashOfConfig":"125"},{"size":336,"mtime":1644233867507,"results":"218","hashOfConfig":"125"},{"size":4693,"mtime":1620390462392,"results":"219","hashOfConfig":"125"},{"size":78,"mtime":1620390462370,"results":"220","hashOfConfig":"125"},{"size":36,"mtime":1620390462374,"results":"221","hashOfConfig":"125"},{"size":1164,"mtime":1620390462369,"results":"222","hashOfConfig":"125"},{"size":722,"mtime":1620390462374,"results":"223","hashOfConfig":"125"},{"size":2401,"mtime":1643901605114,"results":"224","hashOfConfig":"125"},{"size":1941,"mtime":1643802521467,"results":"225","hashOfConfig":"125"},{"size":1853,"mtime":1643802521527,"results":"226","hashOfConfig":"125"},{"size":2418,"mtime":1643802521205,"results":"227","hashOfConfig":"125"},{"size":1334,"mtime":1620390462400,"results":"228","hashOfConfig":"125"},{"size":53,"mtime":1620390462368,"results":"229","hashOfConfig":"125"},{"size":35,"mtime":1620390462370,"results":"230","hashOfConfig":"125"},{"size":938,"mtime":1643802521400,"results":"231","hashOfConfig":"125"},{"size":478,"mtime":1620390462370,"results":"232","hashOfConfig":"125"},{"size":2370,"mtime":1644653670453,"results":"233","hashOfConfig":"125"},{"size":2054,"mtime":1644686577720,"results":"234","hashOfConfig":"125"},{"size":37,"mtime":1643901758376,"results":"235","hashOfConfig":"125"},{"size":2169,"mtime":1645090470318,"results":"236","hashOfConfig":"125"},{"size":2297,"mtime":1643963355777,"results":"237","hashOfConfig":"125"},{"size":8235,"mtime":1644685865623,"results":"238","hashOfConfig":"125"},{"size":1257,"mtime":1644652616425,"results":"239","hashOfConfig":"125"},{"size":139,"mtime":1620390462411,"results":"240","hashOfConfig":"125"},{"size":10896,"mtime":1644683889884,"results":"241","hashOfConfig":"125"},{"size":1283,"mtime":1644226182692,"results":"242","hashOfConfig":"125"},{"size":38,"mtime":1644230850736,"results":"243","hashOfConfig":"125"},{"size":6605,"mtime":1644686496684,"results":"244","hashOfConfig":"125"},{"size":866,"mtime":1644233909576,"results":"245","hashOfConfig":"125"},{"size":5049,"mtime":1644686521408,"results":"246","hashOfConfig":"125"},{"size":5123,"mtime":1644685524822,"results":"247","hashOfConfig":"125"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},"mydm4p",{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"250"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"250"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"250"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"250"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"250"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"250"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"309"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"250"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"250"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"332"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"250"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"250"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"250"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"250"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"250"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"250"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"250"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"250"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"250"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"250"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"250"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"250"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"479"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"250"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"250"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"250"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"250"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"250"},"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/index.tsx",[],["523","524","525","526","527"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/Providers.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/App.tsx",["528","529"],"import React, { useEffect, Suspense, lazy, useContext, useCallback } from 'react'\r\nimport { BrowserRouter as Router, Route, Switch, useLocation } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { isAddress } from \"ethers/lib/utils\";\r\nimport { ResetCSS, ToastContainer } from '@hulkfinance/hulk-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport { ToastContext } from './contexts/ToastContext'\r\nimport useReferral from './hooks/useReferral'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Referral = lazy(() => import('./views/Referral'))\r\nconst PreSale = lazy(() => import('./views/PreSale'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\n// const LaunchPools = lazy(() => import('./views/LaunchPools'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  const {onSaveAffiliateAddress} = useReferral()\r\n  const {toasts, removeToast} = useContext(ToastContext)\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  // useFetchPublicData()\r\n\r\n  const saveAffiliateHandler = useCallback((search: string) => {\r\n    if (search !== '') {\r\n      const searchSplit = search.split('=')\r\n      if (searchSplit.length > 1) {\r\n        const affiliateAddress = searchSplit[1]\r\n        if (isAddress(affiliateAddress) && affiliateAddress !== account) {\r\n          onSaveAffiliateAddress(affiliateAddress)\r\n        }\r\n      }\r\n    }\r\n  }, [account, onSaveAffiliateAddress])\r\n\r\n  useEffect(() => {\r\n    if (window.location.search) {\r\n      saveAffiliateHandler(window.location.search)\r\n    }\r\n  }, [saveAffiliateHandler])\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <ToastContainer toasts={toasts} onRemove={removeToast} />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/pre-sale\" exact>\r\n              <PreSale />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms/>\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode/>\r\n            </Route>\r\n            <Route path=\"/launch\">\r\n              <Pools />\r\n            </Route>\r\n             <Route path=\"/referral\">\r\n              <Referral />\r\n             </Route>\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/PageLoader.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/style/Global.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/NotFound.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/hooks.ts",["530","531"],"import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { fetchLaunchPoolsUserDataAsync, fetchPoolsDataAsync } from './pools'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    dispatch(fetchPoolsPublicDataAsync())\r\n    dispatch(fetchPoolsDataAsync()) \r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceMashBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 0; // MASH-BUSD LP\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const mashPrice = usePriceMashBusd();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = (mashPrice.times(farm.lpTotalInQuoteToken));\r\n      } else {\r\n        val = (farm.lpTotalInQuoteToken);\r\n      }\r\n      value = value.plus(val);\r\n    }\r\n  }\r\n  return value;\r\n}\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getRpcUrl.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ThemeContext.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/RefreshContext.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/BlockContext.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/languageContext.tsx",["532","533"],"import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Page.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/types.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/config.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/Home.tsx",["534"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@hulkfinance/hulk-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\nimport Timer from './components/Timer'\r\nimport PreSale from './components/PreSale'\r\n\r\nconst Banner = styled.div`\r\n  width: 100%;\r\n  height: 186px;\r\n  //background-image: url('../../assets/images/home_banner.png');\r\n  background: url('/images/home_banner.png'), linear-gradient(180deg, #082407 0%, #0A0D0F 100%) ;\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  background-size: auto 100%;\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`\r\n\r\nconst BannerHeading = styled(Heading)`\r\n  font-size: 48px;\r\n  font-weight: 900;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst BannerText = styled(Text)`\r\n  margin-top: 16px;\r\n  font-size: 20px;\r\n  text-align: center;\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <>\r\n      <Banner>\r\n        <BannerHeading as='h1' mb='0' color='secondary'>{TranslateString(576, 'HulkFinance')}</BannerHeading>\r\n        <BannerText color='primary' >The First Automatic Liquidity Acquisition Yield Farm.</BannerText>\r\n      </Banner>\r\n      <Timer/>\r\n      <Page>\r\n        <div>\r\n          <PreSale/>\r\n          <Cards>\r\n            <FarmStakingCard />\r\n            <TwitterCard />\r\n            <TotalValueLockedCard />\r\n            <CakeStats />\r\n          </Cards>\r\n        </div>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/Farms.tsx",["535","536","537","538","539"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@hulkfinance/hulk-uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceMashBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Banner = styled.div`\r\n  width: 100%;\r\n  height: 186px;\r\n  //background-image: url('../../assets/images/home_banner.png');\r\n  background: url('/images/PageBanner.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  background-size: auto 100%;\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`\r\n\r\nconst BannerHeading = styled(Heading)`\r\n  font-size: 48px;\r\n  font-weight: 900;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceMashBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      // dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.mashPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Banner>\r\n        <BannerHeading as=\"h1\" mb={0} style={{ textAlign: 'center' }}>\r\n          {TranslateString(10002, 'Stake tokens to earn HULK ')}\r\n        </BannerHeading>\r\n        <Heading as=\"h2\" color=\"primary\" mt=\"16px\" style={{ textAlign: 'center' }}>\r\n          {TranslateString(10000, 'Stake Tokens to Earn HULK')}\r\n        </Heading>\r\n      </Banner>\r\n    <Page>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/Pools.tsx",["540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555"],"import React from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Heading } from '@hulkfinance/hulk-uikit'\r\nimport { ChainId, Token, Fetcher } from '@hulkfinance/hulk-swap-sdk'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { isArray } from 'lodash'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useBlock from 'hooks/useBlock'\r\nimport multicall from 'utils/multicall'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useFarms, usePriceBnbBusd, usePools, usePriceMashBusd } from 'state/hooks'\r\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport Coming from './components/Coming'\r\nimport PoolCard from './components/PoolCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst MASH = new Token(ChainId.MAINNET, '0x787732f27d18495494cea3792ed7946bbcff8db2', 18)\r\nconst BNB = new Token(ChainId.MAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18)\r\n\r\nconst Pools: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const farms = useFarms()\r\n  const pools = usePools(account)\r\n  const bnbPriceUSD = usePriceBnbBusd()\r\n  const cakebusd = usePriceMashBusd() // slimePriceInBusd\r\n  const block = useBlock()\r\n  let bbprice = new BigNumber(0)\r\n\r\n  const priceList = {}\r\n\r\n  const TokenPriceBNB = (token: string, tokenDecimals: number, isLpReward: boolean,isSlimeAMM:boolean): BigNumber => {\r\n    const [price, setPrice] = React.useState(new BigNumber(0))\r\n\r\n    React.useEffect(() => {\r\n      async function fetchdata(_token, _isLp, _tokenDecimals,_slimeamm) {\r\n        if (_token !== '') {\r\n          const mytoken = `0x${_token.substring(2).toUpperCase()}`\r\n\r\n          if (mytoken !== '0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C') {\r\n            // console.log('aj ****** isLp', _isLp, mytoken)\r\n            if (_isLp === true) {\r\n              console.log('myLPtokenDATA11')\r\n              const calls = [\r\n                // Balance of quote token on LP contract\r\n                {\r\n                  address: MASH.address,\r\n                  name: 'balanceOf',\r\n                  params: [mytoken],\r\n                },\r\n\r\n                // Total supply of LP tokens\r\n                {\r\n                  address: mytoken,\r\n                  name: 'totalSupply',\r\n                },\r\n                // Token decimals\r\n                {\r\n                  address: MASH.address,\r\n                  name: 'decimals',\r\n                },\r\n              ]\r\n\r\n              const [quoteTokenBlanceLP, lpTotalSupply, qtokenDecimals] = await multicall(erc20, calls)\r\n              const tokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(qtokenDecimals))\r\n\r\n              const LpAmount = new BigNumber(lpTotalSupply).div(new BigNumber(10).pow(18))\r\n\r\n              const LpPrice = tokenAmount.multipliedBy(cakebusd).multipliedBy(new BigNumber(2)).div(LpAmount)\r\n\r\n              console.log('LpPrice', token, LpPrice.toNumber(), LpAmount.toNumber())\r\n              setPrice(LpPrice)\r\n            } else {\r\n              const TOKEN = new Token(ChainId.MAINNET, mytoken, _tokenDecimals)\r\n              Fetcher.fetchPairData(\r\n                TOKEN,\r\n                BNB,\r\n                getDefaultProvider('https://patient-long-flower.bsc.quiknode.pro/e8d35735534a1fa9c3680c58e16b3847be567cf4/'),\r\n              ).then((pairData) =>\r\n                setPrice(\r\n                  new BigNumber(\r\n                    parseFloat(pairData.reserve1.toSignificant(4)) / parseFloat(pairData.reserve0.toSignificant(4)),\r\n                  ),\r\n                ),\r\n              )\r\n            }\r\n          } else if (mytoken === '0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C') {\r\n            setPrice(new BigNumber(1))\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('fetchdata', token, isLpReward, tokenDecimals)\r\n      fetchdata(token, isLpReward, tokenDecimals,isSlimeAMM)\r\n    }, [token, isLpReward, tokenDecimals,isSlimeAMM])\r\n\r\n    priceList[token] = price\r\n    return price\r\n  }\r\n\r\n  const StakeTokenPriceBNB = (token: string, tokenDecimals: number, isLpReward: boolean,isSlimeAMM:boolean): BigNumber => {\r\n    const [price, setPrice] = React.useState(new BigNumber(0))\r\n\r\n    React.useEffect(() => {\r\n      async function fetchdata(_token, _isLp, _tokenDecimals,_slimeamm) {\r\n        if (_token !== '') {\r\n          console.log('tokeeeeeen STAKEE', _token)\r\n          const mytoken = `0x${_token.substring(2).toUpperCase()}`\r\n\r\n          if (mytoken !== '0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C') {\r\n            console.log('isLp STAKEE', _isLp)\r\n            if (_isLp === true) {\r\n              console.log('myLPtokenDATA11 STAKEE')\r\n              const calls = [\r\n                // Balance of quote token on LP contract\r\n                {\r\n                  address: MASH.address,\r\n                  name: 'balanceOf',\r\n                  params: [mytoken],\r\n                },\r\n\r\n                // Total supply of LP tokens\r\n                {\r\n                  address: mytoken,\r\n                  name: 'totalSupply',\r\n                },\r\n                // Token decimals\r\n                {\r\n                  address: MASH.address,\r\n                  name: 'decimals',\r\n                },\r\n              ]\r\n\r\n              const [quoteTokenBlanceLP, lpTotalSupply, qtokenDecimals] = await multicall(erc20, calls)\r\n              const tokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(qtokenDecimals))\r\n\r\n              const LpAmount = new BigNumber(lpTotalSupply).div(new BigNumber(10).pow(18))\r\n\r\n              const LpPrice = tokenAmount.multipliedBy(cakebusd).multipliedBy(new BigNumber(2)).div(LpAmount)\r\n\r\n              console.log('LpPrice STAKEE', token, LpPrice.toNumber(), LpAmount.toNumber())\r\n              setPrice(LpPrice)\r\n            } else {\r\n\r\n              const TOKEN = new Token(ChainId.MAINNET, mytoken, _tokenDecimals)\r\n              Fetcher.fetchPairData(\r\n                TOKEN,\r\n                BNB,\r\n                getDefaultProvider('https://patient-long-flower.bsc.quiknode.pro/e8d35735534a1fa9c3680c58e16b3847be567cf4/'),\r\n              ).then((pairData) =>\r\n\r\n\r\n                setPrice(\r\n                  new BigNumber(\r\n                    parseFloat(pairData.reserve1.toSignificant(4)) / parseFloat(pairData.reserve0.toSignificant(4)),\r\n                  ),\r\n                ),\r\n              )\r\n            }\r\n\r\n\r\n\r\n          } else if (mytoken === '0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C') {\r\n            setPrice(new BigNumber(1))\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('fetchdata STAKEE', token, isLpReward, tokenDecimals)\r\n      fetchdata(token, isLpReward, tokenDecimals,isSlimeAMM)\r\n    }, [token, isLpReward, tokenDecimals,isSlimeAMM])\r\n\r\n    priceList[token] = price\r\n    return price\r\n  }\r\n\r\n  const priceToBnb = (tokenName: string, tokenPrice: BigNumber, quoteToken: QuoteToken): BigNumber => {\r\n    const tokenPriceBN = new BigNumber(tokenPrice)\r\n    if (tokenName === 'BNB') {\r\n      return new BigNumber(1)\r\n    }\r\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\r\n      return tokenPriceBN.div(bnbPriceUSD)\r\n    }\r\n    return tokenPriceBN\r\n  }\r\n\r\n  let stakepriceBUSD = new BigNumber(1)\r\n  const poolsWithApy = pools.map((pool) => {\r\n    bbprice = new BigNumber(0)\r\n    let stakePrice = new BigNumber(0)\r\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\r\n    const rewardTokenFarm = farms.find((f) => f.tokenSymbol === pool.tokenName)\r\n    const stakingTokenFarm = farms.find((s) => s.tokenSymbol === pool.stakingTokenName)\r\n\r\n    const TokenRewardAddress = pool.userData\r\n    const tkname = pool.tokenName\r\n\r\n    let address = ''\r\n\r\n    if (TokenRewardAddress) {\r\n      address = TokenRewardAddress.rewardAddress\r\n\r\n      if (isArray(address)) {\r\n        address = address[0]\r\n      }\r\n    }\r\n\r\n    const price = TokenPriceBNB(address, pool.tokenDecimals, pool.isLPReward, pool.isSlimeAMM)\r\n    if(pool.stakingTokenAddress !== \"0x787732f27d18495494cea3792ed7946bbcff8db2\"){\r\n      stakePrice = StakeTokenPriceBNB(pool.stakingTokenAddress, 18, pool.isLPStake,pool.isSlimeAMM)\r\n    }\r\n\r\n    if (pool.isLPStake) {\r\n      stakepriceBUSD = stakePrice\r\n    }  else if(pool.stakingTokenAddress === \"0x787732f27d18495494cea3792ed7946bbcff8db2\"){\r\n      stakePrice = cakebusd.div(bnbPriceUSD);\r\n      stakepriceBUSD= cakebusd;\r\n    } else {\r\n      stakepriceBUSD = bnbPriceUSD.multipliedBy(stakePrice)\r\n    }\r\n\r\n    console.log('StakepriceBUSD', pool.stakingTokenAddress,bnbPriceUSD.toNumber() ,stakePrice.toNumber(), stakepriceBUSD.toNumber(),cakebusd.toNumber())\r\n\r\n    if (pool.userData) {\r\n      if (pool.isLPReward) {\r\n        bbprice = price\r\n      } else {\r\n        bbprice = bnbPriceUSD.multipliedBy(price)\r\n      }\r\n\r\n      if (bbprice === new BigNumber(0)) {\r\n        const rewardTokenPriceInBNB = priceToBnb(\r\n          pool.tokenName,\r\n          rewardTokenFarm?.tokenPriceVsQuote,\r\n          rewardTokenFarm?.quoteTokenSymbol,\r\n        )\r\n        bbprice = bnbPriceUSD.multipliedBy(rewardTokenPriceInBNB)\r\n      }\r\n    }\r\n    // console.log('RewardPrice', address, bbprice.toNumber(), price.toNumber())\r\n    // /!\\ Assume that the farm quote price is BNB\r\n    const stakingTokenPriceInBNB = isBnbPool ? new BigNumber(1) : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote)\r\n\r\n    /*\r\n\r\n    */\r\n    const tvl = cakebusd.multipliedBy(pool.totalStaked)\r\n    const rperyear = bbprice.multipliedBy(pool.tokenPerBlock).multipliedBy(BLOCKS_PER_YEAR)\r\n    const apy2 = rperyear.div(tvl)\r\n\r\n    const totalRewardPricePerYear = bbprice.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n    const totalStakingTokenInPool = cakebusd.times(getBalanceNumber(pool.totalStaked))\r\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n\r\n    console.log(`aj : ***** poolName: ${pool.tokenName} pool.totalStaked: ${pool.totalStaked}`);\r\n    return {\r\n      ...pool,\r\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\r\n      apy,\r\n      bbprice,\r\n      stakepriceBUSD,\r\n    }\r\n  })\r\n\r\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\r\n\r\n  console.log('aj : ***** openPools => ', openPools);\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <div>\r\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\r\n            {TranslateString(282, 'Launch Pool')}\r\n          </Heading>\r\n          <ul>\r\n            <li>{TranslateString(406, 'Be part of our ecosystem.')}</li>\r\n          </ul>\r\n        </div>\r\n        <img src=\"/images/building_big.png\" alt=\"Launch POOL icon\" width={410} height={191} />\r\n      </Hero>\r\n      <PoolTabButtons />\r\n      <Divider />\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          <>\r\n            {orderBy(openPools, ['sortOrder']).map((pool) => (\r\n              <PoolCard key={pool.sousId} pool={pool} />\r\n            ))}\r\n            <Coming />\r\n          </>\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => (\r\n            <PoolCard key={pool.sousId} pool={pool} />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    </Page>\r\n  )\r\n}\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 250px;\r\n  padding: 48px 0;\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n    font-size: 16px;\r\n    li {\r\n      margin-bottom: 4px;\r\n    }\r\n  }\r\n  img {\r\n    height: auto;\r\n    max-width: 100%;\r\n  }\r\n  @media (min-width: 576px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\n\r\nexport default Pools\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/multicall.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useI18n.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/nfts.ts",[],["556","557","558","559","560"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Container.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useRefresh.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/index.ts",["561"],"/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n  fetchRewardAddress\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\nexport const LaunchPoolsSlice = createSlice({\r\n  name: 'LaunchPools',\r\n  initialState: { data: null },\r\n  reducers: {\r\n    setInitialState: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = livePoolsData\r\n    },\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\nexport const { setInitialState } = LaunchPoolsSlice.actions\r\n\r\nexport const fetchPoolsDataAsync  = () => async (dispatch) => {\r\n  const data = await fetchLaunchPools()\r\n  dispatch(setInitialState(data))\r\n}\r\n\r\nexport const fetchLaunchPools = async () => {\r\n  // TODO: Aqui es donde llamamos a la API\r\n  return poolsConfig\r\n}\r\n\r\nexport const fetchLaunchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const launchPools = await fetchLaunchPools()\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  const rewardAddress = await fetchRewardAddress(account)\r\n  console.log(\"fetchLaunchPoolsUserDataAsync\");\r\n  const userData = launchPools.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n    rewardAddress: rewardAddress[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  const rewardAddress = await fetchRewardAddress(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n    rewardAddress: rewardAddress[pool.sousId]\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTheme.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/web3.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/translationsContext.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/localisation/languageCodes.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/translateTextHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TwitterCard.tsx",["562"],"import React from 'react'\r\nimport { Card, CardBody, Heading } from '@hulkfinance/hulk-uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 100%;\r\n  //height: 600px;\r\n  & > div {\r\n    flex: 1;\r\n    height: 100%; \r\n  }\r\n  [twdiv=\"yes\"] {\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 28px;\r\n  font-weight: 900;\r\n  @media(min-width: 768px) {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const {theme} = useTheme()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody p={40}>\r\n        <CardHeading mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </CardHeading>\r\n        <Wrapper>\r\n          <Timeline\r\n            dataSource={{\r\n              sourceType: 'profile',\r\n              screenName: 'SwapMarshmallow'\r\n            }}\r\n            options={{\r\n              height: '440px',\r\n              chrome: \"transparent, noheader, nofooter\",\r\n              width: \"100%\",\r\n              theme: 'dark',\r\n              borderColor: theme.colors.card,\r\n            }}\r\n          />\r\n        </Wrapper>\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/Divider.tsx",[],["563","564","565","566","567"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/Divider.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/Coming.tsx",["568"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Image, Button } from '@hulkfinance/hulk-uikit'\r\nimport { CommunityTag } from 'components/Tags'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Card from './Card'\r\nimport CardTitle from './CardTitle'\r\n\r\nconst Balance = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  font-size: 40px;\r\n  font-weight: 600;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst DetailPlaceholder = styled.div`\r\n  display: flex;\r\n  font-size: 14px;\r\n`\r\nconst Value = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Footer = styled.div`\r\n  border-top: 1px solid ${({ theme }) => (theme.isDark ? '#524B63' : '#E9EAEB')};\r\n  padding: 24px;\r\n`\r\nconst Coming: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Card>\r\n      <div style={{ padding: '24px' }}>\r\n        <CardTitle>\r\n          {TranslateString(414, 'Your Project?')}{' '}\r\n          <span role=\"img\" aria-label=\"eyes\">\r\n            👀\r\n          </span>\r\n        </CardTitle>\r\n        {/* <Image src=\"/images/bunny-question.svg\" width={64} height={64} alt=\"Your project here\" /> */}\r\n        <Balance>???</Balance>\r\n        <Label>{TranslateString(416, 'Create a pool for your token')}</Label>\r\n        <Button\r\n          variant=\"secondary\"\r\n          as=\"a\"\r\n          href=\"https://docs.google.com/forms/d/e/1FAIpQLSd04X9jhtGf6xs3tR1RHUFxVDtuArIWnM1lNt32pDxi9ObY9Q/viewform\"\r\n          external\r\n          fullWidth\r\n          mb=\"16px\"\r\n        >\r\n          {TranslateString(418, 'Apply Now')}\r\n        </Button>\r\n        <DetailPlaceholder>\r\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APR')}:</div>\r\n          <Value>??</Value>\r\n        </DetailPlaceholder>\r\n        <DetailPlaceholder>\r\n          <div style={{ flex: 1 }}>\r\n            {TranslateString(384, 'Your Stake')}:\r\n          </div>\r\n          <Value>??? MASH</Value>\r\n        </DetailPlaceholder>\r\n      </div>\r\n      <Footer>\r\n        <CommunityTag />\r\n      </Footer>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Coming\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/FarmCard.tsx",["569"],"import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@hulkfinance/hulk-uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\nconst FarmText = styled(Text)`\r\n  font-weight: 400;\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Row = styled(Flex)`\r\n  margin-bottom: 16px;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'MASH'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'MASH' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Row justifyContent='space-between' alignItems='center'>\r\n          <FarmText>{TranslateString(352, 'APR')}:</FarmText>\r\n          <FarmText style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </FarmText>\r\n        </Row>\r\n      )}\r\n      <Row justifyContent='space-between'>\r\n        <FarmText>{TranslateString(318, 'Earn')}:</FarmText>\r\n        <FarmText>{earnLabel}</FarmText>\r\n      </Row>\r\n      <Row justifyContent='space-between'>\r\n        <FarmText>{TranslateString(10001, 'Deposit Fee')}:</FarmText>\r\n        <FarmText >{(farm.depositFeeBP / 100)}%</FarmText>\r\n      </Row>\r\n      <Row justifyContent='space-between'>\r\n        <FarmText>Harvest Lockup:</FarmText>\r\n        <FarmText >2 Hour(s)</FarmText>\r\n      </Row>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TotalValueLockedCard.tsx",["570","571"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@hulkfinance/hulk-uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\nimport tvlImage from '../../../assets/images/TVL.png'\r\n\r\nconst StyledTotalValueLockedCard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  overflow: hidden;\r\n`\r\nconst CardImage = styled.img`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  height: 100%;\r\n  max-height: 208px;\r\n  display: none;\r\n  @media(min-width: 768px) {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst TextItem = styled(Text)`\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 20px;\r\n  justify-content: space-between;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 24px;\r\n  font-weight: 900;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <Card mb={40}>\r\n        <CardBody p={40}>\r\n          <CardHeading mb=\"16px\">\r\n            {TranslateString(999, 'TVL')}\r\n          </CardHeading>\r\n          <>\r\n            <CardValue bold value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n            <Text mt={16} color=\"primary\" fontSize=\"20px\" style={{lineHeight: 1}}>{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n            <CardImage src={tvlImage} alt='TVL'/>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n      <Card style={{flex: 1}}>\r\n        <CardBody p={40}>\r\n          <CardHeading mb=\"16px\">\r\n            HULK LP Worth\r\n          </CardHeading>\r\n          <>\r\n            <Row>\r\n              <TextItem>HULK-BNB</TextItem>\r\n              <TextItem>$5.911</TextItem>\r\n            </Row>\r\n            <Row>\r\n              <TextItem>HULK-BUSD</TextItem>\r\n              <TextItem>$0.249</TextItem>\r\n            </Row>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeStats.tsx",["572"],"import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@hulkfinance/hulk-uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceMashBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 16px;\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 28px;\r\n  font-weight: 900;\r\n  margin-bottom: 24px;\r\n  @media (min-width: 768px) {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst TextItem = styled(Text)`\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms()\r\n  const eggPrice = usePriceMashBusd()\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\r\n  const cakeSupply = getBalanceNumber(circSupply)\r\n  const marketCap = eggPrice.times(circSupply)\r\n\r\n  let mashPerBlock = 0\r\n  if (farms && farms[0] && farms[0].mashPerBlock) {\r\n    mashPerBlock = new BigNumber(farms[0].mashPerBlock).div(new BigNumber(10).pow(18)).toNumber()\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody p={40}>\r\n        <CardHeading bold>\r\n          {TranslateString(534, 'HULK Stats')}\r\n        </CardHeading>\r\n        <Row>\r\n          <TextItem>{TranslateString(999, 'Market Cap')}</TextItem>\r\n          <CardValue fontSize='20px' value={getBalanceNumber(marketCap)} decimals={0} prefix='$' />\r\n        </Row>\r\n        <Row>\r\n          <TextItem>{TranslateString(536, 'Total Supply')}</TextItem>\r\n          {cakeSupply && <CardValue fontSize='20px' value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <TextItem>{TranslateString(538, 'Total Burned')}</TextItem>\r\n          <CardValue fontSize='20px' value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <TextItem>{TranslateString(537, 'Total Locked')}</TextItem>\r\n          <CardValue fontSize='20px' value={100} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <TextItem>{TranslateString(539, 'Circulating')}</TextItem>\r\n          <CardValue fontSize='20px' value={100} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <TextItem>{TranslateString(541, 'Un-mined')}</TextItem>\r\n          <CardValue fontSize='20px' value={100} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <TextItem>{TranslateString(543, 'Mining /24h')}</TextItem>\r\n          <CardValue fontSize='20px' value={100} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <TextItem>{TranslateString(540, 'Max Tx Amount')}</TextItem>\r\n          <TextItem>100</TextItem>\r\n          {/* <TextItem >{mashPerBlock}</TextItem> */}\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/FarmStakingCard.tsx",["573","574","575"],"import React, { useState, useCallback, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@hulkfinance/hulk-uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { usePriceMashBusd } from '../../../state/hooks'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\nimport hulkLogo from '../../../assets/images/HulkLogo.svg'\r\nimport metamaskLogo from '../../../assets/images/MetamaskIcon.svg'\r\nimport HomeFarm from '../../../assets/images/HomeFarmImage.png'\r\nimport useWeb3 from '../../../hooks/useWeb3'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  min-height: 376px;\r\n  position: relative;\r\n`\r\n\r\nconst Block = styled.div`\r\n  //margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n  position: relative;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  z-index: 0;\r\n  display: none;\r\n  @media(min-width: 768px) {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Token = styled.div`\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst Metamask = styled.div`\r\n  display: flex;\r\n  padding: 11px 13px 11px 24px;\r\n  background: rgba(255, 255, 255, 0.37);\r\n  border-radius: 24px;\r\n  margin-left: 16px;\r\n  transition: background-color .25s ease;\r\n  cursor: pointer;\r\n  span {\r\n    color: #fff;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 20px;\r\n    line-height: 24px;\r\n  }\r\n  img {\r\n    margin-left: 19px;\r\n  }\r\n  &:hover {\r\n    background: rgba(255, 255, 255, 0.6);\r\n  }\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 28px;\r\n  font-weight: 900;\r\n  @media(min-width: 768px) {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const token: {\r\n    symbol: string,\r\n    decimals: number,\r\n    address: string,\r\n    image?: string,\r\n  } = useMemo(() => {\r\n    return {\r\n      symbol: 'HULK',\r\n      decimals: 18,\r\n      address: getCakeAddress(),\r\n      // image: 'https://pbs.twimg.com/profile_images/802481220340908032/M_vde_oi_400x400.jpg',\r\n    }\r\n  }, [])\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account, ethereum }: { ethereum: ProviderType, account: any } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const hulkPrice = usePriceMashBusd().toNumber()\r\n  const earningsSum = farmsWithBalance.reduce((accum, farm) => {\r\n    return accum + new BigNumber(farm.balance).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  const onAddToken = useCallback(() => {\r\n    if (ethereum) {\r\n      ethereum.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: token,\r\n        },\r\n      })\r\n    }\r\n  }, [ethereum, token])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardImage src={HomeFarm} alt='Home Farm Image'/>\r\n      <CardBody p={40}>\r\n        <CardHeading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </CardHeading>\r\n        <Token>\r\n          <img src={hulkLogo} alt=\"hulk logo\" width={74} height={74} />\r\n          <Metamask onClick={onAddToken}>\r\n            <span>+</span>\r\n            <img src={metamaskLogo} alt=\"metamask logo\" width={24} height={24} />\r\n          </Metamask>\r\n        </Token>\r\n        <Button\r\n          id=\"buy-all\"\r\n          disabled={false}\r\n          mb={24}\r\n        >\r\n          Buy HULk\r\n        </Button>\r\n        <Block>\r\n          <Label>{TranslateString(544, 'HULK to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(hulkPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'HULK in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(hulkPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting HULK')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPoolsUser.ts",["576","577"],"import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingEgg('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n\r\nexport const fetchRewardAddress = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'rewardToken',\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n\r\n  console.log(\"fetchRewardAddress\",res);\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]:res[index],\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n\r\n  return { ...pendingRewards }\r\n}\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPools.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/formatBalance.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/addressHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Flex.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useBlock.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolTabButtons/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/CardTitle.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/Card.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/CardFooter.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/HarvestButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmTabButtons/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/OldSyrupTitle.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTokenBalance.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardActionsContainer.tsx",["578"],"import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@hulkfinance/hulk-uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  margin-top: 8px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst FarmText = styled(Text)`\r\n  font-weight: 400;\r\n  text-transform: uppercase;\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"16px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <FarmText color=\"secondary\" pr=\"3px\">\r\n          MASH\r\n        </FarmText>\r\n        <FarmText color=\"primary\" >\r\n          {TranslateString(999, 'Earned')}\r\n        </FarmText>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <FarmText color=\"secondary\" pr=\"3px\">\r\n          {lpName}\r\n        </FarmText>\r\n        <FarmText color=\"textSubtle\">\r\n          {TranslateString(999, 'Staked')}\r\n        </FarmText>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"16px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CardValue.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardHeading.tsx",["579","580","581","582"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@hulkfinance/hulk-uikit'\r\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"primary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeHarvestBalance.tsx",["583","584"],"import React from 'react'\r\nimport { Text } from '@hulkfinance/hulk-uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: 1, marginBottom: 16 }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeWalletBalance.tsx",["585","586","587"],"import React from 'react'\r\nimport { Text } from '@hulkfinance/hulk-uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({cakeBalance}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarmUser.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/pools.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/index.ts",["588","589"],"import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\n\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Tags.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/UnlockButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/farms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyCalculatorModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/StakeAction.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/contracts.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/erc20.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Balance.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useApprove.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useStake.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/WithdrawModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/DepositModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useContract.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/compoundApyHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useUnstake.ts",["590"],"import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync} from 'state/farms'\r\nimport {\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useHarvest.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getLiquidityUrlPathParts.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/callHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useWeb3.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/TokenInput.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/ModalActions.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/ifo.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/Input.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/Spacer.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/DetailsSection.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/WithdrawModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/CompoundModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/DepositModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useFarmsWithBalance.ts",[],["591","592","593","594","595"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/ExpandableSectionButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/Label.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/Timer.tsx",["596"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useMemo } from 'react'\nimport {Text} from '@hulkfinance/hulk-uikit'\nimport styled from 'styled-components'\nimport { useTimer } from 'react-timer-hook'\nimport { addZeroForward } from '../../../utils'\n\nconst TimerStyled = styled.div`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin-top: 56px;\n`\n\nconst TimerBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n`\n\nconst DateBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  align-content: center;\n  margin: 0 8px;\n`\n\nconst DateValue = styled(Text)`\n  font-size: 40px;\n  font-weight: bold;\n  line-height: 1;\n  color: ${({theme}) => theme.colors.primary};\n`\n\nconst DateName = styled(Text)`\n  font-size: 14px;\n  margin-top: 8px;\n  line-height: 1;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n`\n\nconst Separator = styled(Text)`\n  font-size: 60px;\n  font-weight: bold;\n  line-height: 1;\n  color: ${({theme}) => theme.colors.primary};\n  margin: 0 8px;\n`\nfunction Timer() {\n\n  const timestamp: number = useMemo(() => {\n    return 1645621200000\n  }, [])\n\n  const time = useMemo(() => {\n    return new Date(timestamp);\n  }, [timestamp])\n  const {\n    days, hours, minutes,\n    restart,\n  } = useTimer({\n    expiryTimestamp: time, autoStart: true, onExpire: () => {\n      console.log('finish')\n    } \n  });\n\n  useEffect(() => {\n    restart(time, true)\n  }, [time])\n  return (\n    <TimerStyled>\n      <TimerBlock>\n        <DateBlock>\n          {/* <DateValue>{addZeroForward(days.toString())}</DateValue> */}\n          <DateValue>{addZeroForward(days.toString())}</DateValue>\n          <DateName>days</DateName>\n        </DateBlock>\n        <Separator>:</Separator>\n         <DateBlock>\n          <DateValue>{addZeroForward(hours.toString())}</DateValue>\n          <DateName>hours</DateName>\n         </DateBlock>\n        <Separator>:</Separator>\n         <DateBlock>\n          <DateValue>{addZeroForward(minutes.toString())}</DateValue>\n          <DateName>minutes</DateName>\n         </DateBlock>\n      </TimerBlock>\n      {/* <TimerText><span>Finish:</span> 3d 9h 44m (blocks)</TimerText> */}\n    </TimerStyled>\n  )\n}\n\nexport default Timer","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/PreSale.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/PreSale.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Timeline.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Form.tsx",["597"],"import React, { useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { fromWei } from 'web3-utils'\nimport { Button, Card, CardBody, Flex, Heading, Input, Text } from '@hulkfinance/hulk-uikit'\nimport hulk from '../../../assets/images/HulkLogo.svg'\nimport UnlockButton from '../../../components/UnlockButton'\nimport { shortBalance } from '../../../utils'\nimport usePresale, { ECoins } from '../../../hooks/usePresale'\n\n\nconst FormStyledCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  z-index: 1;\n  overflow: visible;\n\n  & > div {\n    border-radius: 32px;\n    background-color: ${({ theme }) => theme.colors.card};\n    position: relative;\n    height: 100%;\n  }\n\n  &:before {\n    content: '';\n    z-index: -1;\n    display: block;\n    position: absolute;\n    top: -7px;\n    right: -7px;\n    bottom: -7px;\n    left: -7px;\n    background: linear-gradient(90deg, #FFFFFF 0%, #FAFF00 51.87%, #3CBD0E 100%);\n    filter: blur(10px);\n    border-radius: 32px;\n  }\n`\n\nconst CardHeading = styled(Heading)`\n  font-size: 28px;\n  font-weight: 900;\n  @media (min-width: 768px) {\n    font-size: 40px;\n  }\n`\n\nconst FormText = styled(Text)`\n  font-size: 20px;\n  margin-top: 8px;\n  word-break: break-all;\n\n  span {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n\n  p {\n    margin: 0;\n    color: ${({ theme }) => theme.colors.tertiary};\n  }\n`\n\nconst Logo = styled.img`\n  width: 80px;\n  height: 80px;\n  position: absolute;\n  top: 24px;\n  right: 40px;\n  z-index: 1;\n  display: none;\n  @media (min-width: 768px) {\n    display: block;\n  }\n`\n\nconst Progress = styled.div<{ width: number }>`\n  //background: linear-gradient(90deg, rgba(255, 255, 255, 0.5) 0%, rgba(250, 255, 0, 0.5) 51.87%, rgba(60, 189, 14, 0.5) 100%);\n  background: ${({ width }) => `linear-gradient(90deg, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 1) ${width}%, rgba(255, 255, 255, .5) ${width}%, rgba(250, 255, 0, 0.5) ${(100 - width) / 2}%, rgba(60, 189, 14, 0.5) 100%)`};\n  border-radius: 50px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n  position: relative;\n  margin-bottom: 44px;\n  margin-top: 43px;\n\n  div {\n    color: ${({ theme, width }) => (width < 50 ? '#fff' : theme.colors.primary)};\n    text-align: center;\n    position: relative;\n    font-size: 20px;\n    line-height: 24px;\n    text-transform: capitalize;\n  }\n`\nconst ReferralButton = styled(Button)`\n  color: ${({ theme }) => theme.colors.primary};\n  background-color: transparent;\n  transition: all .25s ease-out;\n  font-size: 20px;\n  padding-left: 0;\n\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\n    background-color: transparent;\n    text-decoration: underline;\n  }\n\n  img {\n    margin-left: 8px;\n  }\n`\n\nconst FormBlock = styled.div`\n  display: flex;\n  align-content: center;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-top: 32px;\n  flex-direction: column-reverse;\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`\n\nconst AmountInput = styled(Input)`\n  max-width: 100%;\n  padding: 12px 16px;\n  height: 48px;\n\n  @media (min-width: 768px) {\n    max-width: 160px;\n  }\n`\nconst Amount = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: flex-start;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 100%;\n  @media (min-width: 768px) {\n    align-content: flex-start;\n    align-items: flex-start;\n    justify-content: flex-start;\n    width: unset;\n  }\n`\nconst BalanceBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: flex-start;\n  align-items: flex-end;\n  justify-content: flex-end;\n  margin-top: 16px;\n  width: 100%;\n  @media (min-width: 768px) {\n    margin-top: 0;\n    width: unset;\n  }\n`\n\nconst BalanceButton = styled.div`\n  width: 100%;\n  display: flex;\n  align-content: flex-start;\n  align-items: flex-start;\n  justify-content: flex-end;\n  margin-top: 12px;\n  @media (min-width: 768px) {\n    margin-top: 0;\n    width: unset;\n  }\n`\nconst MaxButton = styled(Button)`\n  margin-left: 20px;\n`\n\nconst Select = styled.select`\n  width: 100px;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 10px;\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  height: 48px;\n  outline: 0;\n  padding: 4px 16px;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  font-size: 20px;\n  line-height: 1.2;\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.tertiary};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n    box-shadow: none;\n    color: ${({ theme }) => theme.colors.textDisabled};\n    cursor: not-allowed;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: ${({ theme }) => theme.shadows.focus};\n  }\n\n  @media (min-width: 768px) {\n    width: 140px;\n  }\n`\n\nconst ButtonBlock = styled(Flex)`\n  margin-top: 56px;\n\n  button {\n    max-width: 220px;\n    width: 100%;\n  }\n`\n\nfunction Form() {\n  const { account } = useWallet()\n\n  const {\n    onBuyTokens,\n    coin,\n    onSelectCoin,\n    round,\n    pending,\n    balance,\n    onChangeAmountIn,\n    amountIn,\n    onMax,\n    onApprove,\n    allowance,\n    pendingApprove,\n    percent,\n    amountOut,\n    onChangeAmountOut\n  } = usePresale()\n\n\n  const renderCoinSymbol = useCallback(() => {\n    switch (coin) {\n      case ECoins.Zero:\n        return 'BNB'\n      case ECoins.BUSD:\n        return 'BUSD'\n      case ECoins.USDT:\n        return 'USDT'\n      default:\n        return 'BNB'\n    }\n  }, [coin])\n  const isDisabled = useMemo(() => {\n    return (coin !== ECoins.Zero && allowance[coin === ECoins.BUSD ? 'busd' : 'usdt'].isZero()) || pending || amountIn === \"\"\n  }, [allowance, amountIn, coin, pending])\n  return (\n    <FormStyledCard>\n      <Logo src={hulk} alt='Hulk' />\n      <CardBody p={40}>\n        <CardHeading mb='24px'>IDO ROUND {round + 1}</CardHeading>\n        <Progress width={percent}>\n          <div>{percent}%</div>\n        </Progress>\n        <FormText><span>HULK token</span> will be distributed block by block from Feb 4th, 2022 ( 30% each\n          month)</FormText>\n        {/* <ReferralButton variant='text'>Referral link <img src={copy} alt='Copy' /></ReferralButton> */}\n        <FormBlock>\n          <Amount>\n            <FormText>Amount In</FormText>\n            <AmountInput type='text' scale='md' value={amountIn} onChange={event => onChangeAmountIn(event.target.value)} placeholder='0.000000' />\n            <FormText>HULKPre</FormText>\n            <AmountInput type='text' scale='md' value={amountOut} onChange={event => onChangeAmountOut(event.target.value)} placeholder='0.000000' />\n            {/* {!tokensAmount.isZero() && <FormText mt=\"8px\"><span>HULK token:</span><br/> {fromWei(tokensAmount.toString())}</FormText>} */}\n          </Amount>\n          <BalanceBlock>\n            <FormText>\n               Balance: {shortBalance(fromWei(balance.toString()))} {renderCoinSymbol()}\n            </FormText>\n            <BalanceButton>\n              <Select value={coin} onChange={event => onSelectCoin(event.target.value)}>\n                <option value={ECoins.Zero}>BNB</option>\n                <option value={ECoins.BUSD}>BUSD</option>\n                <option value={ECoins.USDT}>USDT</option>\n              </Select>\n              <MaxButton onClick={onMax} size='md' variant='primary'>Max</MaxButton>\n            </BalanceButton>\n          </BalanceBlock>\n        </FormBlock>\n        <ButtonBlock justifyContent='space-between'>\n\n          {account ? (\n            <>\n              {\n                coin !== ECoins.Zero && <Button variant='primary' onClick={onApprove}\n                                                disabled={!allowance[coin === ECoins.BUSD ? 'busd' : 'usdt'].isZero() || pendingApprove}>{pendingApprove ? 'Wait' : 'Approve'}</Button>\n              }\n              <Button onClick={onBuyTokens} fullWidth={coin === ECoins.Zero}\n                      disabled={isDisabled}\n                      variant='primary'>{pending ? \"Wait\" : \"Buy HULK\"}</Button>\n            </>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </ButtonBlock>\n      </CardBody>\n    </FormStyledCard>\n  )\n}\n\nexport default Form","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/formatAddress.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/usePresale.ts",["598","599","600","601","602","603","604","605","606"],"import { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport { fromWei, toWei } from 'web3-utils'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { useERC20, useHulkPreContract } from './useContract'\nimport useBlock from './useBlock'\nimport { escapeRegExp, inputRegex, shortBalance } from '../utils'\nimport useWeb3 from './useWeb3'\nimport { getHulkPreAddress } from '../utils/addressHelpers'\nimport { useIfoApprove } from './useApprove'\nimport { ToastContext } from '../contexts/ToastContext'\n\nexport enum ERound {\n  RoundZero = 0,\n  RoundOne = 1,\n  RoundTwo = 2,\n}\n\nexport const ERoundAvailable = {\n  0: '210000000000000000000000000',\n  1: '210000000000000000000000000',\n  2: '210000000000000000000000000',\n}\n\nexport enum ECoins {\n  Zero = '0x0000000000000000000000000000000000000000',\n  BUSD = '0xdB1Cc97ada0D2A0bCE7325699A9F1081C95F0ac9',\n  USDT = '0xbDf2f04a77Ca7474F127208cab24260197D14a04',\n}\n\nexport function useGetCurrentRound() {\n  const hulkPreContract: any = useHulkPreContract()\n  const [round, setRound] = useState<ERound>(ERound.RoundZero)\n  const block = useBlock()\n\n  const getData = useCallback(() => {\n    if (hulkPreContract) {\n      hulkPreContract.methods\n        .getCurrentRound().call()\n        .then((res) => {\n          setRound(parseInt(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n  return round\n}\n\nexport default function usePresale() {\n  const BN_0 = BigNumber.from('0')\n  const { addToast } = useContext(ToastContext)\n  const { account } = useWallet()\n  const busdToken = useERC20(ECoins.BUSD)\n  const usdtToken = useERC20(ECoins.USDT)\n  const onBusdApprove = useIfoApprove(busdToken, getHulkPreAddress())\n  const onUsdtApprove = useIfoApprove(usdtToken, getHulkPreAddress())\n  const hulkPreContract: any = useHulkPreContract()\n  const round = useGetCurrentRound()\n  const [availableTokens, setAvailableTokens] = useState<BigNumber>(BN_0)\n  const [coin, setCoin] = useState<ECoins | string>(ECoins.Zero)\n  const [balance, setBalance] = useState<BigNumber>(BN_0)\n  const [allowance, setAllowance] = useState<{ busd: BigNumber, usdt: BigNumber }>({ busd: BN_0, usdt: BN_0 })\n  const block = useBlock()\n  const [pending, setPending] = useState<boolean>(false)\n  const [pendingApprove, setPendingApprove] = useState<boolean>(false)\n  const [rate, setRate] = useState<BigNumber>(BN_0)\n  const [amountIn, setAmountIn] = useState<string>('')\n  const [amountOut, setAmountOut] = useState<string>('')\n  const [coinToTokens, setCoinToTokens] = useState<BigNumber>(BN_0)\n  const [tokenToCoins, setTokenToCoins] = useState<BigNumber>(BN_0)\n  const [percent, setPercent] = useState<number>(0)\n  const [price, setPrice] = useState<BigNumber>(BN_0)\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    if (account && web3 && coin === ECoins.Zero) {\n      web3.eth.getBalance(account)\n        .then((res) => {\n          setBalance(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [coin, account, web3])\n\n  const getData = useCallback(() => {\n    if (hulkPreContract) {\n      hulkPreContract.methods\n        .getPrice().call()\n        .then((res) => {\n          setPrice(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n      hulkPreContract.methods\n        .getAvailable().call()\n        .then((res) => {\n          setAvailableTokens(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n\n  const getDataCoins = useCallback(() => {\n    if (coin !== ECoins.Zero && account) {\n      const tokenContract = coin === ECoins.BUSD ? busdToken : usdtToken\n      if (tokenContract) {\n        tokenContract.methods\n          .balanceOf(account).call()\n          .then((res) => {\n            setBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => {\n            console.log(e)\n          })\n        tokenContract.methods\n          .allowance(account, getHulkPreAddress()).call()\n          .then((res) => {\n            setAllowance(prevState => {\n              return {\n                ...prevState,\n                [coin === ECoins.BUSD ? 'busd' : 'usdt']: BigNumber.from(res),\n              }\n            })\n          })\n          .catch((e: any) => {\n            console.log(e)\n          })\n      }\n    }\n  }, [coin, busdToken, usdtToken, account])\n\n  useEffect(() => {\n    getDataCoins()\n  }, [block, getDataCoins])\n  // 1_000_069_780_000\n  useEffect(() => {\n    if (hulkPreContract) {\n      // if (amountIn !== '') {\n      //   hulkPreContract.methods\n      //     .coinToTokens(toWei(amountIn), coin).call()\n      //     .then((res: string) => {\n      //       setCoinToTokens(BigNumber.from(res))\n      //     })\n      //     .catch((e: any) => {\n      //       console.log(e)\n      //     })\n      // }\n      hulkPreContract.methods\n        .getRate(coin).call()\n        .then((res: string) => {\n          setRate(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [amountIn, coin, hulkPreContract])\n\n\n  const onChangeAmountIn = useCallback( async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(balance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmountIn(shortBalance(nextUserInput, 8))\n      if (hulkPreContract && nextUserInput !== '') {\n        try {\n          const tokens: string = await hulkPreContract.methods.coinToTokens(toWei(nextUserInput), coin).call()\n          setCoinToTokens(BigNumber.from(tokens))\n          setAmountOut(fromWei(tokens))\n        } catch {\n          setCoinToTokens(BN_0)\n          setAmountOut('')\n        }\n      } else {\n        setCoinToTokens(BN_0)\n        setAmountOut('')\n      }\n    } else {\n      setCoinToTokens(BN_0)\n      setAmountOut('')\n    }\n  }, [balance, hulkPreContract, coin, BN_0])\n\n  const onChangeAmountOut = useCallback( async (value: string) => {\n    const nextUserInput = value.replace(/,/g, '.')\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      setAmountOut(shortBalance(nextUserInput, 8))\n      if (hulkPreContract && nextUserInput !== '') {\n        try {\n          const coins: string = await hulkPreContract.methods.tokensToCoin(toWei(nextUserInput), coin).call()\n          setTokenToCoins(BigNumber.from(coins))\n          setAmountIn(fromWei(coins))\n        } catch {\n          setTokenToCoins(BN_0)\n          setAmountIn('')\n        }\n      } else {\n        setTokenToCoins(BN_0)\n        setAmountIn('')\n      }\n    } else {\n      setTokenToCoins(BN_0)\n      setAmountIn('')\n    }\n  }, [BN_0, coin, hulkPreContract])\n\n  // useEffect(() => {\n  //   if (coinToTokens.isZero()) {\n  //     onChangeAmountOut('')\n  //   } else {\n  //     onChangeAmountOut(fromWei(coinToTokens.toString()))\n  //   }\n  // }, [coinToTokens, onChangeAmountOut])\n\n  // useEffect(() => {\n  //   if (!coinToTokens.isZero()) {\n  //     if (hulkPreContract) {\n  //       hulkPreContract.methods\n  //         .tokensToCoin(coinToTokens.toString(), coin).call()\n  //         .then((res: string) => {\n  //           setTokenToCoins(BigNumber.from(res))\n  //         })\n  //         .catch((e: any) => {\n  //           console.log(e)\n  //         })\n  //     }\n  //   }\n  // }, [coin, hulkPreContract, coinToTokens])\n\n  const onBuyTokens = useCallback(async () => {\n    if (hulkPreContract) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `Buy token: Success`,\n        description: `Confirm! You bought ${fromWei(amountOut.toString())} HULKPre!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPending(true)\n      const valueBnb = toWei(amountIn.toString())\n      const value = coinToTokens.toString()\n      const params: { from: string, value?: string } = { from: account }\n      if (coin === ECoins.Zero) params.value = valueBnb\n      const trx = await hulkPreContract.methods\n        .buyTokens(value, coin)\n        .send({ ...params })\n        .on('transactionHash', (tx) => {\n          return tx.transactionHash\n        })\n        .catch((e: any) => {\n          toast.title = 'Buy token: Failed'\n          toast.type = toastTypes.DANGER\n          toast.description = e.receipt !== undefined ? 'Something went wrong!' : e.message\n        })\n        .finally(() => {\n          setPending(false)\n          getData()\n        })\n      if (trx?.transactionHash) {\n        toast.action = {\n          text: 'View transaction',\n          url: `https://testnet.bscscan.com/tx/${trx.transactionHash}`,\n        }\n      }\n      addToast(toast)\n    }\n  }, [hulkPreContract, amountOut, amountIn, coinToTokens, account, coin, addToast, getData])\n\n  useEffect(() => {\n    if (!availableTokens.isZero()) {\n      const availableDefault = parseFloat(fromWei(ERoundAvailable[round]))\n      const availableCurrent = parseFloat(fromWei(availableTokens.toString()))\n      const perc: number = 100 - ((availableCurrent / availableDefault) * 100)\n      setPercent(parseFloat(perc.toFixed(3)))\n    } else {\n      setPercent(100)\n    }\n  }, [round, availableTokens])\n\n  const onMax = useCallback(() => {\n    const maxBalance = shortBalance(fromWei(balance.toString()))\n    setAmountIn(maxBalance)\n  }, [setAmountIn, balance])\n\n  const onSelectCoin = useCallback((selectCoin: ECoins | string) => {\n    setCoin(selectCoin)\n  }, [])\n\n  const onApprove = useCallback(() => {\n    if (coin !== ECoins.Zero && account) {\n      setPendingApprove(true)\n      const isBusd = coin === ECoins.BUSD\n      if (isBusd) {\n        onBusdApprove().then(() => setPendingApprove(false))\n      } else {\n        onUsdtApprove().then(() => setPendingApprove(false))\n      }\n      getDataCoins()\n    }\n  }, [getDataCoins, account, coin, onBusdApprove, onUsdtApprove])\n\n  return useMemo(() => {\n    return {\n      round,\n      availableTokens,\n      onBuyTokens,\n      pending,\n      onChangeAmountIn,\n      balance,\n      amountIn,\n      onMax,\n      coin,\n      onSelectCoin,\n      allowance,\n      onApprove,\n      pendingApprove,\n      percent,\n      tokenToCoins,\n      amountOut,\n      onChangeAmountOut\n    }\n  }, [\n    round,\n    availableTokens,\n    onBuyTokens,\n    pending,\n    onChangeAmountIn,\n    balance,\n    amountIn,\n    onMax,\n    coin,\n    onSelectCoin,\n    allowance,\n    onApprove,\n    pendingApprove,\n    percent,\n    tokenToCoins,\n    amountOut,\n    onChangeAmountOut\n  ])\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ToastContext.tsx",["607","608"],"import { Toast } from \"@hulkfinance/hulk-uikit\";\nimport React, {createContext, useReducer} from \"react\";\n\nconst initialState: Toast[] = []\n\nexport const toastReducer = (state: Toast[], action: any) => {\n    switch (action.type) {\n        case 'add' :\n            return [action.payload.toast, ...state];\n        case 'remove' :\n            return state.filter((prevToast) => prevToast.id !== action.payload.id);\n        default:\n            return state;\n    }\n};\n\nexport const ToastContext = createContext<{\n    toasts: Toast[],\n    addToast: (toast: Toast) => void,\n    removeToast: (id: string) => void,\n}>({\n    toasts: [],\n    addToast: (toast) => {console.log(toast)},\n    removeToast: (id) => {console.log(id)},\n});\n\nexport default function ToastProvider({children}: any) {\n    const [toasts, dispatch] = useReducer(toastReducer, initialState);\n    const removeToast = (id: string) => {\n        dispatch({type: \"remove\", payload: {id}})\n    };\n    const addToast = (toast: Toast) => {\n        dispatch({type: \"add\", payload: {toast}});\n    };\n\n    return (\n        <ToastContext.Provider\n            value={{\n                toasts,\n                removeToast,\n                addToast\n            }}\n        >\n            {children}\n        </ToastContext.Provider>\n    )\n\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/Referral.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useReferral.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Swap.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useHulkSwap.ts",["609","610","611","612","613"],"import { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport { fromWei, toWei } from 'web3-utils'\nimport { useHulkContract, useHulkPreContract, useHulkSwapContract } from './useContract'\nimport { getHulkSwapAddress } from '../utils/addressHelpers'\nimport useBlock from './useBlock'\nimport { useIfoApprove } from './useApprove'\nimport { ToastContext } from '../contexts/ToastContext'\nimport { escapeRegExp, inputRegex, shortBalance } from '../utils'\n\nconst BN_0 = BigNumber.from('0')\n\nexport default function useHulkSwap() {\n  const {account} = useWallet()\n  const { addToast } = useContext(ToastContext)\n  const hulkSwapContract = useHulkSwapContract()\n  const hulkPreContract = useHulkPreContract()\n  const hulkContract = useHulkContract()\n  const [pending, setPending] = useState<boolean>(false)\n  const [pendingApprove, setPendingApprove] = useState<boolean>(false)\n  const onHulkPreApprove = useIfoApprove(hulkPreContract, getHulkSwapAddress())\n  const [amount, setAmount] = useState<string>('')\n  const [amountOut, setAmountOut] = useState<string>('')\n\n  const [hulkBalance, setHulkBalance] = useState<BigNumber>(BN_0)\n  const [hulkPreBalance, setHulkPreBalance] = useState<BigNumber>(BN_0)\n  const [allowance, setAllowance] = useState<BigNumber>(BN_0)\n  const block = useBlock()\n\n  const getData = useCallback(() => {\n    if (account) {\n      if (hulkPreContract) {\n        hulkPreContract.methods.balanceOf(account).call()\n          .then((res: string) => {\n            setHulkPreBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n        hulkPreContract.methods.allowance(account, getHulkSwapAddress()).call()\n          .then((res: string) => {\n            setAllowance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n      }\n      if (hulkContract) {\n        hulkContract.methods.balanceOf(account).call()\n          .then((res: string) => {\n            setHulkBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n      }\n    }\n  }, [account, hulkContract, hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n\n  const onChangeAmountIn = useCallback( async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(hulkPreBalance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmount(nextUserInput)\n      setAmountOut(nextUserInput)\n    }\n  }, [hulkPreBalance])\n\n  const onChangeAmountOut = useCallback( async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(hulkPreBalance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmountOut(nextUserInput)\n      setAmount(nextUserInput)\n    }\n  }, [hulkPreBalance])\n\n  const onSwap = useCallback(async () => {\n    if (hulkSwapContract) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `SWap token: Success`,\n        description: `Confirm! You Swap ${amount} HULKPre to ${amountOut} HULK!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPending(true)\n      const trx = await hulkSwapContract.methods\n        .swap(toWei(amount))\n        .send({ from: account })\n        .on('transactionHash', (tx) => {\n          return tx.transactionHash\n        })\n        .catch((e: any) => {\n          toast.title = 'Swap token: Failed'\n          toast.type = toastTypes.DANGER\n          toast.description = e.receipt !== undefined ? 'Something went wrong!' : e.message\n        })\n        .finally(() => {\n          setPending(false)\n          getData()\n        })\n      if (trx?.transactionHash) {\n        toast.action = {\n          text: 'View transaction',\n          url: `https://testnet.bscscan.com/tx/${trx.transactionHash}`,\n        }\n      }\n      addToast(toast)\n    }\n  }, [hulkSwapContract, amount, amountOut, account, addToast, getData])\n\n  const onApprove = useCallback( async () => {\n    if (account) {\n      setPendingApprove(true)\n      try {\n        await onHulkPreApprove()\n      } catch (e) {\n        console.log(e)\n      }\n      setPendingApprove(false)\n      getData()\n    }\n  }, [account, getData, onHulkPreApprove])\n\n  return useMemo(() => {\n    return {\n      allowance,\n      hulkBalance,\n      hulkPreBalance,\n      onApprove,\n      pending,\n      pendingApprove,\n      onSwap,\n      onChangeAmountIn,\n      onChangeAmountOut,\n      amount,\n      amountOut\n    }\n  }, [\n    allowance,\n    hulkBalance,\n    hulkPreBalance,\n    onApprove,\n    pending,\n    pendingApprove,\n    onSwap,\n    onChangeAmountIn,\n    onChangeAmountOut,\n    amount,\n    amountOut\n  ])\n}",{"ruleId":"614","replacedBy":"615"},{"ruleId":"616","replacedBy":"617"},{"ruleId":"618","replacedBy":"619"},{"ruleId":"620","replacedBy":"621"},{"ruleId":"622","replacedBy":"623"},{"ruleId":"624","severity":1,"message":"625","line":2,"column":50,"nodeType":"626","messageId":"627","endLine":2,"endColumn":61},{"ruleId":"624","severity":1,"message":"628","line":7,"column":10,"nodeType":"626","messageId":"627","endLine":7,"endColumn":28},{"ruleId":"624","severity":1,"message":"629","line":2,"column":21,"nodeType":"626","messageId":"627","endLine":2,"endColumn":28},{"ruleId":"624","severity":1,"message":"630","line":6,"column":10,"nodeType":"626","messageId":"627","endLine":6,"endColumn":39},{"ruleId":"624","severity":1,"message":"631","line":33,"column":7,"nodeType":"626","messageId":"627","endLine":33,"endColumn":43},{"ruleId":"632","severity":1,"message":"633","line":60,"column":7,"nodeType":"634","messageId":"635","endLine":60,"endColumn":18},{"ruleId":"624","severity":1,"message":"636","line":7,"column":8,"nodeType":"626","messageId":"627","endLine":7,"endColumn":19},{"ruleId":"624","severity":1,"message":"637","line":8,"column":10,"nodeType":"626","messageId":"627","endLine":8,"endColumn":15},{"ruleId":"624","severity":1,"message":"638","line":9,"column":27,"nodeType":"626","messageId":"627","endLine":9,"endColumn":41},{"ruleId":"624","severity":1,"message":"639","line":9,"column":43,"nodeType":"626","messageId":"627","endLine":9,"endColumn":56},{"ruleId":"624","severity":1,"message":"640","line":14,"column":10,"nodeType":"626","messageId":"627","endLine":14,"endColumn":32},{"ruleId":"624","severity":1,"message":"641","line":19,"column":8,"nodeType":"626","messageId":"627","endLine":19,"endColumn":15},{"ruleId":"624","severity":1,"message":"642","line":47,"column":62,"nodeType":"626","messageId":"627","endLine":47,"endColumn":71},{"ruleId":"632","severity":1,"message":"633","line":54,"column":15,"nodeType":"634","messageId":"635","endLine":54,"endColumn":26},{"ruleId":"632","severity":1,"message":"633","line":82,"column":15,"nodeType":"634","messageId":"635","endLine":82,"endColumn":26},{"ruleId":"632","severity":1,"message":"633","line":104,"column":7,"nodeType":"634","messageId":"635","endLine":104,"endColumn":18},{"ruleId":"624","severity":1,"message":"642","line":116,"column":62,"nodeType":"626","messageId":"627","endLine":116,"endColumn":71},{"ruleId":"632","severity":1,"message":"633","line":118,"column":11,"nodeType":"634","messageId":"635","endLine":118,"endColumn":22},{"ruleId":"632","severity":1,"message":"633","line":122,"column":13,"nodeType":"634","messageId":"635","endLine":122,"endColumn":24},{"ruleId":"632","severity":1,"message":"633","line":124,"column":15,"nodeType":"634","messageId":"635","endLine":124,"endColumn":26},{"ruleId":"632","severity":1,"message":"633","line":152,"column":15,"nodeType":"634","messageId":"635","endLine":152,"endColumn":26},{"ruleId":"632","severity":1,"message":"633","line":180,"column":7,"nodeType":"634","messageId":"635","endLine":180,"endColumn":18},{"ruleId":"624","severity":1,"message":"643","line":208,"column":11,"nodeType":"626","messageId":"627","endLine":208,"endColumn":17},{"ruleId":"632","severity":1,"message":"633","line":234,"column":5,"nodeType":"634","messageId":"635","endLine":234,"endColumn":16},{"ruleId":"624","severity":1,"message":"644","line":254,"column":11,"nodeType":"626","messageId":"627","endLine":254,"endColumn":33},{"ruleId":"624","severity":1,"message":"645","line":261,"column":11,"nodeType":"626","messageId":"627","endLine":261,"endColumn":15},{"ruleId":"632","severity":1,"message":"633","line":267,"column":5,"nodeType":"634","messageId":"635","endLine":267,"endColumn":16},{"ruleId":"632","severity":1,"message":"633","line":279,"column":3,"nodeType":"634","messageId":"635","endLine":279,"endColumn":14},{"ruleId":"614","replacedBy":"646"},{"ruleId":"616","replacedBy":"647"},{"ruleId":"618","replacedBy":"648"},{"ruleId":"620","replacedBy":"649"},{"ruleId":"622","replacedBy":"650"},{"ruleId":"632","severity":1,"message":"633","line":93,"column":3,"nodeType":"634","messageId":"635","endLine":93,"endColumn":14},{"ruleId":"624","severity":1,"message":"651","line":13,"column":7,"nodeType":"626","messageId":"627","endLine":13,"endColumn":10},{"ruleId":"614","replacedBy":"652"},{"ruleId":"616","replacedBy":"653"},{"ruleId":"618","replacedBy":"654"},{"ruleId":"620","replacedBy":"655"},{"ruleId":"622","replacedBy":"656"},{"ruleId":"624","severity":1,"message":"637","line":3,"column":10,"nodeType":"626","messageId":"627","endLine":3,"endColumn":15},{"ruleId":"624","severity":1,"message":"657","line":5,"column":10,"nodeType":"626","messageId":"627","endLine":5,"endColumn":24},{"ruleId":"624","severity":1,"message":"658","line":3,"column":35,"nodeType":"626","messageId":"627","endLine":3,"endColumn":43},{"ruleId":"624","severity":1,"message":"659","line":5,"column":10,"nodeType":"626","messageId":"627","endLine":5,"endColumn":21},{"ruleId":"624","severity":1,"message":"660","line":56,"column":5,"nodeType":"626","messageId":"627","endLine":56,"endColumn":17},{"ruleId":"624","severity":1,"message":"661","line":1,"column":49,"nodeType":"626","messageId":"627","endLine":1,"endColumn":58},{"ruleId":"624","severity":1,"message":"662","line":13,"column":8,"nodeType":"626","messageId":"627","endLine":13,"endColumn":22},{"ruleId":"624","severity":1,"message":"663","line":21,"column":8,"nodeType":"626","messageId":"627","endLine":21,"endColumn":15},{"ruleId":"624","severity":1,"message":"664","line":101,"column":42,"nodeType":"626","messageId":"627","endLine":101,"endColumn":49},{"ruleId":"632","severity":1,"message":"633","line":108,"column":3,"nodeType":"634","messageId":"635","endLine":108,"endColumn":14},{"ruleId":"624","severity":1,"message":"665","line":8,"column":26,"nodeType":"626","messageId":"627","endLine":8,"endColumn":43},{"ruleId":"624","severity":1,"message":"666","line":4,"column":10,"nodeType":"626","messageId":"627","endLine":4,"endColumn":22},{"ruleId":"624","severity":1,"message":"667","line":4,"column":24,"nodeType":"626","messageId":"627","endLine":4,"endColumn":31},{"ruleId":"624","severity":1,"message":"668","line":4,"column":33,"nodeType":"626","messageId":"627","endLine":4,"endColumn":40},{"ruleId":"624","severity":1,"message":"669","line":28,"column":3,"nodeType":"626","messageId":"627","endLine":28,"endColumn":7},{"ruleId":"624","severity":1,"message":"670","line":4,"column":8,"nodeType":"626","messageId":"627","endLine":4,"endColumn":17},{"ruleId":"624","severity":1,"message":"662","line":6,"column":8,"nodeType":"626","messageId":"627","endLine":6,"endColumn":22},{"ruleId":"624","severity":1,"message":"671","line":4,"column":8,"nodeType":"626","messageId":"627","endLine":4,"endColumn":23},{"ruleId":"624","severity":1,"message":"672","line":6,"column":10,"nodeType":"626","messageId":"627","endLine":6,"endColumn":24},{"ruleId":"624","severity":1,"message":"673","line":7,"column":10,"nodeType":"626","messageId":"627","endLine":7,"endColumn":26},{"ruleId":"624","severity":1,"message":"674","line":2,"column":22,"nodeType":"626","messageId":"627","endLine":2,"endColumn":24},{"ruleId":"624","severity":1,"message":"675","line":9,"column":7,"nodeType":"626","messageId":"627","endLine":9,"endColumn":11},{"ruleId":"624","severity":1,"message":"676","line":10,"column":32,"nodeType":"626","messageId":"627","endLine":10,"endColumn":51},{"ruleId":"614","replacedBy":"677"},{"ruleId":"616","replacedBy":"678"},{"ruleId":"618","replacedBy":"679"},{"ruleId":"620","replacedBy":"680"},{"ruleId":"622","replacedBy":"681"},{"ruleId":"632","severity":1,"message":"633","line":70,"column":7,"nodeType":"634","messageId":"635","endLine":70,"endColumn":18},{"ruleId":"624","severity":1,"message":"682","line":98,"column":7,"nodeType":"626","messageId":"627","endLine":98,"endColumn":21},{"ruleId":"632","severity":1,"message":"633","line":45,"column":11,"nodeType":"634","messageId":"635","endLine":45,"endColumn":22},{"ruleId":"624","severity":1,"message":"683","line":73,"column":10,"nodeType":"626","messageId":"627","endLine":73,"endColumn":14},{"ruleId":"624","severity":1,"message":"684","line":79,"column":10,"nodeType":"626","messageId":"627","endLine":79,"endColumn":15},{"ruleId":"632","severity":1,"message":"633","line":89,"column":11,"nodeType":"634","messageId":"635","endLine":89,"endColumn":22},{"ruleId":"632","severity":1,"message":"633","line":102,"column":11,"nodeType":"634","messageId":"635","endLine":102,"endColumn":22},{"ruleId":"632","severity":1,"message":"633","line":110,"column":11,"nodeType":"634","messageId":"635","endLine":110,"endColumn":22},{"ruleId":"632","severity":1,"message":"633","line":129,"column":13,"nodeType":"634","messageId":"635","endLine":129,"endColumn":24},{"ruleId":"632","severity":1,"message":"633","line":142,"column":13,"nodeType":"634","messageId":"635","endLine":142,"endColumn":24},{"ruleId":"632","severity":1,"message":"633","line":170,"column":11,"nodeType":"634","messageId":"635","endLine":170,"endColumn":22},{"ruleId":"632","severity":1,"message":"633","line":23,"column":27,"nodeType":"634","messageId":"635","endLine":23,"endColumn":38},{"ruleId":"632","severity":1,"message":"633","line":24,"column":27,"nodeType":"634","messageId":"635","endLine":24,"endColumn":38},{"ruleId":"624","severity":1,"message":"685","line":11,"column":36,"nodeType":"626","messageId":"627","endLine":11,"endColumn":48},{"ruleId":"632","severity":1,"message":"633","line":39,"column":30,"nodeType":"634","messageId":"635","endLine":39,"endColumn":41},{"ruleId":"632","severity":1,"message":"633","line":44,"column":30,"nodeType":"634","messageId":"635","endLine":44,"endColumn":41},{"ruleId":"632","severity":1,"message":"633","line":51,"column":30,"nodeType":"634","messageId":"635","endLine":51,"endColumn":41},{"ruleId":"632","severity":1,"message":"633","line":121,"column":9,"nodeType":"634","messageId":"635","endLine":121,"endColumn":20},"lines-around-directive",["686"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useFetchPublicData' is defined but never used.","'useMemo' is defined but never used.","'fetchLaunchPoolsUserDataAsync' is defined but never used.","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'LotteryCard' is defined but never used.","'Image' is defined but never used.","'CAKE_PER_BLOCK' is defined but never used.","'CAKE_POOL_PID' is defined but never used.","'fetchFarmUserDataAsync' is defined but never used.","'Divider' is defined but never used.","'_slimeamm' is defined but never used.","'tkname' is assigned a value but never used.","'stakingTokenPriceInBNB' is assigned a value but never used.","'apy2' is assigned a value but never used.",["686"],[],[],[],[],"'Row' is assigned a value but never used.",["686"],[],[],[],[],"'communityFarms' is defined but never used.","'Skeleton' is defined but never used.","'useGetStats' is defined but never used.","'mashPerBlock' is assigned a value but never used.","'useEffect' is defined but never used.","'useAllEarnings' is defined but never used.","'useWeb3' is defined but never used.","'account' is defined but never used.","'useFarmFromSymbol' is defined but never used.","'CommunityTag' is defined but never used.","'CoreTag' is defined but never used.","'RiskTag' is defined but never used.","'risk' is defined but never used.","'BigNumber' is defined but never used.","'useTokenBalance' is defined but never used.","'getCakeAddress' is defined but never used.","'getBalanceNumber' is defined but never used.","'BN' is defined but never used.","'BN_0' is assigned a value but never used.","'sousEmegencyUnstake' is defined but never used.",["686"],[],[],[],[],"'ReferralButton' is assigned a value but never used.","'rate' is assigned a value but never used.","'price' is assigned a value but never used.","'shortBalance' is defined but never used.","padding-line-between-statements"]