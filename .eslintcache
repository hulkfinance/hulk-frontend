[{"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/index.tsx":"1","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/Providers.tsx":"2","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/App.tsx":"3","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/PageLoader.tsx":"4","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/style/Global.tsx":"5","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/NotFound.tsx":"6","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/index.ts":"7","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/index.ts":"8","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/index.tsx":"9","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ThemeContext.tsx":"10","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Page.tsx":"11","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/index.ts":"12","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/actions.ts":"13","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/types.ts":"14","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/config.ts":"15","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/Home.tsx":"16","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/Farms.tsx":"17","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/multicall.ts":"18","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useI18n.ts":"19","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Container.tsx":"20","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTheme.ts":"21","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TwitterCard.tsx":"22","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/Divider.tsx":"23","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/FarmCard.tsx":"24","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TotalValueLockedCard.tsx":"25","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeStats.tsx":"26","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/FarmStakingCard.tsx":"27","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/index.ts":"28","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/formatBalance.ts":"29","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/addressHelpers.ts":"30","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Flex.tsx":"31","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmTabButtons/index.tsx":"32","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyButton.tsx":"33","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardActionsContainer.tsx":"34","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CardValue.tsx":"35","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardHeading.tsx":"36","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeHarvestBalance.tsx":"37","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeWalletBalance.tsx":"38","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarmUser.ts":"39","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarms.ts":"40","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/index.ts":"41","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Tags.tsx":"42","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/UnlockButton.tsx":"43","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/farms.ts":"44","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyCalculatorModal.tsx":"45","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx":"46","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/StakeAction.tsx":"47","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/contracts.ts":"48","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Balance.tsx":"49","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/WithdrawModal.tsx":"50","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/DepositModal.tsx":"51","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useContract.ts":"52","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/compoundApyHelpers.ts":"53","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getLiquidityUrlPathParts.ts":"54","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/index.ts":"55","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/index.ts":"56","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/TokenInput.tsx":"57","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/ModalActions.tsx":"58","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/index.ts":"59","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/index.ts":"60","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/index.ts":"61","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/Input.tsx":"62","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/Spacer.tsx":"63","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/DetailsSection.tsx":"64","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/index.ts":"65","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/index.ts":"66","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/ExpandableSectionButton.tsx":"67","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/Label.tsx":"68","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/Timer.tsx":"69","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/PreSale.tsx":"70","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/index.ts":"71","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/PreSale.tsx":"72","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Timeline.tsx":"73","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Form.tsx":"74","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/index.ts":"75","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/usePresale.ts":"76","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ToastContext.tsx":"77","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/index.ts":"78","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/Referral.tsx":"79","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useReferral.ts":"80","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Swap.tsx":"81","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useHulkSwap.ts":"82","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/reducer.ts":"83","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/global/actions.ts":"84","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/reducer.ts":"85","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/reducer.ts":"86","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/reducer.ts":"87","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/getFarmsPrices.ts":"88","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchMasterChefData.ts":"89","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchPublicFarmData.ts":"90","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/actions.ts":"91","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/types.ts":"92","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/actions.ts":"93","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/actions.ts":"94","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/actions.ts":"95","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/bigNumber.ts":"96","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contractHelpers.ts":"97","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/farmsPriceHelpers.ts":"98","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/farmHelpers.ts":"99","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/localStorageOrders.ts":"100","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contracts.ts":"101","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/web3React.ts":"102","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useActiveWeb3React.ts":"103","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/priceHelperLps.ts":"104","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/tokens.ts":"105","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/lists.ts":"106","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/helpers.ts":"107","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useAuth.ts":"108","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/hooks.ts":"109","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useRefreshEffect.ts":"110","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/selectors.ts":"111","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/wallet.ts":"112","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/networks.ts":"113","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useBlockNumber.ts":"114","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/languageContext.tsx":"115","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/translationsContext.ts":"116","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/translateTextHelpers.ts":"117","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/localisation/languages.ts":"118","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/helpers.ts":"119","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useUserAgent.ts":"120","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/updater.ts":"121","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/block/hooks.ts":"122","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/updater.tsx":"123","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/updater.tsx":"124","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/hooks.ts":"125","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/chunkArray.ts":"126","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/retry.ts":"127","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useDebounce.ts":"128","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useFetchListCallback.ts":"129","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useInterval.ts":"130","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useIsWindowVisible.ts":"131","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getTokenList.ts":"132","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/ENS/resolveENSContentHash.ts":"133","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contenthashToUri.ts":"134","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/ENS/parseENSAddress.ts":"135","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/uriToHttp.ts":"136","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useIntersectionObserver.ts":"137","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/apr.ts":"138","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/latinise.ts":"139","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/FarmContext.tsx":"140","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/index.tsx":"141","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Tokens.ts":"142","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/useUserAddedTokens.ts":"143","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/hooks.ts":"144","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/pools.tsx":"145","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/wallet/hooks.ts":"146","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/hooks/useFarmsWithBalance.tsx":"147","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useHarvestFarm.ts":"148","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/index.ts":"149","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/estimateGas.ts":"150","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/farms.ts":"151","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getGasPrice.ts":"152","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTokenBalance.ts":"153","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/FarmList.tsx":"154","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useApproveFarm.ts":"155","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useCatchTxError.tsx":"156","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useCallWithGasPrice.ts":"157","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useUnstakeFarms.ts":"158","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/sentry.ts":"159","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useStakeFarms.ts":"160","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/index.tsx":"161","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/useTranslation.ts":"162","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/Provider.tsx":"163","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/PairImage.tsx":"164","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/index.ts":"165","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchFarms.ts":"166","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchMasterChefData.ts":"167","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/getFarmsPrices.ts":"168","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchFarmUser.ts":"169","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPublicFarmData.ts":"170"},{"size":278,"mtime":1620390462404,"results":"171","hashOfConfig":"172"},{"size":1071,"mtime":1653906509355,"results":"173","hashOfConfig":"172"},{"size":3795,"mtime":1653900465241,"results":"174","hashOfConfig":"172"},{"size":397,"mtime":1643802521119,"results":"175","hashOfConfig":"172"},{"size":589,"mtime":1643962053712,"results":"176","hashOfConfig":"172"},{"size":862,"mtime":1653903851134,"results":"177","hashOfConfig":"172"},{"size":35,"mtime":1620390462422,"results":"178","hashOfConfig":"172"},{"size":34,"mtime":1620390462427,"results":"179","hashOfConfig":"172"},{"size":1328,"mtime":1653905469805,"results":"180","hashOfConfig":"172"},{"size":952,"mtime":1653905227374,"results":"181","hashOfConfig":"172"},{"size":426,"mtime":1620390462379,"results":"182","hashOfConfig":"172"},{"size":3306,"mtime":1653980810961,"results":"183","hashOfConfig":"172"},{"size":365,"mtime":1653822420435,"results":"184","hashOfConfig":"185"},{"size":5058,"mtime":1653903688219,"results":"186","hashOfConfig":"172"},{"size":1803,"mtime":1653821743608,"results":"187","hashOfConfig":"172"},{"size":2241,"mtime":1653905410814,"results":"188","hashOfConfig":"172"},{"size":7024,"mtime":1653927595531,"results":"189","hashOfConfig":"172"},{"size":1921,"mtime":1653921310166,"results":"190","hashOfConfig":"172"},{"size":566,"mtime":1620390462401,"results":"191","hashOfConfig":"172"},{"size":321,"mtime":1643887946961,"results":"192","hashOfConfig":"172"},{"size":374,"mtime":1653904099262,"results":"193","hashOfConfig":"172"},{"size":1667,"mtime":1653904150926,"results":"194","hashOfConfig":"172"},{"size":193,"mtime":1620390462417,"results":"195","hashOfConfig":"185"},{"size":6208,"mtime":1653979851922,"results":"196","hashOfConfig":"172"},{"size":2315,"mtime":1653903688215,"results":"197","hashOfConfig":"172"},{"size":3172,"mtime":1653903244802,"results":"198","hashOfConfig":"172"},{"size":5877,"mtime":1653901809995,"results":"199","hashOfConfig":"172"},{"size":7248,"mtime":1653927841458,"results":"200","hashOfConfig":"172"},{"size":2896,"mtime":1653841722530,"results":"201","hashOfConfig":"172"},{"size":971,"mtime":1653908072572,"results":"202","hashOfConfig":"172"},{"size":319,"mtime":1653908519124,"results":"203","hashOfConfig":"172"},{"size":1508,"mtime":1653907498373,"results":"204","hashOfConfig":"172"},{"size":1056,"mtime":1653897388347,"results":"205","hashOfConfig":"172"},{"size":5782,"mtime":1653924809311,"results":"206","hashOfConfig":"172"},{"size":1194,"mtime":1644650992887,"results":"207","hashOfConfig":"172"},{"size":1272,"mtime":1653979987182,"results":"208","hashOfConfig":"172"},{"size":632,"mtime":1653903774492,"results":"209","hashOfConfig":"172"},{"size":633,"mtime":1653903794421,"results":"210","hashOfConfig":"172"},{"size":3148,"mtime":1653927018692,"results":"211","hashOfConfig":"172"},{"size":2242,"mtime":1653828574563,"results":"212","hashOfConfig":"172"},{"size":1840,"mtime":1653824635341,"results":"213","hashOfConfig":"172"},{"size":824,"mtime":1653904600444,"results":"214","hashOfConfig":"172"},{"size":528,"mtime":1653903739013,"results":"215","hashOfConfig":"172"},{"size":1749,"mtime":1653954547722,"results":"216","hashOfConfig":"172"},{"size":5211,"mtime":1653909152461,"results":"217","hashOfConfig":"172"},{"size":3338,"mtime":1653926795424,"results":"218","hashOfConfig":"172"},{"size":2670,"mtime":1653910952143,"results":"219","hashOfConfig":"172"},{"size":859,"mtime":1653954712109,"results":"220","hashOfConfig":"172"},{"size":1141,"mtime":1643802521301,"results":"221","hashOfConfig":"185"},{"size":2057,"mtime":1653910845221,"results":"222","hashOfConfig":"172"},{"size":2166,"mtime":1653910848877,"results":"223","hashOfConfig":"172"},{"size":3126,"mtime":1653903244795,"results":"224","hashOfConfig":"172"},{"size":1373,"mtime":1653909174100,"results":"225","hashOfConfig":"172"},{"size":555,"mtime":1653897531474,"results":"226","hashOfConfig":"172"},{"size":40,"mtime":1620390462376,"results":"227","hashOfConfig":"172"},{"size":42,"mtime":1620390462372,"results":"228","hashOfConfig":"172"},{"size":2084,"mtime":1643802521448,"results":"229","hashOfConfig":"172"},{"size":797,"mtime":1620390462372,"results":"230","hashOfConfig":"172"},{"size":4975,"mtime":1653907643070,"results":"231","hashOfConfig":"172"},{"size":78,"mtime":1620390462370,"results":"232","hashOfConfig":"172"},{"size":36,"mtime":1620390462374,"results":"233","hashOfConfig":"172"},{"size":1164,"mtime":1620390462369,"results":"234","hashOfConfig":"172"},{"size":722,"mtime":1620390462374,"results":"235","hashOfConfig":"172"},{"size":2333,"mtime":1653910250999,"results":"236","hashOfConfig":"172"},{"size":53,"mtime":1620390462368,"results":"237","hashOfConfig":"172"},{"size":35,"mtime":1620390462370,"results":"238","hashOfConfig":"185"},{"size":987,"mtime":1653904384956,"results":"239","hashOfConfig":"172"},{"size":478,"mtime":1620390462370,"results":"240","hashOfConfig":"185"},{"size":2370,"mtime":1644653670453,"results":"241","hashOfConfig":"172"},{"size":2054,"mtime":1644686577720,"results":"242","hashOfConfig":"172"},{"size":37,"mtime":1643901758376,"results":"243","hashOfConfig":"172"},{"size":2181,"mtime":1653903913407,"results":"244","hashOfConfig":"172"},{"size":2297,"mtime":1643963355777,"results":"245","hashOfConfig":"172"},{"size":8253,"mtime":1653894193731,"results":"246","hashOfConfig":"172"},{"size":6174,"mtime":1653927879477,"results":"247","hashOfConfig":"172"},{"size":10769,"mtime":1653906004222,"results":"248","hashOfConfig":"172"},{"size":1283,"mtime":1644226182692,"results":"249","hashOfConfig":"172"},{"size":38,"mtime":1644230850736,"results":"250","hashOfConfig":"172"},{"size":6626,"mtime":1653894193726,"results":"251","hashOfConfig":"172"},{"size":962,"mtime":1653955533356,"results":"252","hashOfConfig":"172"},{"size":5067,"mtime":1653903824637,"results":"253","hashOfConfig":"172"},{"size":5940,"mtime":1653905976634,"results":"254","hashOfConfig":"172"},{"size":6242,"mtime":1652791704283,"results":"255","hashOfConfig":"172"},{"size":402,"mtime":1653828895839,"results":"256","hashOfConfig":"172"},{"size":2880,"mtime":1652791704293,"results":"257","hashOfConfig":"172"},{"size":9805,"mtime":1652791704299,"results":"258","hashOfConfig":"172"},{"size":3958,"mtime":1652791704288,"results":"259","hashOfConfig":"172"},{"size":3857,"mtime":1652791704277,"results":"260","hashOfConfig":"172"},{"size":2200,"mtime":1653916819523,"results":"261","hashOfConfig":"172"},{"size":1544,"mtime":1653922057042,"results":"262","hashOfConfig":"172"},{"size":3580,"mtime":1652791704295,"results":"263","hashOfConfig":"172"},{"size":14357,"mtime":1653919971086,"results":"264","hashOfConfig":"172"},{"size":1160,"mtime":1652791704281,"results":"265","hashOfConfig":"172"},{"size":1232,"mtime":1653829157202,"results":"266","hashOfConfig":"172"},{"size":1687,"mtime":1652791704285,"results":"267","hashOfConfig":"172"},{"size":571,"mtime":1652791704303,"results":"268","hashOfConfig":"172"},{"size":2755,"mtime":1653908049421,"results":"269","hashOfConfig":"172"},{"size":716,"mtime":1652791704310,"results":"270","hashOfConfig":"172"},{"size":381,"mtime":1652791704310,"results":"271","hashOfConfig":"172"},{"size":4285,"mtime":1652791704315,"results":"272","hashOfConfig":"172"},{"size":1822,"mtime":1653841722535,"results":"273","hashOfConfig":"172"},{"size":1046,"mtime":1653904223219,"results":"274","hashOfConfig":"172"},{"size":950,"mtime":1653825402739,"results":"275","hashOfConfig":"172"},{"size":893,"mtime":1653904965165,"results":"276","hashOfConfig":"172"},{"size":46435,"mtime":1653916787673,"results":"277","hashOfConfig":"172"},{"size":788,"mtime":1653906089790,"results":"278","hashOfConfig":"172"},{"size":1125,"mtime":1653904271305,"results":"279","hashOfConfig":"172"},{"size":5012,"mtime":1653904212315,"results":"280","hashOfConfig":"172"},{"size":4278,"mtime":1653921934795,"results":"281","hashOfConfig":"172"},{"size":841,"mtime":1653828574556,"results":"282","hashOfConfig":"172"},{"size":5554,"mtime":1653927691787,"results":"283","hashOfConfig":"172"},{"size":2198,"mtime":1653893890471,"results":"284","hashOfConfig":"172"},{"size":840,"mtime":1653824635304,"results":"285","hashOfConfig":"172"},{"size":821,"mtime":1653826504580,"results":"286","hashOfConfig":"172"},{"size":3152,"mtime":1653904099265,"results":"287","hashOfConfig":"172"},{"size":404,"mtime":1620390462394,"results":"288","hashOfConfig":"172"},{"size":1636,"mtime":1653859596212,"results":"289","hashOfConfig":"172"},{"size":3061,"mtime":1653894283995,"results":"290","hashOfConfig":"172"},{"size":641,"mtime":1653905011220,"results":"291","hashOfConfig":"172"},{"size":205,"mtime":1652791704212,"results":"292","hashOfConfig":"172"},{"size":2981,"mtime":1653904388985,"results":"293","hashOfConfig":"172"},{"size":1248,"mtime":1653828574539,"results":"294","hashOfConfig":"172"},{"size":8613,"mtime":1652791704291,"results":"295","hashOfConfig":"172"},{"size":3459,"mtime":1653839180444,"results":"296","hashOfConfig":"172"},{"size":7050,"mtime":1653828895834,"results":"297","hashOfConfig":"172"},{"size":525,"mtime":1652791704286,"results":"298","hashOfConfig":"172"},{"size":1821,"mtime":1652791704290,"results":"299","hashOfConfig":"172"},{"size":711,"mtime":1652791704186,"results":"300","hashOfConfig":"172"},{"size":1994,"mtime":1653827374222,"results":"301","hashOfConfig":"172"},{"size":642,"mtime":1652791704198,"results":"302","hashOfConfig":"172"},{"size":796,"mtime":1652791704204,"results":"303","hashOfConfig":"172"},{"size":2498,"mtime":1652791704313,"results":"304","hashOfConfig":"172"},{"size":1709,"mtime":1652791704301,"results":"305","hashOfConfig":"172"},{"size":1449,"mtime":1652791704307,"results":"306","hashOfConfig":"172"},{"size":376,"mtime":1652791704300,"results":"307","hashOfConfig":"172"},{"size":815,"mtime":1652791704318,"results":"308","hashOfConfig":"172"},{"size":1516,"mtime":1652791704194,"results":"309","hashOfConfig":"172"},{"size":2057,"mtime":1653908980886,"results":"310","hashOfConfig":"172"},{"size":239,"mtime":1653904248152,"results":"311","hashOfConfig":"172"},{"size":138,"mtime":1652791704157,"results":"312","hashOfConfig":"172"},{"size":17792,"mtime":1653839367746,"results":"313","hashOfConfig":"172"},{"size":6272,"mtime":1653825402731,"results":"314","hashOfConfig":"172"},{"size":661,"mtime":1653904257215,"results":"315","hashOfConfig":"172"},{"size":8092,"mtime":1653841211758,"results":"316","hashOfConfig":"172"},{"size":90493,"mtime":1653907643061,"results":"317","hashOfConfig":"172"},{"size":5222,"mtime":1653839367739,"results":"318","hashOfConfig":"172"},{"size":2076,"mtime":1653901086771,"results":"319","hashOfConfig":"172"},{"size":1355,"mtime":1653928095097,"results":"320","hashOfConfig":"172"},{"size":54,"mtime":1652791704306,"results":"321","hashOfConfig":"172"},{"size":1975,"mtime":1652791704305,"results":"322","hashOfConfig":"172"},{"size":846,"mtime":1653955533353,"results":"323","hashOfConfig":"172"},{"size":528,"mtime":1653841722532,"results":"324","hashOfConfig":"172"},{"size":2608,"mtime":1653905739728,"results":"325","hashOfConfig":"172"},{"size":1430,"mtime":1653906216867,"results":"326","hashOfConfig":"172"},{"size":721,"mtime":1653905256410,"results":"327","hashOfConfig":"172"},{"size":5681,"mtime":1653927984528,"results":"328","hashOfConfig":"172"},{"size":2033,"mtime":1653826504571,"results":"329","hashOfConfig":"172"},{"size":463,"mtime":1652791704168,"results":"330","hashOfConfig":"172"},{"size":872,"mtime":1652791704316,"results":"331","hashOfConfig":"172"},{"size":569,"mtime":1653924357525,"results":"332","hashOfConfig":"172"},{"size":137,"mtime":1650569868470,"results":"333","hashOfConfig":"172"},{"size":322,"mtime":1650569868470,"results":"334","hashOfConfig":"172"},{"size":3602,"mtime":1653906509351,"results":"335","hashOfConfig":"172"},{"size":847,"mtime":1653980670987,"results":"336","hashOfConfig":"172"},{"size":7248,"mtime":1653927841458,"results":"337","hashOfConfig":"172"},{"size":2242,"mtime":1653828574562,"results":"338","hashOfConfig":"172"},{"size":2200,"mtime":1653916819523,"results":"339","hashOfConfig":"172"},{"size":3857,"mtime":1652791704277,"results":"340","hashOfConfig":"172"},{"size":3148,"mtime":1653927018692,"results":"341","hashOfConfig":"172"},{"size":1544,"mtime":1653922057041,"results":"342","hashOfConfig":"172"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},"26wpob",{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"345"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"371"},"mydm4p",{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"345"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"393"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"345"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"345"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"345"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"345"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"444","messages":"445","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"345"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"371"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"345"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"371"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"371"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"345"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"345"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"506","messages":"507","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"345"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"345"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"345"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"345"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"345"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"345"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"345"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651","usedDeprecatedRules":"345"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654","usedDeprecatedRules":"345"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"345"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"678","messages":"679","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"345"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"345"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"345"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"345"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/index.tsx",[],["709","710","711","712","713"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/Providers.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/App.tsx",["714","715"],"import React, { useEffect, Suspense, lazy, useContext, useCallback } from 'react'\r\nimport { BrowserRouter as Router, Route, Switch, useLocation } from 'react-router-dom'\r\nimport { isAddress } from 'ethers/lib/utils'\r\nimport { ResetCSS, ToastContainer } from '@hulkfinance/hulk-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport { ToastContext } from './contexts/ToastContext'\r\nimport useReferral from './hooks/useReferral'\r\nimport useActiveWeb3React from './hooks/useActiveWeb3React'\r\n\r\nimport ListsUpdater from './state/lists/updater'\r\nimport MulticallUpdater from './state/multicall/updater'\r\nimport TransactionUpdater from './state/transactions/updater'\r\nimport useAuth from './hooks/useAuth'\r\nimport { usePollBlockNumber } from './state/block/hooks'\r\nimport { usePollCoreFarmData } from './state/farms/hooks'\r\nimport useUserAgent from './hooks/useUserAgent'\r\nimport { ConnectorNames } from './utils/web3React'\r\nimport { storageConnectorKey } from './config'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Referral = lazy(() => import('./views/Referral'))\r\nconst PreSale = lazy(() => import('./views/PreSale'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n\r\n  usePollBlockNumber()\r\n  usePollCoreFarmData()\r\n  useUserAgent()\r\n  const { account } = useActiveWeb3React()\r\n  const {login} = useAuth()\r\n  const { onSaveAffiliateAddress } = useReferral()\r\n  const { toasts, removeToast } = useContext(ToastContext)\r\n  useEffect(() => {\r\n    const provider = localStorage.getItem(storageConnectorKey)\r\n    if (provider) {\r\n      console.log(provider)\r\n      login(provider || ConnectorNames.Injected)\r\n    }\r\n  }, [login])\r\n\r\n  // useFetchPublicData()\r\n\r\n  const saveAffiliateHandler = useCallback((search: string) => {\r\n    if (search !== '') {\r\n      const searchSplit = search.split('=')\r\n      if (searchSplit.length > 1) {\r\n        const affiliateAddress = searchSplit[1]\r\n        if (isAddress(affiliateAddress) && affiliateAddress !== account) {\r\n          onSaveAffiliateAddress(affiliateAddress)\r\n        }\r\n      }\r\n    }\r\n  }, [account, onSaveAffiliateAddress])\r\n\r\n  useEffect(() => {\r\n    if (window.location.search) {\r\n      saveAffiliateHandler(window.location.search)\r\n    }\r\n  }, [saveAffiliateHandler])\r\n\r\n  return (\r\n    <>\r\n      <ListsUpdater/>\r\n      <TransactionUpdater/>\r\n      <MulticallUpdater/>\r\n      <Router>\r\n        <ResetCSS />\r\n        <GlobalStyle />\r\n        <ToastContainer toasts={toasts} onRemove={removeToast} />\r\n        <Menu>\r\n          <Suspense fallback={<PageLoader />}>\r\n            <Switch>\r\n              <Route path='/' exact>\r\n                <Home />\r\n              </Route>\r\n              <Route path='/pre-sale' exact>\r\n                <PreSale />\r\n              </Route>\r\n              <Route path='/farms'>\r\n                <Farms />\r\n              </Route>\r\n              <Route path='/pools'>\r\n                <Farms tokenMode />\r\n              </Route>\r\n              {/* <Route path='/launch'> */}\r\n              {/*  <Pools /> */}\r\n              {/* </Route> */}\r\n              <Route path='/referral'>\r\n                <Referral />\r\n              </Route>\r\n              {/* 404 */}\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </Suspense>\r\n        </Menu>\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/PageLoader.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/style/Global.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/NotFound.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ThemeContext.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Page.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/actions.ts",[],["716","717","718","719","720"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/types.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/config.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/Home.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/Farms.tsx",["721","722","723","724","725","726","727","728","729","730","731"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/multicall.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useI18n.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Container.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTheme.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TwitterCard.tsx",["732"],"import React from 'react'\r\nimport { Card, CardBody, Heading } from '@hulkfinance/hulk-uikit'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport useTheme from '../../../hooks/useTheme'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 100%;\r\n  //height: 600px;\r\n  & > div {\r\n    flex: 1;\r\n    height: 100%; \r\n  }\r\n  [twdiv=\"yes\"] {\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 28px;\r\n  font-weight: 900;\r\n  @media(min-width: 768px) {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const {theme} = useTheme()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody p={40}>\r\n        <CardHeading mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </CardHeading>\r\n        <Wrapper>\r\n          <Timeline\r\n            dataSource={{\r\n              sourceType: 'profile',\r\n              screenName: 'SwapMarshmallow'\r\n            }}\r\n            options={{\r\n              height: '440px',\r\n              chrome: \"transparent, noheader, nofooter\",\r\n              width: \"100%\",\r\n              theme: 'dark',\r\n              borderColor: theme.colors.card,\r\n            }}\r\n          />\r\n        </Wrapper>\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/Divider.tsx",[],["733","734","735","736","737"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/FarmCard.tsx",["738","739","740"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TotalValueLockedCard.tsx",["741"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@hulkfinance/hulk-uikit'\r\nimport CardValue from './CardValue'\r\nimport tvlImage from '../../../assets/images/TVL.png'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport { useTotalValue } from '../../../state/farms/hooks'\r\n\r\nconst StyledTotalValueLockedCard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  overflow: hidden;\r\n`\r\nconst CardImage = styled.img`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  height: 100%;\r\n  max-height: 208px;\r\n  display: none;\r\n  @media(min-width: 768px) {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst TextItem = styled(Text)`\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 20px;\r\n  justify-content: space-between;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 24px;\r\n  font-weight: 900;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <Card mb={40}>\r\n        <CardBody p={40}>\r\n          <CardHeading mb=\"16px\">\r\n            {TranslateString(999, 'TVL')}\r\n          </CardHeading>\r\n          <>\r\n            <CardValue bold value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n            <Text mt={16} color=\"primary\" fontSize=\"20px\" style={{lineHeight: 1}}>{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n            <CardImage src={tvlImage} alt='TVL'/>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n      <Card style={{flex: 1}}>\r\n        <CardBody p={40}>\r\n          <CardHeading mb=\"16px\">\r\n            HULK LP Worth\r\n          </CardHeading>\r\n          <>\r\n            <Row>\r\n              <TextItem>HULK-BNB</TextItem>\r\n              <TextItem>$5.911</TextItem>\r\n            </Row>\r\n            <Row>\r\n              <TextItem>HULK-BUSD</TextItem>\r\n              <TextItem>$0.249</TextItem>\r\n            </Row>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeStats.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/FarmStakingCard.tsx",["742","743"],"import React, { useState, useCallback, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@hulkfinance/hulk-uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { ethers } from 'ethers'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\nimport hulkLogo from '../../../assets/images/HulkLogo.svg'\r\nimport metamaskLogo from '../../../assets/images/MetamaskIcon.svg'\r\nimport HomeFarm from '../../../assets/images/HomeFarmImage.png'\r\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport { useTokenBalance } from '../../../state/wallet/hooks'\r\nimport UnlockButton from '../../../components/UnlockButton'\r\nimport { usePriceHULKBusd } from '../../../state/farms/hooks'\r\nimport { getHULKTokenAddress } from '../../../utils/addressHelpers'\r\nimport useFarmsWithBalance from '../hooks/useFarmsWithBalance'\r\nimport { useAllHarvest } from '../../../hooks/Farms/useHarvestFarm'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  min-height: 376px;\r\n  position: relative;\r\n`\r\n\r\nconst Block = styled.div`\r\n  //margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n  position: relative;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  z-index: 0;\r\n  display: none;\r\n  @media(min-width: 768px) {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Token = styled.div`\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst Metamask = styled.div`\r\n  display: flex;\r\n  padding: 11px 13px 11px 24px;\r\n  background: rgba(255, 255, 255, 0.37);\r\n  border-radius: 24px;\r\n  margin-left: 16px;\r\n  transition: background-color .25s ease;\r\n  cursor: pointer;\r\n  span {\r\n    color: #fff;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 20px;\r\n    line-height: 24px;\r\n  }\r\n  img {\r\n    margin-left: 19px;\r\n  }\r\n  &:hover {\r\n    background: rgba(255, 255, 255, 0.6);\r\n  }\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 28px;\r\n  font-weight: 900;\r\n  @media(min-width: 768px) {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const token: {\r\n    symbol: string,\r\n    decimals: number,\r\n    address: string,\r\n    image?: string,\r\n  } = useMemo(() => {\r\n    return {\r\n      symbol: 'HULK',\r\n      decimals: 18,\r\n      address: getHULKTokenAddress(),\r\n      // image: 'https://pbs.twimg.com/profile_images/802481220340908032/M_vde_oi_400x400.jpg',\r\n    }\r\n  }, [])\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account, library } = useActiveWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const hulkBalanceAmount = useTokenBalance(getHULKTokenAddress())?.toSignificant(2)\r\n  const hulkBalance = getBalanceNumber(new BigNumber(hulkBalanceAmount || 0))\r\n  const hulkPrice = usePriceHULKBusd().toNumber()\r\n  const {earningsSum} = farmsWithBalance\r\n  const balancesWithValue = farmsWithBalance.farmsWithStakedBalance\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n  const provider: any = (window as WindowChain).ethereum\r\n  const onAddToken = useCallback(() => {\r\n    if (library) {\r\n      provider.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: token,\r\n        },\r\n      })\r\n    }\r\n  }, [library, provider, token])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardImage src={HomeFarm} alt='Home Farm Image'/>\r\n      <CardBody p={40}>\r\n        <CardHeading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </CardHeading>\r\n        <Token>\r\n          <img src={hulkLogo} alt=\"hulk logo\" width={74} height={74} />\r\n          <Metamask onClick={onAddToken}>\r\n            <span>+</span>\r\n            <img src={metamaskLogo} alt=\"metamask logo\" width={24} height={24} />\r\n          </Metamask>\r\n        </Token>\r\n        <Button\r\n          id=\"buy-all\"\r\n          disabled={false}\r\n          mb={24}\r\n        >\r\n          Buy HULk\r\n        </Button>\r\n        <Block>\r\n          <Label>{TranslateString(544, 'HULK to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(hulkPrice * (earningsSum || 0)).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'HULK in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={hulkBalance} />\r\n          <Label>~${(hulkPrice * hulkBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting HULK')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/index.ts",["744"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/formatBalance.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/addressHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Flex.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmTabButtons/index.tsx",["745","746"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@hulkfinance/hulk-uikit'\r\nimport useI18n from '../../../../hooks/useI18n'\r\n\r\ninterface FarmTabButtonsProps {\r\n  stakedOnly: boolean,\r\n  setStakedOnly: (arg: boolean) => void,\r\n  isActive: boolean,\r\n  setIsActive: (val: boolean) => void,\r\n}\r\n\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly, isActive, setIsActive }: FarmTabButtonsProps) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isActive ? 0 : 1} size=\"sm\" variant=\"subtle\" onClick={() => setIsActive(!isActive)} >\r\n        <ButtonMenuItem as=\"button\" >\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as=\"button\" >\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyButton.tsx",["747"],"import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@hulkfinance/hulk-uikit'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\nimport { Address } from '../../../../config/constants/types'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  hulkPrice: BigNumber\r\n  apy: number\r\n  quoteTokenAdresses?: string\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  hulkPrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      hulkPrice={hulkPrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardActionsContainer.tsx",["748","749","750","751","752","753","754","755","756"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CardValue.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardHeading.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeHarvestBalance.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeWalletBalance.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarmUser.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Tags.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/UnlockButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/farms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyCalculatorModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx",["757","758","759"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/StakeAction.tsx",["760","761","762","763"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@hulkfinance/hulk-uikit'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport { getBalanceNumber } from '../../../../utils/formatBalance'\r\nimport useStakeFarms from '../../../../hooks/Farms/useStakeFarms'\r\nimport useUnstakeFarms from '../../../../hooks/Farms/useUnstakeFarms'\r\nimport { FarmWithStakedValue } from '../../../../state/types'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance: BigNumber\r\n  tokenBalance: BigNumber\r\n  tokenName?: string\r\n  pid: number\r\n  depositFeeBP?: number,\r\n  farm: FarmWithStakedValue\r\n}\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ farm, stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal decimals={farm.token.decimals} max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal decimals={farm.token.decimals} max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" flexDirection=\"column\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <ButtonWrapper>\r\n          <Button\r\n            onClick={onPresentWithdraw}\r\n          >\r\n            Withdraw\r\n          </Button>\r\n          <Button\r\n            onClick={onPresentDeposit}\r\n          >\r\n            Stake\r\n          </Button>\r\n      </ButtonWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/contracts.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Balance.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/WithdrawModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/DepositModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useContract.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/compoundApyHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getLiquidityUrlPathParts.ts",["764"],"// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nimport { defaultChainId } from '../config'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }: any) => {\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses\n  const secondPart = tokenAddresses\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/TokenInput.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/ModalActions.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/Input.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/Spacer.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/DetailsSection.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/ExpandableSectionButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/Label.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/Timer.tsx",["765"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useMemo } from 'react'\nimport {Text} from '@hulkfinance/hulk-uikit'\nimport styled from 'styled-components'\nimport { useTimer } from 'react-timer-hook'\nimport { addZeroForward } from '../../../utils'\n\nconst TimerStyled = styled.div`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin-top: 56px;\n`\n\nconst TimerBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n`\n\nconst DateBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  align-content: center;\n  margin: 0 8px;\n`\n\nconst DateValue = styled(Text)`\n  font-size: 40px;\n  font-weight: bold;\n  line-height: 1;\n  color: ${({theme}) => theme.colors.primary};\n`\n\nconst DateName = styled(Text)`\n  font-size: 14px;\n  margin-top: 8px;\n  line-height: 1;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n`\n\nconst Separator = styled(Text)`\n  font-size: 60px;\n  font-weight: bold;\n  line-height: 1;\n  color: ${({theme}) => theme.colors.primary};\n  margin: 0 8px;\n`\nfunction Timer() {\n\n  const timestamp: number = useMemo(() => {\n    return 1645621200000\n  }, [])\n\n  const time = useMemo(() => {\n    return new Date(timestamp);\n  }, [timestamp])\n  const {\n    days, hours, minutes,\n    restart,\n  } = useTimer({\n    expiryTimestamp: time, autoStart: true, onExpire: () => {\n      console.log('finish')\n    } \n  });\n\n  useEffect(() => {\n    restart(time, true)\n  }, [time])\n  return (\n    <TimerStyled>\n      <TimerBlock>\n        <DateBlock>\n          {/* <DateValue>{addZeroForward(days.toString())}</DateValue> */}\n          <DateValue>{addZeroForward(days.toString())}</DateValue>\n          <DateName>days</DateName>\n        </DateBlock>\n        <Separator>:</Separator>\n         <DateBlock>\n          <DateValue>{addZeroForward(hours.toString())}</DateValue>\n          <DateName>hours</DateName>\n         </DateBlock>\n        <Separator>:</Separator>\n         <DateBlock>\n          <DateValue>{addZeroForward(minutes.toString())}</DateValue>\n          <DateName>minutes</DateName>\n         </DateBlock>\n      </TimerBlock>\n      {/* <TimerText><span>Finish:</span> 3d 9h 44m (blocks)</TimerText> */}\n    </TimerStyled>\n  )\n}\n\nexport default Timer","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/PreSale.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/PreSale.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Timeline.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Form.tsx",["766"],"import React, { useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { fromWei } from 'web3-utils'\nimport { Button, Card, CardBody, Flex, Heading, Input, Text } from '@hulkfinance/hulk-uikit'\nimport hulk from '../../../assets/images/HulkLogo.svg'\nimport UnlockButton from '../../../components/UnlockButton'\nimport { shortBalance } from '../../../utils'\nimport usePresale, { ECoins } from '../../../hooks/usePresale'\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\n\n\nconst FormStyledCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  z-index: 1;\n  overflow: visible;\n\n  & > div {\n    border-radius: 32px;\n    background-color: ${({ theme }) => theme.colors.card};\n    position: relative;\n    height: 100%;\n  }\n\n  &:before {\n    content: '';\n    z-index: -1;\n    display: block;\n    position: absolute;\n    top: -7px;\n    right: -7px;\n    bottom: -7px;\n    left: -7px;\n    background: linear-gradient(90deg, #FFFFFF 0%, #FAFF00 51.87%, #3CBD0E 100%);\n    filter: blur(10px);\n    border-radius: 32px;\n  }\n`\n\nconst CardHeading = styled(Heading)`\n  font-size: 28px;\n  font-weight: 900;\n  @media (min-width: 768px) {\n    font-size: 40px;\n  }\n`\n\nconst FormText = styled(Text)`\n  font-size: 20px;\n  margin-top: 8px;\n  word-break: break-all;\n\n  span {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n\n  p {\n    margin: 0;\n    color: ${({ theme }) => theme.colors.tertiary};\n  }\n`\n\nconst Logo = styled.img`\n  width: 80px;\n  height: 80px;\n  position: absolute;\n  top: 24px;\n  right: 40px;\n  z-index: 1;\n  display: none;\n  @media (min-width: 768px) {\n    display: block;\n  }\n`\n\nconst Progress = styled.div<{ width: number }>`\n  //background: linear-gradient(90deg, rgba(255, 255, 255, 0.5) 0%, rgba(250, 255, 0, 0.5) 51.87%, rgba(60, 189, 14, 0.5) 100%);\n  background: ${({ width }) => `linear-gradient(90deg, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 1) ${width}%, rgba(255, 255, 255, .5) ${width}%, rgba(250, 255, 0, 0.5) ${(100 - width) / 2}%, rgba(60, 189, 14, 0.5) 100%)`};\n  border-radius: 50px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n  position: relative;\n  margin-bottom: 44px;\n  margin-top: 43px;\n\n  div {\n    color: ${({ theme, width }) => (width < 50 ? '#fff' : theme.colors.primary)};\n    text-align: center;\n    position: relative;\n    font-size: 20px;\n    line-height: 24px;\n    text-transform: capitalize;\n  }\n`\nconst ReferralButton = styled(Button)`\n  color: ${({ theme }) => theme.colors.primary};\n  background-color: transparent;\n  transition: all .25s ease-out;\n  font-size: 20px;\n  padding-left: 0;\n\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\n    background-color: transparent;\n    text-decoration: underline;\n  }\n\n  img {\n    margin-left: 8px;\n  }\n`\n\nconst FormBlock = styled.div`\n  display: flex;\n  align-content: center;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-top: 32px;\n  flex-direction: column-reverse;\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`\n\nconst AmountInput = styled(Input)`\n  max-width: 100%;\n  padding: 12px 16px;\n  height: 48px;\n\n  @media (min-width: 768px) {\n    max-width: 160px;\n  }\n`\nconst Amount = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: flex-start;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 100%;\n  @media (min-width: 768px) {\n    align-content: flex-start;\n    align-items: flex-start;\n    justify-content: flex-start;\n    width: unset;\n  }\n`\nconst BalanceBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: flex-start;\n  align-items: flex-end;\n  justify-content: flex-end;\n  margin-top: 16px;\n  width: 100%;\n  @media (min-width: 768px) {\n    margin-top: 0;\n    width: unset;\n  }\n`\n\nconst BalanceButton = styled.div`\n  width: 100%;\n  display: flex;\n  align-content: flex-start;\n  align-items: flex-start;\n  justify-content: flex-end;\n  margin-top: 12px;\n  @media (min-width: 768px) {\n    margin-top: 0;\n    width: unset;\n  }\n`\nconst MaxButton = styled(Button)`\n  margin-left: 20px;\n`\n\nconst Select = styled.select`\n  width: 100px;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 10px;\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  height: 48px;\n  outline: 0;\n  padding: 4px 16px;\n  border: 2px solid ${({ theme }) => theme.colors.primary};\n  font-size: 20px;\n  line-height: 1.2;\n\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.tertiary};\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n    box-shadow: none;\n    color: ${({ theme }) => theme.colors.textDisabled};\n    cursor: not-allowed;\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: ${({ theme }) => theme.shadows.focus};\n  }\n\n  @media (min-width: 768px) {\n    width: 140px;\n  }\n`\n\nconst ButtonBlock = styled(Flex)`\n  margin-top: 56px;\n\n  button {\n    max-width: 220px;\n    width: 100%;\n  }\n`\n\nfunction Form() {\n  const { account } = useActiveWeb3React()\n\n  const {\n    onBuyTokens,\n    coin,\n    onSelectCoin,\n    round,\n    pending,\n    balance,\n    onChangeAmountIn,\n    amountIn,\n    onMax,\n    onApprove,\n    allowance,\n    pendingApprove,\n    percent,\n    amountOut,\n    onChangeAmountOut\n  } = usePresale()\n\n\n  const renderCoinSymbol = useCallback(() => {\n    switch (coin) {\n      case ECoins.Zero:\n        return 'BNB'\n      case ECoins.BUSD:\n        return 'BUSD'\n      case ECoins.USDT:\n        return 'USDT'\n      default:\n        return 'BNB'\n    }\n  }, [coin])\n  const isDisabled = useMemo(() => {\n    return (coin !== ECoins.Zero && allowance[coin === ECoins.BUSD ? 'busd' : 'usdt'].isZero()) || pending || amountIn === \"\"\n  }, [allowance, amountIn, coin, pending])\n  return (\n    <FormStyledCard>\n      <Logo src={hulk} alt='Hulk' />\n      <CardBody p={40}>\n        <CardHeading mb='24px'>IDO ROUND {round + 1}</CardHeading>\n        <Progress width={percent}>\n          <div>{percent}%</div>\n        </Progress>\n        <FormText><span>HULK token</span> will be distributed block by block from Feb 4th, 2022 ( 30% each\n          month)</FormText>\n        {/* <ReferralButton variant='text'>Referral link <img src={copy} alt='Copy' /></ReferralButton> */}\n        <FormBlock>\n          <Amount>\n            <FormText>Amount In</FormText>\n            <AmountInput type='text' scale='md' value={amountIn} onChange={event => onChangeAmountIn(event.target.value)} placeholder='0.000000' />\n            <FormText>HULKPre</FormText>\n            <AmountInput type='text' scale='md' value={amountOut} onChange={event => onChangeAmountOut(event.target.value)} placeholder='0.000000' />\n            {/* {!tokensAmount.isZero() && <FormText mt=\"8px\"><span>HULK token:</span><br/> {fromWei(tokensAmount.toString())}</FormText>} */}\n          </Amount>\n          <BalanceBlock>\n            <FormText>\n               Balance: {shortBalance(fromWei(balance.toString()))} {renderCoinSymbol()}\n            </FormText>\n            <BalanceButton>\n              <Select value={coin} onChange={event => onSelectCoin(event.target.value)}>\n                <option value={ECoins.Zero}>BNB</option>\n                <option value={ECoins.BUSD}>BUSD</option>\n                <option value={ECoins.USDT}>USDT</option>\n              </Select>\n              <MaxButton onClick={onMax} size='md' variant='primary'>Max</MaxButton>\n            </BalanceButton>\n          </BalanceBlock>\n        </FormBlock>\n        <ButtonBlock justifyContent='space-between'>\n\n          {account ? (\n            <>\n              {\n                coin !== ECoins.Zero && <Button variant='primary' onClick={onApprove}\n                                                disabled={!allowance[coin === ECoins.BUSD ? 'busd' : 'usdt'].isZero() || pendingApprove}>{pendingApprove ? 'Wait' : 'Approve'}</Button>\n              }\n              <Button onClick={onBuyTokens} fullWidth={coin === ECoins.Zero}\n                      disabled={isDisabled}\n                      variant='primary'>{pending ? \"Wait\" : \"Buy HULK\"}</Button>\n            </>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </ButtonBlock>\n      </CardBody>\n    </FormStyledCard>\n  )\n}\n\nexport default Form","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/index.ts",["767"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/usePresale.ts",["768","769","770","771","772","773","774","775","776","777"],"import { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport { fromWei, toWei } from 'web3-utils'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Contract } from 'ethers'\nimport useActiveWeb3React from './useActiveWeb3React'\nimport { useERC20, useHulkPreContract } from './useContract'\nimport { escapeRegExp, getBscScanLink, inputRegex, shortBalance } from '../utils'\nimport { ToastContext } from '../contexts/ToastContext'\nimport useBlockNumber from './useBlockNumber'\nimport { getHULKPreAddress, getHULKSwapAddress } from '../utils/addressHelpers'\nimport { defaultChainId } from '../config'\n\nexport enum ERound {\n  RoundZero = 0,\n  RoundOne = 1,\n  RoundTwo = 2,\n}\n\nexport const ERoundAvailable = {\n  0: '210000000000000000000000000',\n  1: '210000000000000000000000000',\n  2: '210000000000000000000000000',\n}\n\nexport enum ECoins {\n  Zero = '0x0000000000000000000000000000000000000000',\n  BUSD = '0xdB1Cc97ada0D2A0bCE7325699A9F1081C95F0ac9',\n  USDT = '0xbDf2f04a77Ca7474F127208cab24260197D14a04',\n}\n\nexport function useGetCurrentRound() {\n  const hulkPreContract: any = useHulkPreContract()\n  const [round, setRound] = useState<ERound>(ERound.RoundZero)\n  const block = useBlockNumber()\n\n  const getData = useCallback(() => {\n    if (hulkPreContract) {\n      hulkPreContract\n        .getCurrentRound()\n        .then((res:any) => {\n          setRound(parseInt(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n  return round\n}\n\nexport default function usePresale() {\n  const BN_0 = BigNumber.from('0')\n  const { addToast } = useContext(ToastContext)\n  const { account, library } = useActiveWeb3React()\n  const busdToken = useERC20(ECoins.BUSD)\n  const usdtToken = useERC20(ECoins.USDT)\n  const hulkPreContract: any = useHulkPreContract()\n  const round = useGetCurrentRound()\n  const [availableTokens, setAvailableTokens] = useState<BigNumber>(BN_0)\n  const [coin, setCoin] = useState<ECoins | string>(ECoins.Zero)\n  const [balance, setBalance] = useState<BigNumber>(BN_0)\n  const [allowance, setAllowance] = useState<{ busd: BigNumber, usdt: BigNumber }>({ busd: BN_0, usdt: BN_0 })\n  const block = useBlockNumber()\n  const [pending, setPending] = useState<boolean>(false)\n  const [pendingApprove, setPendingApprove] = useState<boolean>(false)\n  const [rate, setRate] = useState<BigNumber>(BN_0)\n  const [amountIn, setAmountIn] = useState<string>('')\n  const [amountOut, setAmountOut] = useState<string>('')\n  const [coinToTokens, setCoinToTokens] = useState<BigNumber>(BN_0)\n  const [tokenToCoins, setTokenToCoins] = useState<BigNumber>(BN_0)\n  const [percent, setPercent] = useState<number>(0)\n  const [price, setPrice] = useState<BigNumber>(BN_0)\n\n  useEffect(() => {\n    if (account && library && coin === ECoins.Zero) {\n      library.getBalance(account)\n        .then((res:any) => {\n          setBalance(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [coin, account, library])\n\n  const getData = useCallback(() => {\n    if (hulkPreContract) {\n      hulkPreContract\n        .getPrice()\n        .then((res:any) => {\n          setPrice(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n      hulkPreContract\n        .getAvailable()\n        .then((res:any) => {\n          setAvailableTokens(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n\n  const getDataCoins = useCallback(() => {\n    if (coin !== ECoins.Zero && account) {\n      const tokenContract = coin === ECoins.BUSD ? busdToken : usdtToken\n      if (tokenContract) {\n        tokenContract\n          .balanceOf(account) \n          .then((res:any) => {\n            setBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => {\n            console.log(e)\n          })\n        tokenContract\n          .allowance(account, getHULKPreAddress())\n          .then((res:any) => {\n            setAllowance(prevState => {\n              return {\n                ...prevState,\n                [coin === ECoins.BUSD ? 'busd' : 'usdt']: BigNumber.from(res),\n              }\n            })\n          })\n          .catch((e: any) => {\n            console.log(e)\n          })\n      }\n    }\n  }, [coin, busdToken, usdtToken, account])\n\n  useEffect(() => {\n    getDataCoins()\n  }, [block, getDataCoins])\n  // 1_000_069_780_000\n  useEffect(() => {\n    if (hulkPreContract) {\n      hulkPreContract\n        .getRate(coin)\n        .then((res: string) => {\n          setRate(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [amountIn, coin, hulkPreContract])\n\n\n  const onChangeAmountIn = useCallback(async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(balance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmountIn(shortBalance(nextUserInput, 8))\n      if (hulkPreContract && nextUserInput !== '') {\n        try {\n          const tokens: string = await hulkPreContract.coinToTokens(toWei(nextUserInput), coin)\n          setCoinToTokens(BigNumber.from(tokens))\n          setAmountOut(fromWei(tokens))\n        } catch {\n          setCoinToTokens(BN_0)\n          setAmountOut('')\n        }\n      } else {\n        setCoinToTokens(BN_0)\n        setAmountOut('')\n      }\n    } else {\n      setCoinToTokens(BN_0)\n      setAmountOut('')\n    }\n  }, [balance, hulkPreContract, coin, BN_0])\n\n  const onChangeAmountOut = useCallback(async (value: string) => {\n    const nextUserInput = value.replace(/,/g, '.')\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      setAmountOut(shortBalance(nextUserInput, 8))\n      if (hulkPreContract && nextUserInput !== '') {\n        try {\n          const coins: string = await hulkPreContract.tokensToCoin(toWei(nextUserInput), coin)\n          setTokenToCoins(BigNumber.from(coins))\n          setAmountIn(fromWei(coins))\n        } catch {\n          setTokenToCoins(BN_0)\n          setAmountIn('')\n        }\n      } else {\n        setTokenToCoins(BN_0)\n        setAmountIn('')\n      }\n    } else {\n      setTokenToCoins(BN_0)\n      setAmountIn('')\n    }\n  }, [BN_0, coin, hulkPreContract])\n\n\n  const onBuyTokens = useCallback(async () => {\n    if (hulkPreContract) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `Buy token: Success`,\n        description: `Confirm! You bought ${fromWei(amountOut.toString())} HULKPre!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPending(true)\n      const valueBnb = toWei(amountIn.toString())\n      const value = coinToTokens.toString()\n      const params: { from: any, value?: string } = { from: account }\n      if (coin === ECoins.Zero) params.value = valueBnb\n      const trx = await hulkPreContract\n        .buyTokens(value, coin, { ...params })\n        .catch((e: any) => {\n          toast.title = 'Buy token: Failed'\n          toast.type = toastTypes.DANGER\n          toast.description = e.receipt !== undefined ? 'Something went wrong!' : e.message\n        })\n        .finally(() => {\n          setPending(false)\n          getData()\n        })\n      if (trx?.hash) {\n        toast.action = {\n          text: 'View transaction',\n          url: `https://testnet.bscscan.com/tx/${trx.hash}`,\n        }\n      }\n      addToast(toast)\n    }\n  }, [hulkPreContract, amountOut, amountIn, coinToTokens, account, coin, addToast, getData])\n\n  useEffect(() => {\n    if (!availableTokens.isZero()) {\n      const availableDefault = parseFloat(fromWei(ERoundAvailable[round]))\n      const availableCurrent = parseFloat(fromWei(availableTokens.toString()))\n      const perc: number = 100 - ((availableCurrent / availableDefault) * 100)\n      setPercent(parseFloat(perc.toFixed(3)))\n    } else {\n      setPercent(100)\n    }\n  }, [round, availableTokens])\n\n  const onMax = useCallback(() => {\n    const maxBalance = shortBalance(fromWei(balance.toString()))\n    setAmountIn(maxBalance)\n  }, [setAmountIn, balance])\n\n  const onSelectCoin = useCallback((selectCoin: ECoins | string) => {\n    setCoin(selectCoin)\n  }, [])\n\n  const approve = useCallback(async (tokenContract: Contract | null) => {\n    if (account) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `Approve token: Success`,\n        description: `Confirm Approve!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPendingApprove(true)\n      if (tokenContract && account) {\n        tokenContract.approve(getHULKPreAddress(), MaxUint256, { from: account })\n          .then((res: TransactionResponse) => {\n            if (res?.hash) {\n              toast.action = {\n                text: 'View transaction',\n                url: getBscScanLink(res.hash, 'transaction', defaultChainId),\n              }\n            }\n            addToast(toast)\n          })\n          .catch((error: any) => {\n            toast.title = 'Aprove token: Failed'\n            toast.type = toastTypes.DANGER\n            toast.description = error.data?.message || error.message || 'Something went wrong!'\n            addToast(toast)\n          })\n          .finally(() => setPendingApprove(false))\n      }\n      setPendingApprove(false)\n    }\n  }, [account, addToast])\n\n  const onApprove = useCallback( async () => {\n    if (coin !== ECoins.Zero && account) {\n      const isBusd = coin === ECoins.BUSD\n      if (isBusd) {\n        await approve(busdToken)\n      } else {\n        await approve(usdtToken)\n      }\n      getDataCoins()\n    }\n  }, [coin, account, getDataCoins, approve, busdToken, usdtToken])\n\n  return useMemo(() => {\n    return {\n      round,\n      availableTokens,\n      onBuyTokens,\n      pending,\n      onChangeAmountIn,\n      balance,\n      amountIn,\n      onMax,\n      coin,\n      onSelectCoin,\n      allowance,\n      onApprove,\n      pendingApprove,\n      percent,\n      tokenToCoins,\n      amountOut,\n      onChangeAmountOut,\n    }\n  }, [\n    round,\n    availableTokens,\n    onBuyTokens,\n    pending,\n    onChangeAmountIn,\n    balance,\n    amountIn,\n    onMax,\n    coin,\n    onSelectCoin,\n    allowance,\n    onApprove,\n    pendingApprove,\n    percent,\n    tokenToCoins,\n    amountOut,\n    onChangeAmountOut,\n  ])\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ToastContext.tsx",["778","779"],"import { Toast } from \"@hulkfinance/hulk-uikit\";\nimport React, {createContext, useReducer} from \"react\";\n\nconst initialState: Toast[] = []\n\nexport const toastReducer = (state: Toast[], action: any) => {\n    switch (action.type) {\n        case 'add' :\n            return [action.payload.toast, ...state];\n        case 'remove' :\n            return state.filter((prevToast) => prevToast.id !== action.payload.id);\n        default:\n            return state;\n    }\n};\n\nexport const ToastContext = createContext<{\n    toasts: Toast[],\n    addToast: (toast: Toast) => void,\n    removeToast: (id: string) => void,\n}>({\n    toasts: [],\n    addToast: (toast) => {console.log(toast)},\n    removeToast: (id) => {console.log(id)},\n});\n\nexport default function ToastProvider({children}: any) {\n    const [toasts, dispatch] = useReducer(toastReducer, initialState);\n    const removeToast = (id: string) => {\n        dispatch({type: \"remove\", payload: {id}})\n    };\n    const addToast = (toast: Toast) => {\n        dispatch({type: \"add\", payload: {toast}});\n    };\n\n    return (\n        <ToastContext.Provider\n            value={{\n                toasts,\n                removeToast,\n                addToast\n            }}\n        >\n            {children}\n        </ToastContext.Provider>\n    )\n\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/Referral.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useReferral.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Swap.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useHulkSwap.ts",["780","781","782","783","784"],"import { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport { fromWei, toWei } from 'web3-utils'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport useActiveWeb3React from './useActiveWeb3React'\nimport { useHulkContract, useHulkPreContract, useHulkSwapContract } from './useContract'\nimport { getHULKSwapAddress } from '../utils/addressHelpers'\nimport { ToastContext } from '../contexts/ToastContext'\nimport { escapeRegExp, getBscScanLink, inputRegex, shortBalance } from '../utils'\nimport useBlockNumber from './useBlockNumber'\nimport { defaultChainId } from '../config'\n\nconst BN_0 = BigNumber.from('0')\n\nexport default function useHulkSwap() {\n  const {account} = useActiveWeb3React()\n  const { addToast } = useContext(ToastContext)\n  const hulkSwapContract = useHulkSwapContract()\n  const hulkPreContract = useHulkPreContract()\n  const hulkContract = useHulkContract()\n  const [pending, setPending] = useState<boolean>(false)\n  const [pendingApprove, setPendingApprove] = useState<boolean>(false)\n  const [amount, setAmount] = useState<string>('')\n  const [amountOut, setAmountOut] = useState<string>('')\n\n  const [hulkBalance, setHulkBalance] = useState<BigNumber>(BN_0)\n  const [hulkPreBalance, setHulkPreBalance] = useState<BigNumber>(BN_0)\n  const [allowance, setAllowance] = useState<BigNumber>(BN_0)\n  const block = useBlockNumber()\n\n  const getData = useCallback(() => {\n    if (account) {\n      if (hulkPreContract) {\n        hulkPreContract.balanceOf(account).call()\n          .then((res: string) => {\n            setHulkPreBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n        hulkPreContract.allowance(account, getHULKSwapAddress()).call()\n          .then((res: string) => {\n            setAllowance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n      }\n      if (hulkContract) {\n        hulkContract.balanceOf(account).call()\n          .then((res: string) => {\n            setHulkBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n      }\n    }\n  }, [account, hulkContract, hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n\n  const onChangeAmountIn = useCallback( async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(hulkPreBalance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmount(nextUserInput)\n      setAmountOut(nextUserInput)\n    }\n  }, [hulkPreBalance])\n\n  const onChangeAmountOut = useCallback( async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(hulkPreBalance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmountOut(nextUserInput)\n      setAmount(nextUserInput)\n    }\n  }, [hulkPreBalance])\n\n  const onSwap = useCallback(async () => {\n    if (hulkSwapContract) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `SWap token: Success`,\n        description: `Confirm! You Swap ${amount} HULKPre to ${amountOut} HULK!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPending(true)\n      const trx = await hulkSwapContract\n        .swap(toWei(amount))\n        .send({ from: account })\n        .on('transactionHash', (tx: any) => {\n          return tx.transactionHash\n        })\n        .catch((e: any) => {\n          toast.title = 'Swap token: Failed'\n          toast.type = toastTypes.DANGER\n          toast.description = e.receipt !== undefined ? 'Something went wrong!' : e.message\n        })\n        .finally(() => {\n          setPending(false)\n          getData()\n        })\n      if (trx?.transactionHash) {\n        toast.action = {\n          text: 'View transaction',\n          url: `https://testnet.bscscan.com/tx/${trx.transactionHash}`,\n        }\n      }\n      addToast(toast)\n    }\n  }, [hulkSwapContract, amount, amountOut, account, addToast, getData])\n\n  const onApprove = useCallback( async () => {\n    if (account) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `Approve token: Success`,\n        description: `Confirm! You approve HULKPre!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPendingApprove(true)\n      if (hulkPreContract && account) {\n        return hulkPreContract.approve(getHULKSwapAddress(), MaxUint256, {from: account})\n          .then((res: TransactionResponse) => {\n            console.log(res.hash)\n\n            if (res?.hash) {\n              toast.action = {\n                text: 'View transaction',\n                url: getBscScanLink(res.hash, 'transaction', defaultChainId),\n              }\n            }\n            addToast(toast)\n          })\n          .catch((error: any) => {\n            toast.title = 'Aprove token: Failed'\n            toast.type = toastTypes.DANGER\n            toast.description = error.data?.message || error.message || 'Something went wrong!'\n            addToast(toast)\n          })\n          .finally(() => setPendingApprove(false))\n      }\n      setPendingApprove(false)\n      getData()\n    }\n  }, [account, addToast, getData, hulkPreContract])\n\n  return useMemo(() => {\n    return {\n      allowance,\n      hulkBalance,\n      hulkPreBalance,\n      onApprove,\n      pending,\n      pendingApprove,\n      onSwap,\n      onChangeAmountIn,\n      onChangeAmountOut,\n      amount,\n      amountOut\n    }\n  }, [\n    allowance,\n    hulkBalance,\n    hulkPreBalance,\n    onApprove,\n    pending,\n    pendingApprove,\n    onSwap,\n    onChangeAmountIn,\n    onChangeAmountOut,\n    amount,\n    amountOut\n  ])\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/reducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/global/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/reducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/reducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/reducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/getFarmsPrices.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchMasterChefData.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchPublicFarmData.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/types.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/bigNumber.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contractHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/farmsPriceHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/farmHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/localStorageOrders.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contracts.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/web3React.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useActiveWeb3React.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/priceHelperLps.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/tokens.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/lists.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/helpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useAuth.ts",["785","786","787","788"],"import {UnsupportedChainIdError, useWeb3React} from \"@web3-react/core\";\nimport { useCallback, useContext } from 'react'\nimport {\n    NoEthereumProviderError,\n    UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from \"@web3-react/injected-connector\";\nimport {\n    UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n    WalletConnectConnector,\n} from \"@web3-react/walletconnect-connector\";\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport {defaultChainId, storageConnectorKey} from \"../config\";\nimport {ConnectorNames, connectorsByName} from \"../utils/web3React\";\nimport {setupNetwork} from \"../utils/wallet\";\nimport { ToastContext } from '../contexts/ToastContext'\n\nfunction useAuth() {\n    const {activate, deactivate, chainId} = useWeb3React()\n    const { addToast } = useContext(ToastContext)\n    const defaultConnectorKey = window.localStorage.getItem(storageConnectorKey) || ConnectorNames.Injected\n\n    const login = useCallback( async (connectorKey: ConnectorNames | string = defaultConnectorKey) => {\n        const connector: any = connectorsByName[connectorKey]\n        let success = true\n        const toast: Toast = {\n            id: `id-${Date.now()}`,\n            title: `Auth`,\n            description: ``,\n            type: toastTypes.DANGER,\n        }\n        if (connector) {\n            activate(connector, async (error) => {\n                console.log(error.message || error )\n                success = false\n                localStorage.removeItem(storageConnectorKey)\n                if (error instanceof UnsupportedChainIdError) {\n                    if (connectorKey === ConnectorNames.WalletConnect) {\n                        window.localStorage.removeItem('walletconnect')\n                        console.error('Unsupported ChainId. Change network, please!')\n                        toast.description = 'Unsupported ChainId. Change network, please!'\n                        addToast(toast)\n                        return\n                    }\n                    const hasSetup = await setupNetwork(defaultChainId)\n                    if (hasSetup) {\n                        await activate(connector)\n                        localStorage.setItem(storageConnectorKey, connectorKey)\n                        console.error('Change Network: Success')\n                        success = true\n                        toast.description = 'Change Network: Success'\n                        toast.type = toastTypes.SUCCESS\n                        addToast(toast)\n                    } else {\n                        deactivate();\n                        console.log(error.message)\n                        window.localStorage.removeItem(storageConnectorKey)\n                        // showAlert({text: error.message, cls: classAlert.error})\n                    }\n                } else {\n                    deactivate();\n                    window.localStorage.removeItem(storageConnectorKey)\n                    window.localStorage.removeItem('walletconnect')\n                    if (error instanceof NoEthereumProviderError) {\n                        console.info(error.message || 'Provider Error')\n                    } else if (\n                        error instanceof UserRejectedRequestErrorInjected ||\n                        error instanceof UserRejectedRequestErrorWalletConnect\n                    ) {\n                        if (connector instanceof WalletConnectConnector) {\n                            const walletConnector = connector as WalletConnectConnector\n                            walletConnector.walletConnectProvider = undefined\n                        }\n                        console.error(error.message || 'Authorization Error')\n                        // showAlert({text: error.message || 'Authorization Error', cls: classAlert.error})\n                        toast.description = error.message || 'Authorization Error'\n                        addToast(toast)\n                    } else {\n                        console.error(error.message)\n                        window.localStorage.removeItem(storageConnectorKey)\n                        // showAlert({text: error.message, cls: classAlert.error})\n                    }\n                }\n                \n            }).then(() => {\n                if (success) {\n                    localStorage.setItem(storageConnectorKey, connectorKey)\n                }\n            })\n                .catch((e) => {\n                    window.localStorage.removeItem(storageConnectorKey)\n                })\n        } else {\n            console.info('Connector is Failed')\n        }\n    }, [activate, addToast, deactivate, defaultConnectorKey])\n\n    const logout = useCallback(() => {\n        window.localStorage.removeItem(storageConnectorKey)\n        deactivate();\n        window.localStorage.removeItem(storageConnectorKey)\n        window.localStorage.removeItem('walletconnect')\n    }, [deactivate])\n\n    return {\n        login,\n        logout\n    }\n}\n\nexport default useAuth;","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/hooks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useRefreshEffect.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/selectors.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/wallet.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/networks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useBlockNumber.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/languageContext.tsx",["789","790"],"import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { EN, languages } from '../../config/localisation/languages'\r\nimport { TranslationsContext } from './translationsContext'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = 0\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: '',\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage: any) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }: any) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return Object.values(languages).filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/translationsContext.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/translateTextHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/localisation/languages.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/helpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useUserAgent.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/updater.ts",["791","792","793"],"import { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useAllLists , useActiveListUrls } from './hooks'\nimport { UNSUPPORTED_LIST_URLS } from '../../config/constants/lists'\nimport useWeb3Provider from '../../hooks/useActiveWeb3React'\nimport useFetchListCallback from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { AppDispatch } from '../index'\nimport { acceptListUpdate } from './actions'\n\n\nexport default function Updater(): null {\n  const { library } = useWeb3Provider()\n  const dispatch = useDispatch<AppDispatch>()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n  const activeListUrls = useActiveListUrls()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach((url) =>\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error)),\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        // eslint-disable-next-line default-case\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          // update any active or inactive lists\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists, activeListUrls])\n\n  return null\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/block/hooks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/updater.tsx",["794","795","796","797","798"],"import { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useCurrentBlock } from '../block/hooks'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport useDebounce from '../../hooks/useDebounce'\nimport { CancelledError, retry, RetryableError } from './retry'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  Call,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  parseCallKey,\n  updateMulticallResults,\n} from './actions'\nimport chunkArray from './chunkArray'\n\n// chunk calls so we do not exceed the gas limit\nconst CALL_CHUNK_SIZE = 500\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\nasync function fetchChunk(\n  multicallContract: Contract,\n  chunk: Call[],\n  minBlockNumber: number,\n): Promise<{ results: string[]; blockNumber: number }> {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber)\n  let resultsBlockNumber\n  let returnData\n  try {\n    // prettier-ignore\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\n      chunk.map((obj) => [obj.address, obj.callData]),\n      {\n        blockTag: minBlockNumber,\n      }\n    )\n  } catch (err) {\n    const error = err as any\n    if (\n      error.code === -32000 ||\n      (error?.data?.message && error?.data?.message?.indexOf('header not found') !== -1) ||\n      error.message?.indexOf('header not found') !== -1\n    ) {\n      throw new RetryableError(`header not found for block number ${minBlockNumber}`)\n    } else if (error.code === -32603 || error.message?.indexOf('execution ran out of gas') !== -1) {\n      if (chunk.length > 1) {\n        if (process.env.NODE_ENV === 'development') {\n          console.debug('Splitting a chunk in 2', chunk)\n        }\n        const half = Math.floor(chunk.length / 2)\n        const [c0, c1] = await Promise.all([\n          fetchChunk(multicallContract, chunk.slice(0, half), minBlockNumber),\n          fetchChunk(multicallContract, chunk.slice(half, chunk.length), minBlockNumber),\n        ])\n        return {\n          results: c0.results.concat(c1.results),\n          blockNumber: c1.blockNumber,\n        }\n      }\n    }\n    console.debug('Failed to fetch chunk inside retry', error)\n    throw error\n  }\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`)\n  }\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: AppState['multicall']['callListeners'],\n  chainId?: number,\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param currentBlock the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: AppState['multicall']['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  currentBlock: number | undefined,\n): string[] {\n  if (!chainId || !currentBlock) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = currentBlock - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['multicall']>((s) => s.multicall)\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const currentBlock = useCurrentBlock()\n  const { chainId } = useActiveWeb3React()\n  const multicallContract = useMulticallContract()\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, currentBlock)\n  }, [chainId, state.callResults, listeningKeys, currentBlock])\n\n  const serializedOutdatedCallKeys = useMemo(\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\n    [unserializedOutdatedCallKeys],\n  )\n\n  useEffect(() => {\n    if (!currentBlock || !chainId || !multicallContract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\n\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\n\n    if (cancellations.current?.blockNumber !== currentBlock) {\n      cancellations.current?.cancellations?.forEach((c) => c())\n    }\n\n    dispatch(\n      fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: currentBlock,\n      }),\n    )\n\n    cancellations.current = {\n      blockNumber: currentBlock,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, currentBlock), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500,\n        })\n        promise\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\n            cancellations.current = { cancellations: [], blockNumber: currentBlock }\n\n            // accumulates the length of all previous indices\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\n\n            dispatch(\n              updateMulticallResults({\n                chainId,\n                results: outdatedCallKeys\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\n                    memo[callKey] = returnData[i] ?? null\n                    return memo\n                  }, {}),\n                blockNumber: fetchBlockNumber,\n              }),\n            )\n          })\n          .catch((error: any) => {\n            if (error instanceof CancelledError) {\n              console.debug('Cancelled fetch for blockNumber', currentBlock)\n              return\n            }\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n            dispatch(\n              errorFetchingMulticallResults({\n                calls: chunk,\n                chainId,\n                fetchingBlockNumber: currentBlock,\n              }),\n            )\n          })\n        return cancel\n      }),\n    }\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, currentBlock])\n\n  return null\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/updater.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/hooks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/chunkArray.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/retry.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useDebounce.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useFetchListCallback.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useInterval.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useIsWindowVisible.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getTokenList.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/ENS/resolveENSContentHash.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contenthashToUri.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/ENS/parseENSAddress.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/uriToHttp.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useIntersectionObserver.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/apr.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/latinise.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/FarmContext.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Tokens.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/useUserAddedTokens.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/hooks.ts",["799"],"import { Interface, FunctionFragment } from '@ethersproject/abi'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useSWRConfig } from 'swr'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  addMulticallListeners,\n  Call,\n  removeMulticallListeners,\n  parseCallKey,\n  toCallKey,\n  ListenerOptions,\n} from './actions'\n\nexport interface Result extends ReadonlyArray<any> {\n  readonly [key: string]: any\n}\n\ntype MethodArg = string | number | BigNumber\ntype MethodArgs = Array<MethodArg | MethodArg[]>\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\nfunction isMethodArg(x: unknown): x is MethodArg {\n  return ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n\ninterface CallResult {\n  readonly valid: boolean\n  readonly data: string | undefined\n  readonly blockNumber: number | undefined\n}\n\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\n\n// use this options object\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity,\n}\n\n// the lowest level call for subscribing to contract data\nfunction useCallsData(calls: (Call | undefined)[], options?: ListenerOptions): CallResult[] {\n  const { chainId } = useActiveWeb3React()\n  const callResults = useSelector<AppState, AppState['multicall']['callResults']>(\n    (state) => state.multicall.callResults,\n  )\n  const dispatch = useDispatch<AppDispatch>()\n\n  const serializedCallKeys: string = useMemo(\n    () =>\n      JSON.stringify(\n        calls\n          ?.filter((c): c is Call => Boolean(c))\n          ?.map(toCallKey)\n          ?.sort() ?? [],\n      ),\n    [calls],\n  )\n\n  // update listeners when there is an actual change that persists for at least 100ms\n  useEffect(() => {\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    if (!chainId || callKeys.length === 0) return undefined\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const calls = callKeys.map((key) => parseCallKey(key))\n    dispatch(\n      addMulticallListeners({\n        chainId,\n        calls,\n        options,\n      }),\n    )\n\n    return () => {\n      dispatch(\n        removeMulticallListeners({\n          chainId,\n          calls,\n          options,\n        }),\n      )\n    }\n  }, [chainId, dispatch, options, serializedCallKeys])\n\n  return useMemo(\n    () =>\n      calls.map<CallResult>((call) => {\n        if (!chainId || !call) return INVALID_RESULT\n\n        const result = callResults[chainId]?.[toCallKey(call)]\n        let data\n        if (result?.data && result?.data !== '0x') {\n          // eslint-disable-next-line prefer-destructuring\n          data = result.data\n        }\n\n        return { valid: true, data, blockNumber: result?.blockNumber }\n      }),\n    [callResults, calls, chainId],\n  )\n}\n\ninterface CallState {\n  readonly valid: boolean\n  // the result, or undefined if loading or errored/no data\n  readonly result: Result | undefined\n  // true if the result has never been fetched\n  readonly loading: boolean\n  // true if the result is not for the latest block\n  readonly syncing: boolean\n  // true if the call was made and is synced, but the return data is invalid\n  readonly error: boolean\n}\n\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\n\nfunction toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: Interface | undefined,\n  fragment: FunctionFragment | undefined,\n  latestBlockNumber: number | undefined,\n): CallState {\n  if (!callResult) return INVALID_CALL_STATE\n  const { valid, data, blockNumber } = callResult\n  if (!valid) return INVALID_CALL_STATE\n  if (valid && !blockNumber) return LOADING_CALL_STATE\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\n  const success = data && data.length > 2\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\n  let result: Result | undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.debug('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result,\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result,\n    error: !success,\n  }\n}\n\nexport function useSingleContractMultipleData(\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options?: ListenerOptions,\n): CallState[] {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const calls = useMemo(\n    () =>\n      contract && fragment && callInputs && callInputs.length > 0\n        ? callInputs.map<Call>((inputs) => {\n            return {\n              address: contract.address,\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\n            }\n          })\n        : [],\n    [callInputs, contract, fragment],\n  )\n\n  const results = useCallsData(calls, options)\n\n  const { cache } = useSWRConfig()\n\n  return useMemo(() => {\n    const currentBlockNumber = cache.get('blockNumber')\n    // @ts-ignore\n    return results.map((result) => toCallState(result, contract?.interface, fragment, currentBlockNumber))\n  }, [fragment, contract, results, cache])\n}\n\nexport function useMultipleContractSingleData(\n  addresses: (string | undefined)[],\n  contractInterface: any,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: ListenerOptions,\n): CallState[] {\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\n  const callData: string | undefined = useMemo(\n    () =>\n      fragment && isValidMethodArgs(callInputs)\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\n        : undefined,\n    [callInputs, contractInterface, fragment],\n  )\n\n  const calls = useMemo(\n    () =>\n      fragment && addresses && addresses.length > 0 && callData\n        ? addresses.map<Call | undefined>((address) => {\n            return address && callData\n              ? {\n                  address,\n                  callData,\n                }\n              : undefined\n          })\n        : [],\n    [addresses, callData, fragment],\n  )\n\n  const results = useCallsData(calls, options)\n\n  const { cache } = useSWRConfig()\n\n  return useMemo(() => {\n    const currentBlockNumber = cache.get('blockNumber')\n    return results.map((result) => toCallState(result, contractInterface, fragment, currentBlockNumber))\n  }, [fragment, results, contractInterface, cache])\n}\n\nexport function useSingleCallResult(\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options?: ListenerOptions,\n): CallState {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const calls = useMemo<Call[]>(() => {\n    return contract && fragment && isValidMethodArgs(inputs)\n      ? [\n          {\n            address: contract.address,\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\n          },\n        ]\n      : []\n  }, [contract, fragment, inputs])\n\n  const result = useCallsData(calls, options)[0]\n  const { cache } = useSWRConfig()\n\n  return useMemo(() => {\n    const currentBlockNumber = cache.get('blockNumber')\n    // @ts-ignore\n    return toCallState(result, contract?.interface, fragment, currentBlockNumber)\n  }, [cache, result, contract?.interface, fragment])\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/pools.tsx",["800","801"],"import { VaultKey } from '../../state/types'\nimport tokens, { serializeTokens } from './tokens'\nimport { SerializedPoolConfig, PoolCategory } from './types'\nimport {defaultChainId} from \"../index\";\n\nconst serializedTokens = serializeTokens()\n\nexport const UNLOCK_FREE_DURATION = 604800\n\nexport const vaultPoolConfig = {\n  // [VaultKey.CakeVaultV1]: {\n  //   name: <p>Auto CAKE</p>,\n  //   description: <p>Automatic restaking</p>,\n  //   autoCompoundFrequency: 5000,\n  //   gasLimit: 380000,\n  //   tokenImage: {\n  //     primarySrc: `/images/tokens/${tokens.hulktoken.address}.svg`,\n  //     secondarySrc: '/images/tokens/autorenew.svg',\n  //   },\n  // },\n  // [VaultKey.CakeVault]: {\n  //   name: <p>Stake CAKE</p>,\n  //   description: <p>Stake, Earn – And more!</p>,\n  //   autoCompoundFrequency: 5000,\n  //   gasLimit: 500000,\n  //   tokenImage: {\n  //     primarySrc: `/images/tokens/${tokens.hulktoken.address}.svg`,\n  //     secondarySrc: '/images/tokens/autorenew.svg',\n  //   },\n  // },\n  // [VaultKey.IfoPool]: {\n  //   name: 'IFO CAKE',\n  //   description: <p>Stake CAKE to participate in IFOs</p>,\n  //   autoCompoundFrequency: 1,\n  //   gasLimit: 500000,\n  //   tokenImage: {\n  //     primarySrc: `/images/tokens/${tokens.hulktoken.address}.svg`,\n  //     secondarySrc: `/images/tokens/ifo-pool-icon.svg`,\n  //   },\n  // },\n} as const\n\nconst pools: SerializedPoolConfig[] = [\n  {\n    sousId: 0,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '10',\n    sortOrder: 1,\n    isFinished: false,\n  },\n  {\n    sousId: 276,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ceek,\n    contractAddress: {\n      97: '',\n      56: '0xED53944b1c0cEecDe1a413fDb4D0496e1a08ab58',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.8078',\n    version: 3,\n  },\n  {\n    sousId: 275,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.tinc,\n    contractAddress: {\n      97: '',\n      56: '0x9593462fF51A14633b243Ba3d054A8183d057A02',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4677',\n    version: 3,\n  },\n  {\n    sousId: 274,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pex,\n    contractAddress: {\n      97: '',\n      56: '0x641B1F2781B34a493E4308A0A3F1c7E042A9B952',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3865',\n    version: 3,\n  },\n  {\n    sousId: 273,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.gmi,\n    contractAddress: {\n      97: '',\n      56: '0x0D53E0f2Eb384777442e4EB813d8f5fAcC742206',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '17.939',\n    version: 3,\n  },\n  {\n    sousId: 272,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.froyo,\n    contractAddress: {\n      97: '',\n      56: '0x84e3208578eE7db397a3d584d97Fea107b15bF35',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.404',\n    version: 3,\n  },\n  {\n    sousId: 271,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bsw,\n    contractAddress: {\n      97: '',\n      56: '0x7092e029E4ce660F9AC081BF6D8a339BE602398b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.157',\n    version: 3,\n  },\n  {\n    sousId: 270,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.duet,\n    contractAddress: {\n      97: '',\n      56: '0xA581349F26dE887700045F9B7d148775d422fDA2',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4861',\n    version: 3,\n  },\n  {\n    sousId: 269,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.gmt,\n    contractAddress: {\n      97: '',\n      56: '0xe76a31cF974BA5819ce86cB4667a4bf05174bC59',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '4.629',\n    version: 3,\n  },\n  {\n    sousId: 268,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.xwg,\n    contractAddress: {\n      97: '',\n      56: '0x6e0272A70075f6782F6842730107E9ABf74C5CC7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '5.106',\n    version: 3,\n  },\n  {\n    sousId: 267,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.high,\n    contractAddress: {\n      97: '',\n      56: '0x60c4998C058BaC8042712B54E7e43b892Ab0B0c4',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.09756',\n    version: 3,\n  },\n  {\n    sousId: 266,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.thg,\n    contractAddress: {\n      97: '',\n      56: '0xD1D03A3D4C27884a8703Cdb78504737C9E9A159e',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.162',\n    version: 3,\n  },\n  {\n    sousId: 265,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.era,\n    contractAddress: {\n      97: '',\n      56: '0x260F95f5b7FD8eda720ED9d0829164dE35B048ab',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.608',\n    version: 3,\n  },\n  {\n    sousId: 264,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.btt,\n    contractAddress: {\n      97: '',\n      56: '0x346a1b672C5Cbb6AE21715428f77A0049B29B332',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '157829',\n  },\n  {\n    sousId: 263,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ach,\n    contractAddress: {\n      97: '',\n      56: '0xcD1Be742b04DB005e2C445A11BDe6d13DD9dd454',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '7.502',\n  },\n  {\n    sousId: 261,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.sfund,\n    contractAddress: {\n      97: '',\n      56: '0x80762101bd79D6e7A175E9678d05c7f815b8D7d7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.06481',\n  },\n  {\n    sousId: 260,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.raca,\n    contractAddress: {\n      97: '',\n      56: '0xAaF43935a526DF88AB57FC69b1d80a8d35e1De82',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '204.2',\n  },\n  {\n    sousId: 259,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ertha,\n    contractAddress: {\n      97: '',\n      56: '0x921Ea7e12A66025F2BD287eDbff6dc5cEABd6477',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.585',\n  },\n  {\n    sousId: 258,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.fuse,\n    contractAddress: {\n      97: '',\n      56: '0xeAd7b8fc5F2E5672FAe9dCf14E902287F35CB169',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.19',\n  },\n  {\n    sousId: 257,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.froyo,\n    contractAddress: {\n      97: '',\n      56: '0x1c9E3972fdBa29b40954Bb7594Da6611998F8830',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '2.893',\n  },\n  {\n    sousId: 256,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.aog,\n    contractAddress: {\n      97: '',\n      56: '0xa34832efe74133763A85060a64103542031B0A7E',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.6435',\n  },\n  {\n    sousId: 255,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.apx,\n    contractAddress: {\n      97: '',\n      56: '0x92c07c325cE7b340Da2591F5e9CbB1F5Bab73FCF',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.035',\n  },\n  {\n    sousId: 254,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bcoin,\n    contractAddress: {\n      97: '',\n      56: '0x25ca61796d786014ffe15e42ac11c7721d46e120',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1493',\n  },\n  {\n    sousId: 253,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bcoin,\n    contractAddress: {\n      97: '',\n      56: '0xad8F6A9d58012DCa2303226B287E80e5fE27eff0',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1493',\n  },\n  {\n    sousId: 252,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.insur,\n    contractAddress: {\n      97: '',\n      56: '0x1A777aE604CfBC265807A46Db2d228d4CC84E09D',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3281',\n  },\n  {\n    sousId: 251,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.gm,\n    contractAddress: {\n      97: '',\n      56: '0x09e727c83a75fFdB729280639eDBf947dB76EeB7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '7893',\n  },\n  {\n    sousId: 250,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.woop,\n    contractAddress: {\n      97: '',\n      56: '0x2718D56aE2b8F08B3076A409bBF729542233E451',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.226',\n  },\n  {\n    sousId: 249,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.high,\n    contractAddress: {\n      97: '',\n      56: '0x2461ea28907A2028b2bCa40040396F64B4141004',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.02679',\n  },\n  {\n    sousId: 247,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dpt,\n    contractAddress: {\n      97: '',\n      56: '0x1c0C7F3B07a42efb4e15679a9ed7e70B2d7Cc157',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '4.62962963',\n  },\n  {\n    sousId: 246,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.thg,\n    contractAddress: {\n      97: '',\n      56: '0x56Bfb98EBEF4344dF2d88c6b80694Cba5EfC56c8',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.03761',\n  },\n  {\n    sousId: 245,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.idia,\n    contractAddress: {\n      97: '',\n      56: '0x07984aBb7489CD436d27875c07Eb532d4116795a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1262',\n  },\n  {\n    sousId: 244,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.xcv,\n    contractAddress: {\n      97: '',\n      56: '0xF1fA41f593547E406a203b681df18acCC3971A43',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.7413',\n  },\n  {\n    sousId: 243,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.nabox,\n    contractAddress: {\n      97: '',\n      56: '0x13A40BFab005D9284f8938FBb70Bf39982580e4D',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1271',\n  },\n  {\n    sousId: 242,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.santos,\n    contractAddress: {\n      97: '',\n      56: '0x0914b2d9D4DD7043893DEF53ecFC0F1179F87d5c',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0578',\n  },\n  {\n    sousId: 241,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.quidd,\n    contractAddress: {\n      97: '',\n      56: '0xd97ee2bfe79a4d4ab388553411c462fbb536a88c',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.07471',\n  },\n  {\n    sousId: 240,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.zoo,\n    contractAddress: {\n      97: '',\n      56: '0x2EfE8772EB97B74be742d578A654AB6C95bF18db',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4516',\n  },\n  {\n    sousId: 239,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.sfund,\n    contractAddress: {\n      97: '',\n      56: '0x7F103689cabe17C2F70DA6faa298045d72a943b8',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0311',\n  },\n  {\n    sousId: 238,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.qi,\n    contractAddress: {\n      97: '',\n      56: '0xbd52ef04DB1ad1c68A8FA24Fa71f2188978ba617',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.736',\n  },\n  {\n    sousId: 237,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.kart,\n    contractAddress: {\n      97: '',\n      56: '0x73bB10B89091f15e8FeD4d6e9EBa6415df6acb21',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1897',\n  },\n  {\n    sousId: 236,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.porto,\n    contractAddress: {\n      97: '',\n      56: '0xdD52FAB121376432DBCBb47592742F9d86CF8952',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0578',\n  },\n  {\n    sousId: 235,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dvi,\n    contractAddress: {\n      97: '',\n      56: '0x2b8751B7141Efa7a9917f9C6fea2CEA071af5eE7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.2516',\n  },\n  {\n    sousId: 234,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.jgn,\n    contractAddress: {\n      97: '',\n      56: '0xfDFb4DbE94916F9f55dBC2c14Ea8B3e386eCD9F9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.5233',\n  },\n  {\n    sousId: 232,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.xwg,\n    contractAddress: {\n      97: '',\n      56: '0x79f5f7DDADeFa0A9e850DFFC4fBa77e5172Fe701',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '2.3379',\n  },\n  {\n    sousId: 231,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dar,\n    contractAddress: {\n      97: '',\n      56: '0x9b861A078B2583373A7a3EEf815bE1A39125Ae08',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '2.3148',\n  },\n  {\n    sousId: 230,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.fina,\n    contractAddress: {\n      97: '',\n      56: '0xa35caA9509a2337E22C54C929146D5F7f6515794',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.06944',\n  },\n  {\n    sousId: 229,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bmon,\n    contractAddress: {\n      97: '',\n      56: '0x6e63B2B96c77532ea7ec2B3D3BFA9C8e1d383f3C',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '2.0254',\n  },\n  {\n    sousId: 228,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dkt,\n    contractAddress: {\n      97: '',\n      56: '0xFef4B7a0194159d89717Efa592384d42B28D3926',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.09838',\n  },\n  {\n    sousId: 227,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ramp,\n    contractAddress: {\n      97: '',\n      56: '0x2D26e4b9a5F19eD5BB7AF221DC02432D31DEB4dA',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.2152',\n  },\n  {\n    sousId: 226,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lazio,\n    contractAddress: {\n      97: '',\n      56: '0xd008416c2c9cf23843bd179aa3cefedb4c8d1607',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0694',\n  },\n  {\n    sousId: 225,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.sps,\n    contractAddress: {\n      97: '',\n      56: '0xd9b63bb6c62fe2e9a641699a91e680994b8b0081',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.40046',\n  },\n  {\n    sousId: 224,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.mcb,\n    contractAddress: {\n      97: '',\n      56: '0xCc2D359c3a99d9cfe8e6F31230142efF1C828e6D',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00706',\n  },\n  {\n    sousId: 223,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.rpg,\n    contractAddress: {\n      97: '',\n      56: '0x65C0940C50A3C98AEEc95a115Ae62E9804588713',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.01863',\n  },\n  {\n    sousId: 222,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.beta,\n    contractAddress: {\n      97: '',\n      56: '0x6f660c58723922c6f866a058199ff4881019b4b5',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.7361',\n  },\n  {\n    sousId: 233,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.eternal,\n    contractAddress: {\n      97: '',\n      56: '0xc28c400F2B675b25894FA632205ddec71E432288',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.002893',\n  },\n  {\n    sousId: 221,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.nft,\n    contractAddress: {\n      97: '',\n      56: '0x8d018823d13c56d62ffb795151a9e629c21e047b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '173727',\n  },\n  {\n    sousId: 220,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.chess,\n    contractAddress: {\n      97: '',\n      56: '0x4D1Ec426d0d7fb6bF344Dd372d0502EDD71c8d88',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0861',\n  },\n  {\n    sousId: 219,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.tlos,\n    contractAddress: {\n      97: '',\n      56: '0xCB41a72067c227D6Ed7bc7CFAcd13eCe47Dfe5E9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3616',\n  },\n  {\n    sousId: 218,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.stephero,\n    contractAddress: {\n      97: '',\n      56: '0xcecba456fefe5b18d43df23419e7ab755b436655',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1851',\n  },\n  {\n    sousId: 217,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bp,\n    contractAddress: {\n      97: '',\n      56: '0x8ed7acf12b08274d5cdaf03d43d0e54bcbdd487e',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.217',\n  },\n  {\n    sousId: 216,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.cvp,\n    contractAddress: {\n      97: '',\n      56: '0xC4b15117BC0be030c20754FF36197641477af5d1',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.14',\n  },\n  {\n    sousId: 215,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.qbt,\n    contractAddress: {\n      97: '',\n      56: '0xB72dEf58D0832f747d6B7197471Fe20AeA7EB463',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.412',\n  },\n  {\n    sousId: 214,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.naos,\n    contractAddress: {\n      97: '',\n      56: '0xb38b78529bCc895dA16CE2978D6cD6C56e8CfFC3',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1736',\n  },\n  {\n    sousId: 213,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pha,\n    contractAddress: {\n      97: '',\n      56: '0x2E101b5F7f910F2609e5AcE5f43bD274b1DE09AA',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.28',\n  },\n  {\n    sousId: 212,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bel,\n    contractAddress: {\n      97: '',\n      56: '0x52733Ad7b4D09BF613b0389045e33E2F287afa04',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.101',\n  },\n  {\n    sousId: 211,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ramp,\n    contractAddress: {\n      97: '',\n      56: '0x401b9b97bdbc3197c1adfab9652dc78040bd1e13',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.9837',\n  },\n  {\n    sousId: 210,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pots,\n    contractAddress: {\n      97: '',\n      56: '0xBeDb490970204cb3CC7B0fea94463BeD67d5364D',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0868',\n  },\n  {\n    sousId: 209,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.tusd,\n    contractAddress: {\n      97: '',\n      56: '0xb6e510ae2da1ab4e350f837c70823ab75091780e',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.5787',\n  },\n  {\n    sousId: 208,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.revv,\n    contractAddress: {\n      97: '',\n      56: '0x8aa5b2c67852ed5334c8a7f0b5eb0ef975106793',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.331',\n  },\n  {\n    sousId: 207,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bttold,\n    contractAddress: {\n      97: '',\n      56: '0x3b804460c3c62f0f565af593984159f13b1ac976',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '263',\n  },\n  {\n    sousId: 206,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.skill,\n    contractAddress: {\n      97: '',\n      56: '0x455f4d4cc4d6ca15441a93c631e82aaf338ad843',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00289',\n  },\n  {\n    sousId: 205,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.win,\n    contractAddress: {\n      97: '',\n      56: '0xde4aef42bb27a2cb45c746acde4e4d8ab711d27c',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1815.39',\n  },\n  {\n    sousId: 204,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.if,\n    contractAddress: {\n      97: '',\n      56: '0x57d3524888ded4085d9124a422f13b27c8a43de7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.02835',\n  },\n  {\n    sousId: 203,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.sps,\n    contractAddress: {\n      97: '',\n      56: '0xb56299d8fbf46c509014b103a164ad1fc65ea222',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '12.86',\n  },\n  {\n    sousId: 202,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.c98,\n    contractAddress: {\n      97: '',\n      56: '0x5e49531BA07bE577323e55666D46C6217164119E',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.7361',\n  },\n  {\n    sousId: 201,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.axs,\n    contractAddress: {\n      97: '',\n      56: '0xBB472601B3CB32723d0755094BA80B73F67f2AF3',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00744',\n  },\n  {\n    sousId: 200,\n    stakingToken: serializedTokens.axs,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0x583A36816F3b8401C4fdf682203E0caDA6997740',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00992',\n  },\n  {\n    sousId: 199,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pmon,\n    contractAddress: {\n      97: '',\n      56: '0x28050e8f024e05f9ddbef5f60dd49f536dba0cf0',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.02696',\n  },\n  {\n    sousId: 198,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.trx,\n    contractAddress: {\n      97: '',\n      56: '0xb2b62f88ab82ed0bb4ab4da60d9dc9acf9e816e5',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '9.6643',\n  },\n  {\n    sousId: 197,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.chess,\n    contractAddress: {\n      97: '',\n      56: '0xd1812e7e28c39e78727592de030fc0e7c366d61a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4286',\n  },\n  {\n    sousId: 196,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.titan,\n    contractAddress: {\n      97: '',\n      56: '0x97058cf9b36c9ef1622485cef22e72d6fea32a36',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.08912',\n  },\n  {\n    sousId: 195,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.harmony,\n    contractAddress: {\n      97: '',\n      56: '0xe595456846155e23b24cc9cbee910ee97027db6d',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.0092',\n  },\n  {\n    sousId: 194,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.mask,\n    contractAddress: {\n      97: '',\n      56: '0xae611c6d4d3ca2cee44cd34eb7aac29d5a387fcf',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.06423',\n  },\n  {\n    sousId: 193,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dvi,\n    contractAddress: {\n      97: '',\n      56: '0x135827eaf9746573c0b013f18ee12f138b9b0384',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.7233',\n  },\n  {\n    sousId: 192,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.gum,\n    contractAddress: {\n      97: '',\n      56: '0x09b8a5f51c9e245402057851ada274174fa00e2a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.67129',\n  },\n  {\n    sousId: 191,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.adx,\n    contractAddress: {\n      97: '',\n      56: '0x53a2d1db049b5271c6b6db020dba0e8a7c4eb90d',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.7523',\n  },\n  {\n    sousId: 190,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.suter,\n    contractAddress: {\n      97: '',\n      56: '0x4da8da81647ee0aa7350e9959f3e4771eb753da0',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '69.9074',\n  },\n  {\n    sousId: 189,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bscpad,\n    contractAddress: {\n      97: '',\n      56: '0x0446b8f8474c590d2249a4acdd6eedbc2e004bca',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3877',\n  },\n  {\n    sousId: 188,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.rabbit,\n    contractAddress: {\n      97: '',\n      56: '0x391240A007Bfd8A59bA74978D691219a76c64c5C',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.993',\n  },\n  {\n    sousId: 187,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.waultx,\n    contractAddress: {\n      97: '',\n      56: '0x017DEa5C58c2Bcf57FA73945073dF7AD4052a71C',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '7.9108',\n  },\n  {\n    sousId: 186,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.wex,\n    contractAddress: {\n      97: '',\n      56: '0x6Bd94783caCef3fb7eAa9284f1631c464479829f',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '11.574',\n  },\n  {\n    sousId: 185,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.form,\n    contractAddress: {\n      97: '',\n      56: '0x7c71723fB1F9Cfb250B702cfc4eBd5D9Ab2E83d9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.4467',\n  },\n  {\n    sousId: 184,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.orbs,\n    contractAddress: {\n      97: '',\n      56: '0x9C8813d7D0A61d30610a7A5FdEF9109e196a3D77',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.8946',\n  },\n  {\n    sousId: 183,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.$dg,\n    contractAddress: {\n      97: '',\n      56: '0xa07a91da6d10173f33c294803684bceede325957',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00135',\n  },\n  {\n    sousId: 182,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.woo,\n    contractAddress: {\n      97: '',\n      56: '0x88c321d444c88acf3e747dc90f20421b97648903',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3854',\n  },\n  {\n    sousId: 181,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.woo,\n    contractAddress: {\n      97: '',\n      56: '0x3c7234c496d76133b48bd6a342e7aea4f8d87fc8',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0003854',\n  },\n  {\n    sousId: 180,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.htb,\n    contractAddress: {\n      97: '',\n      56: '0x64473c33c360f315cab38674f1633505d1d8dcb2',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '5.2083',\n  },\n  {\n    sousId: 179,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.jgn,\n    contractAddress: {\n      97: '',\n      56: '0x5cc7a19a50be2a6b2540ebcd55bd728e732e59c3',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1001',\n  },\n  {\n    sousId: 178,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dft,\n    contractAddress: {\n      97: '',\n      56: '0x2666e2494e742301ffc8026e476acc1710a775ed',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.7361',\n  },\n  {\n    sousId: 177,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hai,\n    contractAddress: {\n      97: '',\n      56: '0x6ac2213F09A404c86AFf506Aa51B6a5BF1F6e24E',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.3078',\n  },\n  {\n    sousId: 176,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.o3,\n    contractAddress: {\n      97: '',\n      56: '0x35BD47263f7E57368Df76339903C53bAa99076e1',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.107638',\n  },\n  {\n    sousId: 175,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ampl,\n    contractAddress: {\n      97: '',\n      56: '0x62dEc3A560D2e8A84D30752bA454f97b26757877',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.398',\n  },\n  {\n    sousId: 174,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.oddz,\n    contractAddress: {\n      97: '',\n      56: '0x44d1f81e80e43e935d66d65874354ef91e5e49f6',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4843',\n  },\n  {\n    sousId: 173,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bondly,\n    contractAddress: {\n      97: '',\n      56: '0x4ea43fce546975aae120c9eeceb172500be4a02b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.6741',\n  },\n  {\n    sousId: 172,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.marsh,\n    contractAddress: {\n      97: '',\n      56: '0x567fd708e788e51b68666b9310ee9df163d60fae',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1108',\n  },\n  {\n    sousId: 171,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.mbox,\n    contractAddress: {\n      97: '',\n      56: '0x36f9452083fc9bc469a31e7966b873f402292433',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4803',\n  },\n  {\n    sousId: 170,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ata,\n    contractAddress: {\n      97: '',\n      56: '0xc612680457751d0d01b5d901ad08132a3b001900',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.7361',\n  },\n  {\n    sousId: 169,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.mx,\n    contractAddress: {\n      97: '',\n      56: '0x336bcd59f2b6eb7221a99f7a50fd03c6bf9a306b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.27777',\n  },\n  {\n    sousId: 168,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bcfx,\n    contractAddress: {\n      97: '',\n      56: '0x2b3974dda76b2d408b7d680a27fbb0393e3cf0e1',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.6944',\n  },\n  {\n    sousId: 167,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.qkc,\n    contractAddress: {\n      97: '',\n      56: '0xfa67f97eeee6de55d179ecabbfe701f27d9a1ed9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '15.9143',\n  },\n  {\n    sousId: 166,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ktn,\n    contractAddress: {\n      97: '',\n      56: '0x48852322a185dc5fc733ff8c8d7c6dcbd2b3b2a2',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.01215',\n  },\n  {\n    sousId: 165,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.mtrg,\n    contractAddress: {\n      97: '',\n      56: '0xf4d0f71698f58f221911515781b05e808a8635cb',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.05613',\n  },\n  {\n    sousId: 164,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.tusd,\n    contractAddress: {\n      97: '',\n      56: '0x9dceb1d92f7e0361d0766f3d98482424df857654',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.5787',\n  },\n  {\n    sousId: 163,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.vrt,\n    contractAddress: {\n      97: '',\n      56: '0xb77f1425ec3a7c78b1a1e892f72332c8b5e8ffcb',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '40.5092',\n  },\n  {\n    sousId: 162,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.kalm,\n    contractAddress: {\n      97: '',\n      56: '0xb9ff4da0954b300542e722097671ead8cf337c17',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0868',\n  },\n  {\n    sousId: 161,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ez,\n    contractAddress: {\n      97: '',\n      56: '0xb19395702460261e51edf7a7b130109c64f13af9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.01736',\n  },\n  {\n    sousId: 160,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.kalm,\n    contractAddress: {\n      97: '',\n      56: '0x6e113ecb9ff2d271140f124c2cc5b5e4b5700c9f',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    isFinished: true,\n    tokenPerBlock: '0.00868',\n  },\n  {\n    sousId: 159,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.popen,\n    contractAddress: {\n      97: '',\n      56: '0x7baf1763ce5d0da8c9d85927f08a8be9c481ce50',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.19097',\n  },\n  {\n    sousId: 158,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lien,\n    contractAddress: {\n      97: '',\n      56: '0x2b8d6c9c62bfc1bed84724165d3000e61d332cab',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.023148',\n  },\n  {\n    sousId: 157,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.well,\n    contractAddress: {\n      97: '',\n      56: '0x8a06ff2748edcba3fb4e44a6bfda4e46769e557b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.2025',\n    sortOrder: 999,\n  },\n  {\n    sousId: 156,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.deri,\n    contractAddress: {\n      97: '',\n      56: '0x3eba95f5493349bbe0cad33eaae05dc6a7e26b90',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '1.6087',\n    sortOrder: 999,\n  },\n  {\n    sousId: 155,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.chr,\n    contractAddress: {\n      97: '',\n      56: '0x593edbd14a5b7eec828336accca9c16cc12f04be',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '1.655',\n    sortOrder: 999,\n  },\n  {\n    sousId: 154,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.cyc,\n    contractAddress: {\n      97: '',\n      56: '0xD714738837944C3c592477249E8edB724A76e068',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.00015914',\n    sortOrder: 999,\n  },\n  {\n    sousId: 153,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.xend,\n    contractAddress: {\n      97: '',\n      56: '0x8ea9f2482b2f7b12744a831f81f8d08714adc093',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.31828',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 152,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hget,\n    contractAddress: {\n      97: '',\n      56: '0x8e8125f871eb5ba9d55361365f5391ab437f9acc',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.03553',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 151,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hotcross,\n    contractAddress: {\n      97: '',\n      56: '0x0e09205e993f78cd5b3a5df355ae98ee7d0b5834',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.4722',\n    isFinished: false,\n  },\n  {\n    sousId: 150,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.rfox,\n    contractAddress: {\n      97: '',\n      56: '0xf9f00d41b1f4b3c531ff750a9b986c1a530f33d9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.7361',\n    isFinished: false,\n  },\n  {\n    sousId: 149,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.wmass,\n    contractAddress: {\n      97: '',\n      56: '0x4Af531EcD50167a9402Ce921ee6436dd4cFC04FD',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.24942',\n    isFinished: false,\n  },\n  {\n    sousId: 148,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ubxt,\n    contractAddress: {\n      97: '',\n      56: '0x9b4bac2d8f69853aa29cb45478c77fc54532ac22',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '2.4074',\n    isFinished: false,\n  },\n  {\n    sousId: 147,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.btr,\n    contractAddress: {\n      97: '',\n      56: '0x20ee70a07ae1b475cb150dec27930d97915726ea',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '2.8935',\n    isFinished: false,\n  },\n  {\n    sousId: 146,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.τdoge,\n    contractAddress: {\n      97: '',\n      56: '0x017556dffb8c6a52fd7f4788adf6fb339309c81b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.868',\n    isFinished: false,\n  },\n  {\n    sousId: 145,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pmon,\n    contractAddress: {\n      97: '',\n      56: '0xdaa711ecf2ac0bff5c82fceeae96d0008791cc49',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.01261',\n    isFinished: false,\n  },\n  {\n    sousId: 144,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.one,\n    contractAddress: {\n      97: '',\n      56: '0x74af842ecd0b6588add455a47aa21ed9ba794108',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '57.87',\n    isFinished: false,\n  },\n  {\n    sousId: 143,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.fine,\n    contractAddress: {\n      97: '',\n      56: '0x42d41749d6e9a1c5b47e27f690d4531f181b2159',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.1342',\n    isFinished: false,\n  },\n  {\n    sousId: 142,\n    stakingToken: serializedTokens.doge,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0xbebd44824631b55991fa5f2bf5c7a4ec96ff805b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.01388',\n    isFinished: false,\n  },\n  {\n    sousId: 141,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bmxx,\n    contractAddress: {\n      97: '',\n      56: '0x55131f330c886e3f0cae389cedb23766ac9aa3ed',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.01331',\n    isFinished: false,\n  },\n  {\n    sousId: 140,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.oin,\n    contractAddress: {\n      97: '',\n      56: '0x01453a74a94687fa3f99b80762435855a13664f4',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3472',\n    isFinished: false,\n  },\n  {\n    sousId: 139,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hyfi,\n    contractAddress: {\n      97: '',\n      56: '0x0032ceb978fe5fc8a5d5d6f5adfc005e76397e29',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '2.8935',\n    isFinished: false,\n  },\n  {\n    sousId: 138,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.kun,\n    contractAddress: {\n      97: '',\n      56: '0x439b46d467402cebc1a2fa05038b5b696b1f4417',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.23148',\n    isFinished: false,\n  },\n  {\n    sousId: 137,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.math,\n    contractAddress: {\n      97: '',\n      56: '0x377ae5f933aa4cfa41fa03e2cae8a2befccf53b2',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.15798',\n    isFinished: false,\n  },\n  {\n    sousId: 136,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ust,\n    contractAddress: {\n      97: '',\n      56: '0xce3ebac3f549ebf1a174a6ac3b390c179422b5f6',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.17361',\n    isFinished: false,\n  },\n  {\n    sousId: 135,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.win,\n    contractAddress: {\n      97: '',\n      56: '0xd26dec254c699935c286cd90e9841dcabf1af72d',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '462.96',\n    isFinished: false,\n  },\n  {\n    sousId: 134,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.trx,\n    contractAddress: {\n      97: '',\n      56: '0x93e2867d9b74341c2d19101b7fbb81d6063cca4d',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '4.0509',\n    isFinished: false,\n  },\n  {\n    sousId: 133,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bttold,\n    contractAddress: {\n      97: '',\n      56: '0x3b644e44033cff70bd6b771904225f3dd69dfb6d',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '79.86',\n    isFinished: false,\n  },\n  {\n    sousId: 132,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lmt,\n    contractAddress: {\n      97: '',\n      56: '0x0a687d7b951348d681f7ed5eea84c0ba7b9566dc',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.66145',\n    isFinished: false,\n  },\n  {\n    sousId: 131,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pnt,\n    contractAddress: {\n      97: '',\n      56: '0x417df1c0e6a498eb1f2247f99032a01d4fafe922',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.09548',\n    isFinished: false,\n  },\n  {\n    sousId: 130,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.xmark,\n    contractAddress: {\n      97: '',\n      56: '0xdc8943d806f9dd64312d155284abf780455fd345',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0298',\n    isFinished: false,\n  },\n  {\n    sousId: 129,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ramp,\n    contractAddress: {\n      97: '',\n      56: '0xa90a894e5bc20ab2be46c7e033a38f8b8eaa771a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4861',\n    isFinished: true,\n  },\n  {\n    sousId: 128,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hakka,\n    contractAddress: {\n      97: '',\n      56: '0x34ac807e34e534fe426da1e11f816422774aae1c',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.4722',\n    isFinished: false,\n  },\n  {\n    sousId: 127,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pbtc,\n    contractAddress: {\n      97: '',\n      56: '0x31fa2f516b77c4273168b284ac6d9def5aa6dafb',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0000031',\n    isFinished: false,\n  },\n  {\n    sousId: 126,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lien,\n    contractAddress: {\n      97: '',\n      56: '0x7112f8988f075c7784666ab071927ae4109a8076',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.003472',\n    isFinished: false,\n  },\n  {\n    sousId: 125,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bbadger,\n    contractAddress: {\n      97: '',\n      56: '0x126dfbcef85c5bf335f8be99ca4006037f417892',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00265278',\n    isFinished: false,\n  },\n  {\n    sousId: 124,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bdigg,\n    contractAddress: {\n      97: '',\n      56: '0x4f0ad2332b1f9983e8f63cbee617523bb7de5031',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00000403',\n    isFinished: false,\n  },\n  {\n    sousId: 123,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bondly,\n    contractAddress: {\n      97: '',\n      56: '0x9483ca44324de06802576866b9d296f7614f45ac',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4629',\n    isFinished: false,\n  },\n  {\n    sousId: 122,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.xed,\n    contractAddress: {\n      97: '',\n      56: '0x72ceec6e2a142678e703ab0710de78bc819f4ce0',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3472',\n    isFinished: false,\n  },\n  {\n    sousId: 121,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.cgg,\n    contractAddress: {\n      97: '',\n      56: '0x1c6ed21d3313822ae73ed0d94811ffbbe543f341',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.10918',\n    isFinished: false,\n  },\n  {\n    sousId: 120,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.perl,\n    contractAddress: {\n      97: '',\n      56: '0x1ac0d0333640f57327c83053c581340ebc829e30',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.1574',\n    isFinished: false,\n  },\n  {\n    sousId: 119,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.arpa,\n    contractAddress: {\n      97: '',\n      56: '0xc707e5589aeb1dc117b0bb5a3622362f1812d4fc',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.949',\n    isFinished: false,\n  },\n  {\n    sousId: 118,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.oddz,\n    contractAddress: {\n      97: '',\n      56: '0x22106cdcf9787969e1672d8e6a9c03a889cda9c5',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.11284',\n    isFinished: false,\n  },\n  {\n    sousId: 117,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dexe,\n    contractAddress: {\n      97: '',\n      56: '0x999b86e8bba3d4f05afb8155963999db70afa97f',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.009837',\n    isFinished: true,\n  },\n  {\n    sousId: 116,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dfd,\n    contractAddress: {\n      97: '',\n      56: '0xAF3EfE5fCEeBc603Eada6A2b0172be11f7405102',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.46296',\n    isFinished: false,\n  },\n  {\n    sousId: 115,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.alpaca,\n    contractAddress: {\n      97: '',\n      56: '0xf73fdeb26a8c7a4abf3809d3db11a06ba5c13d0e',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.22743',\n    isFinished: false,\n  },\n  {\n    sousId: 114,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.τbtc,\n    contractAddress: {\n      97: '',\n      56: '0xaac7171afc93f4b75e1268d208040b152ac65e32',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00000608',\n    isFinished: false,\n  },\n  {\n    sousId: 113,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.τbtc,\n    contractAddress: {\n      97: '',\n      56: '0x2c6017269b4324d016ca5d8e3267368652c18905',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00000608',\n    isFinished: true,\n  },\n  {\n    sousId: 112,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.swingby,\n    contractAddress: {\n      97: '',\n      56: '0x675434c68f2672c983e36cf10ed13a4014720b79',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.21527',\n  },\n  {\n    sousId: 111,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.xed,\n    contractAddress: {\n      97: '',\n      56: '0x05d6c2d1d687eacfb5e6440d5a3511e91f2201a8',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3472',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 110,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hakka,\n    contractAddress: {\n      97: '',\n      56: '0xd623a32da4a632ce01766c317d07cb2cad56949b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.4722',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 109,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.cgg,\n    contractAddress: {\n      97: '',\n      56: '0xdf75f38dbc98f9f26377414e567abcb8d57cca33',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.10918',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 108,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.mix,\n    contractAddress: {\n      97: '',\n      56: '0xce64a930884b2c68cd93fc1c7c7cdc221d427692',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.3721',\n  },\n  {\n    sousId: 107,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.suter,\n    contractAddress: {\n      97: '',\n      56: '0xc1E70edd0141c454b834Deac7ddDeA413424aEf9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '15.3356',\n  },\n  {\n    sousId: 106,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.broobee,\n    contractAddress: {\n      97: '',\n      56: '0x189d8228CdfDc404Bd9e5bD65ff958cb5fd8855c',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '14.4675',\n  },\n  {\n    sousId: 105,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hzn,\n    contractAddress: {\n      97: '',\n      56: '0x0196c582216e2463f052E2B07Ef8667Bec9Fb17a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.6944',\n  },\n  {\n    sousId: 104,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.alpa,\n    contractAddress: {\n      97: '',\n      56: '0x8f84106286c9c8A42bc3555C835E6e2090684ab7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.23495',\n  },\n  {\n    sousId: 103,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.perl,\n    contractAddress: {\n      97: '',\n      56: '0xa8d32b31ECB5142f067548Bf0424389eE98FaF26',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.1574',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 102,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.tlm,\n    contractAddress: {\n      97: '',\n      56: '0xC59aa49aE508050c2dF653E77bE13822fFf02E9A',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '17.361',\n  },\n  {\n    sousId: 101,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.jgn,\n    contractAddress: {\n      97: '',\n      56: '0x14AeA62384789EDA98f444cCb970F6730877d3F9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.08796',\n  },\n  {\n    sousId: 100,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.eps,\n    contractAddress: {\n      97: '',\n      56: '0xebb87dF24D65977cbe62538E4B3cFBD5d0308642',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.07716',\n  },\n  {\n    sousId: 99,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.arpa,\n    contractAddress: {\n      97: '',\n      56: '0x40918EF8efFF4aA061656013a81E0e5A8A702eA7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.949',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 98,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.itam,\n    contractAddress: {\n      97: '',\n      56: '0x44eC1B26035865D9A7C130fD872670CD7Ebac2bC',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '3.096',\n  },\n  {\n    sousId: 97,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bondly,\n    contractAddress: {\n      97: '',\n      56: '0x1329ad151dE6C441184E32E108401126AE850937',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.4629',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 96,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.tko,\n    contractAddress: {\n      97: '',\n      56: '0x9bbDc92474a7e7321B78dcDA5EF35f4981438760',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.1574',\n  },\n  {\n    sousId: 95,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.apys,\n    contractAddress: {\n      97: '',\n      56: '0x46530d79b238f809e80313e73715b160c66677aF',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.09953',\n  },\n  {\n    sousId: 94,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hoo,\n    contractAddress: {\n      97: '',\n      56: '0x47fD853D5baD391899172892F91FAa6d0cd8A2Aa',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.489',\n  },\n  {\n    sousId: 93,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.oddz,\n    contractAddress: {\n      97: '',\n      56: '0xe25aB6F05BBF6C1be953BF2d7df15B3e01b8e5a5',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.11284',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 92,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.easy,\n    contractAddress: {\n      97: '',\n      56: '0xEB8Fd597921E3Dd37B0F103a2625F855e2C9b9B5',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0072338',\n  },\n  {\n    sousId: 91,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.nrv,\n    contractAddress: {\n      97: '',\n      56: '0xABFd8d1942628124aB971937154f826Bce86DcbC',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.15046',\n  },\n  {\n    sousId: 90,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dego,\n    contractAddress: {\n      97: '',\n      56: '0x526d3c204255f807C95a99b69596f2f9f72345e5',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00405',\n  },\n  {\n    sousId: 89,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.gum,\n    contractAddress: {\n      97: '',\n      56: '0xAa2082BeE04fc518300ec673F9497ffa6F669dB8',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.08912',\n  },\n  {\n    sousId: 88,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pbtc,\n    contractAddress: {\n      97: '',\n      56: '0x9096625Bc0d36F5EDa6d44e511641667d89C28f4',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.0000031',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 87,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dft,\n    contractAddress: {\n      97: '',\n      56: '0x78BD4dB48F8983c3C36C8EAFbEF38f6aC7B55285',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.6811',\n  },\n  {\n    sousId: 86,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.swth,\n    contractAddress: {\n      97: '',\n      56: '0x35418e14F5aA615C4f020eFBa6e01C5DbF15AdD2',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '2.3148',\n  },\n  {\n    sousId: 85,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lien,\n    contractAddress: {\n      97: '',\n      56: '0x3c7cC49a35942fbD3C2ad428a6c22490cd709d03',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.003472',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 84,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.zil,\n    contractAddress: {\n      97: '',\n      56: '0xF795739737ABcFE0273f4Dced076460fdD024Dd9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '1.0995',\n  },\n  {\n    sousId: 83,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.pcws,\n    contractAddress: {\n      97: '',\n      56: '0x06FF8960F7F4aE572A3f57FAe77B2882BE94Bf90',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00434',\n  },\n  {\n    sousId: 82,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bbadger,\n    contractAddress: {\n      97: '',\n      56: '0xe4dD0C50fb314A8B2e84D211546F5B57eDd7c2b9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00265278',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 81,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bdigg,\n    contractAddress: {\n      97: '',\n      56: '0xb627A7e33Db571bE792B0b69c5C2f5a8160d5500',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.00000403',\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 80,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lto,\n    contractAddress: {\n      97: '',\n      56: '0xadBfFA25594AF8Bc421ecaDF54D057236a99781e',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.2893',\n  },\n  {\n    sousId: 79,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.mir,\n    contractAddress: {\n      97: '',\n      56: '0x3e31488f08EBcE6F2D8a2AA512aeFa49a3C7dFa7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.01273',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 78,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.mir,\n    contractAddress: {\n      97: '',\n      56: '0x453a75908fb5a36d482d5f8fe88eca836f32ead5',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.01273',\n    sortOrder: 999,\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 77,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.trade,\n    contractAddress: {\n      97: '',\n      56: '0x509C99D73FB54b2c20689708b3F824147292D38e',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.4484',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 76,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dusk,\n    contractAddress: {\n      97: '',\n      56: '0xF1bd5673Ea4a1C415ec84fa3E402F2F7788E7717',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.4629',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 75,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bifi,\n    contractAddress: {\n      97: '',\n      56: '0xB4C68A1C565298834360BbFF1652284275120D47',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.00007234',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 74,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.txl,\n    contractAddress: {\n      97: '',\n      56: '0x153e62257F1AAe05d5d253a670Ca7585c8D3F94F',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.434027',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 73,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.cos,\n    contractAddress: {\n      97: '',\n      56: '0xF682D186168b4114ffDbF1291F19429310727151',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '5.787',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 72,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bunny,\n    contractAddress: {\n      97: '',\n      56: '0xaDdAE5f4dB84847ac9d947AED1304A8e7D19f7cA',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.00289',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 71,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.alice,\n    contractAddress: {\n      97: '',\n      56: '0x4C32048628D0d32d4D6c52662FB4A92747782B56',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.14467',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 70,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.for,\n    contractAddress: {\n      97: '',\n      56: '0x47642101e8D8578C42765d7AbcFd0bA31868c523',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '2.8935',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 69,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bux,\n    contractAddress: {\n      97: '',\n      56: '0x07F8217c68ed9b838b0b8B58C19c79bACE746e9A',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.5787',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 68,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.nuls,\n    contractAddress: {\n      97: '',\n      56: '0x580DC9bB9260A922E3A4355b9119dB990F09410d',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0868',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 67,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.belt,\n    contractAddress: {\n      97: '',\n      56: '0x6f0037d158eD1AeE395e1c12d21aE8583842F472',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.00868',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 66,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ramp,\n    contractAddress: {\n      97: '',\n      56: '0x423382f989C6C289c8D441000e1045e231bd7d90',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.4861',\n    sortOrder: 999,\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 65,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bfi,\n    contractAddress: {\n      97: '',\n      56: '0x0A595623b58dFDe6eB468b613C11A7A8E84F09b9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0001157',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 64,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dexe,\n    contractAddress: {\n      97: '',\n      56: '0x9E6dA246d369a41DC44673ce658966cAf487f7b2',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.009837',\n    sortOrder: 999,\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 63,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bel,\n    contractAddress: {\n      97: '',\n      56: '0x2C0f449387b15793B9da27c2d945dBed83ab1B07',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0549',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 62,\n    stakingToken: serializedTokens.tpt,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0x0c3D6892aa3b23811Af3bd1bbeA8b0740E8e4528',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0462',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 61,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.tpt,\n    contractAddress: {\n      97: '',\n      56: '0x75C91844c5383A68b7d3A427A44C32E3ba66Fe45',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '3.616',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 60,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.watch,\n    contractAddress: {\n      97: '',\n      56: '0xC58954199E268505fa3D3Cb0A00b7207af8C2D1d',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.3472',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 59,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.xmark,\n    contractAddress: {\n      97: '',\n      56: '0xA5137e08C48167E363Be8Ec42A68f4F54330964E',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0413',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 58,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bmxx,\n    contractAddress: {\n      97: '',\n      56: '0x6F31B87f51654424Ce57E9F8243E27ed13846CDB',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.00248',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 57,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.iotx,\n    contractAddress: {\n      97: '',\n      56: '0xCE54BA909d23B9d4BE0Ff0d84e5aE83F0ADD8D9a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '6.365',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 56,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bor,\n    contractAddress: {\n      97: '',\n      56: '0x3e677dC00668d69c2A7724b9AFA7363e8A56994e',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.000395',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 55,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bopen,\n    contractAddress: {\n      97: '',\n      56: '0x5Ac8406498dC1921735d559CeC271bEd23B294A7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0723',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 54,\n    stakingToken: serializedTokens.sushi,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0xb69b6e390cba1F68442A886bC89E955048DAe7E3',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0367',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 53,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.dodo,\n    contractAddress: {\n      97: '',\n      56: '0xae3001ddb18A6A57BEC2C19D71680437CA87bA1D',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0578',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 52,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.swingby,\n    contractAddress: {\n      97: '',\n      56: '0x02aa767e855b8e80506fb47176202aA58A95315a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.13',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 51,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bry,\n    contractAddress: {\n      97: '',\n      56: '0x1c736F4FB20C7742Ee83a4099fE92abA61dFca41',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.1157',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 50,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.zee,\n    contractAddress: {\n      97: '',\n      56: '0x02861B607a5E87daf3FD6ec19DFB715F1b371379',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.1736',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 49,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.swgb,\n    contractAddress: {\n      97: '',\n      56: '0x73e4E8d010289267dEe3d1Fc48974B60363963CE',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.899',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 48,\n    stakingToken: serializedTokens.comp,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0xE0565fBb109A3f3f8097D8A9D931277bfd795072',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.055',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 47,\n    stakingToken: serializedTokens.comp,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0xc3693e3cbc3514d5d07EA5b27A721F184F617900',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.55',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 46,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.sfp,\n    contractAddress: {\n      97: '',\n      56: '0x2B02d43967765b18E31a9621da640588f3550EFD',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.6',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 45,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lina,\n    contractAddress: {\n      97: '',\n      56: '0x212bb602418C399c29D52C55100fD6bBa12bea05',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.983',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 44,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lina,\n    contractAddress: {\n      97: '',\n      56: '0x04aE8ca68A116278026fB721c06dCe709eD7013C',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0983',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 43,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.lit,\n    contractAddress: {\n      97: '',\n      56: '0x1714bAAE9DD4738CDEA07756427FA8d4F08D9479',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.231',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 42,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hget,\n    contractAddress: {\n      97: '',\n      56: '0xcCD0b93cC6ce3dC6dFaA9DB68f70e5C8455aC5bd',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0138',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 41,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bdo,\n    contractAddress: {\n      97: '',\n      56: '0x9cB24e9460351bC51d4066BC6AEd1F3809b02B78',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.075',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 40,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.egld,\n    contractAddress: {\n      97: '',\n      56: '0x2dcf4cDFf4Dd954683Fe0a6123077f8a025b66cF',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.001215',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 39,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ust,\n    contractAddress: {\n      97: '',\n      56: '0x6EFa207ACdE6e1caB77c1322CbdE9628929ba88F',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.1157',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 38,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.wsote,\n    contractAddress: {\n      97: '',\n      56: '0xD0b738eC507571176D40f28bd56a0120E375f73a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.23',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 37,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.front,\n    contractAddress: {\n      97: '',\n      56: '0xf7a31366732F08E8e6B88519dC3E827e04616Fc9',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.2546',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 36,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.helmet,\n    contractAddress: {\n      97: '',\n      56: '0x9F23658D5f4CEd69282395089B0f8E4dB85C6e79',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.81',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 35,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.btcst,\n    contractAddress: {\n      97: '',\n      56: '0xB6fd2724cc9c90DD31DA35DbDf0300009dceF97d',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.011574',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 34,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bscx,\n    contractAddress: {\n      97: '',\n      56: '0x108BFE84Ca8BCe0741998cb0F60d313823cEC143',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.17361',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 33,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ten,\n    contractAddress: {\n      97: '',\n      56: '0x4A26b082B432B060B1b00A84eE4E823F04a6f69a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.05787',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 32,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.balbt,\n    contractAddress: {\n      97: '',\n      56: '0x3cc08B7C6A31739CfEd9d8d38b484FDb245C79c8',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.4166',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 31,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.asr,\n    contractAddress: {\n      97: '',\n      56: '0xd18E1AEb349ef0a6727eCe54597D98D263e05CAB',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.01',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 30,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.atm,\n    contractAddress: {\n      97: '',\n      56: '0x68C7d180bD8F7086D91E65A422c59514e4aFD638',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.01',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 29,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.og,\n    contractAddress: {\n      97: '',\n      56: '0xbE65d7e42E05aD2c4ad28769dc9c5b4b6EAff2C7',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.01',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 28,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.reef,\n    contractAddress: {\n      97: '',\n      56: '0x1500fa1afbfe4f4277ed0345cdf12b2c9ca7e139',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '115.74',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 27,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ditto,\n    contractAddress: {\n      97: '',\n      56: '0x624ef5C2C6080Af188AF96ee5B3160Bb28bb3E02',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.01157',\n    sortOrder: 999,\n    isFinished: false,\n  },\n  {\n    sousId: 26,\n    stakingToken: serializedTokens.twt,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0x0554a5D083Abf2f056ae3F6029e1714B9A655174',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.248',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 24,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.juv,\n    contractAddress: {\n      97: '',\n      56: '0x543467B17cA5De50c8BF7285107A36785Ab57E56',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.02',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 25,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.psg,\n    contractAddress: {\n      97: '',\n      56: '0x65aFEAFaec49F23159e897EFBDCe19D94A86A1B6',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.02',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 21,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.vai,\n    contractAddress: {\n      97: '',\n      56: '0x1AD34D8d4D79ddE88c9B6b8490F8fC67831f2CAe',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.104',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 20,\n    stakingToken: serializedTokens.bnb,\n    earningToken: serializedTokens.hulktoken,\n    contractAddress: {\n      97: '',\n      56: '0x555Ea72d7347E82C614C16f005fA91cAf06DCB5a',\n    },\n    poolCategory: PoolCategory.BINANCE,\n    harvest: true,\n    tokenPerBlock: '0.5',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 19,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.bnb,\n    contractAddress: {\n      97: '',\n      56: '0x326D754c64329aD7cb35744770D56D0E1f3B3124',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.0041',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 18,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.blink,\n    contractAddress: {\n      97: '',\n      56: '0x42Afc29b2dEa792974d1e9420696870f1Ca6d18b',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '23.14',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 17,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.blink,\n    contractAddress: {\n      97: '',\n      56: '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '23.14',\n    sortOrder: 999,\n    isFinished: true,\n    enableEmergencyWithdraw: true,\n  },\n  {\n    sousId: 16,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.unfi,\n    contractAddress: {\n      97: '',\n      56: '0xFb1088Dae0f03C5123587d2babb3F307831E6367',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.02893',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 15,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.twt,\n    contractAddress: {\n      97: '',\n      56: '0x9c4EBADa591FFeC4124A7785CAbCfb7068fED2fb',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '5',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 14,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.hard,\n    contractAddress: {\n      97: '',\n      56: '0x90F995b9d46b32c4a1908A8c6D0122e392B3Be97',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.346',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 13,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.broobee,\n    contractAddress: {\n      97: '',\n      56: '0xdc8c45b7F3747Ca9CaAEB3fa5e0b5FCE9430646b',\n    },\n    poolCategory: PoolCategory.COMMUNITY,\n    harvest: true,\n    tokenPerBlock: '12.5',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 12,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.stax,\n    contractAddress: {\n      97: '',\n      56: '0xFF02241a2A1d2a7088A344309400E9fE74772815',\n    },\n    poolCategory: PoolCategory.COMMUNITY,\n    harvest: true,\n    tokenPerBlock: '0.2',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 11,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.nar,\n    contractAddress: {\n      97: '',\n      56: '0xDc938BA1967b06d666dA79A7B1E31a8697D1565E',\n    },\n    poolCategory: PoolCategory.COMMUNITY,\n    harvest: true,\n    tokenPerBlock: '1',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 10,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.nya,\n    contractAddress: {\n      97: '',\n      56: '0x07a0A5B67136d40F4d7d95Bc8e0583bafD7A81b9',\n    },\n    poolCategory: PoolCategory.COMMUNITY,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '10',\n    isFinished: true,\n  },\n  {\n    sousId: 9,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ctk,\n    contractAddress: {\n      97: '',\n      56: '0x21A9A53936E812Da06B7623802DEc9A1f94ED23a',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.5',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 8,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.twt,\n    contractAddress: {\n      97: '',\n      56: '0xe7f9A439Aa7292719aC817798DDd1c4D35934aAF',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '20',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 7,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.inj,\n    contractAddress: {\n      97: '',\n      56: '0xcec2671C81a0Ecf7F8Ee796EFa6DBDc5Cb062693',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    tokenPerBlock: '0.25',\n    sortOrder: 999,\n    isFinished: true,\n  },\n  {\n    sousId: 248,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ccar,\n    contractAddress: {\n      97: '',\n      56: '0x9e31aef040941E67356519f44bcA07c5f82215e5',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    sortOrder: 999,\n    tokenPerBlock: '0.6093',\n  },\n  {\n    sousId: 262,\n    stakingToken: serializedTokens.hulktoken,\n    earningToken: serializedTokens.ach,\n    contractAddress: {\n      97: '',\n      56: '0xD5668e936B951292Ddf8c84553CC58F85948F816',\n    },\n    poolCategory: PoolCategory.CORE,\n    harvest: true,\n    enableEmergencyWithdraw: true,\n    sortOrder: 999,\n    tokenPerBlock: '7.502',\n  },\n].filter((p) => !!p.contractAddress[defaultChainId])\n\nexport default pools\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/wallet/hooks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/hooks/useFarmsWithBalance.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useHarvestFarm.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/estimateGas.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/farms.ts",["802","803","804","805"],"import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from '../../config'\nimport getGasPrice from '../getGasPrice'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract: any, pid: any, amount: any, affiliateAddress: string) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.deposit(pid, value, affiliateAddress)\n}\n\nexport const unstakeFarm = async (masterChefContract: any, pid: any, amount: any) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.withdraw(pid, value)\n}\n\nexport const harvestFarm = async (masterChefContract: any, pid: any, affiliateAddress: string) => {\n  return masterChefContract.deposit(pid, '0', affiliateAddress)\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getGasPrice.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTokenBalance.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/FarmList.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useApproveFarm.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useCatchTxError.tsx",["806","807","808"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useCallWithGasPrice.ts",["809"],"import { useCallback } from 'react'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Contract, CallOverrides } from '@ethersproject/contracts'\nimport get from 'lodash/get'\nimport { useGasPrice } from '../state/user/hooks'\n\nexport default function useCallWithGasPrice() {\n  const gasPrice = useGasPrice()\n\n  /**\n   * Perform a contract call with a gas price returned from useGasPrice\n   * @param contract Used to perform the call\n   * @param methodName The name of the method called\n   * @param methodArgs An array of arguments to pass to the method\n   * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n   * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n   */\n  const callWithGasPrice = useCallback(\n    async (\n      contract: Contract,\n      methodName: string,\n      methodArgs: any[] = [],\n      overrides: CallOverrides | null = null,\n    ): Promise<TransactionResponse> => {\n      // Sentry.addBreadcrumb({\n      //   type: 'Transaction',\n      //   message: `Call with gas price: ${gasPrice}`,\n      //   data: {\n      //     contractAddress: contract.address,\n      //     methodName,\n      //     methodArgs,\n      //     overrides,\n      //   },\n      // })\n      const contractMethod = get(contract, methodName)\n      const hasManualGasPriceOverride = overrides?.gasPrice\n\n      const tx = await contractMethod(\n        ...methodArgs,\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\n      )\n\n      if (tx) {\n        console.log(tx)\n        // Sentry.addBreadcrumb({\n        //   type: 'Transaction',\n        //   message: `Transaction sent: ${tx.hash}`,\n        //   data: {\n        //     hash: tx.hash,\n        //     from: tx.from,\n        //     gasLimit: tx.gasLimit?.toString(),\n        //     nonce: tx.nonce,\n        //   },\n        // })\n      }\n\n      return tx\n    },\n    [gasPrice],\n  )\n\n  return { callWithGasPrice }\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useUnstakeFarms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/sentry.ts",["810","811"],"\nconst assignError = (maybeError: any) => {\n  if (typeof maybeError === 'string') {\n    return new Error(maybeError)\n  }\n  if (typeof maybeError === 'object') {\n    const error = new Error(maybeError?.message ?? String(maybeError))\n    if (maybeError?.stack) {\n      error.stack = maybeError.stack\n    }\n    if (maybeError?.code) {\n      error.name = maybeError.code\n    }\n    return error\n  }\n  return maybeError\n}\n\nexport const isUserRejected = (err: any) => {\n  // provider user rejected error code\n  return typeof err === 'object' && 'code' in err && err.code === 4001\n}\n\nconst ENABLED_LOG = false\n\nexport const logError = (error: Error | unknown) => {\n  if (ENABLED_LOG) {\n    if (error instanceof Error) {\n      console.error(error)\n    } else {\n      console.log(error)\n      // Sentry.captureException(assignError(error), error)\n    }\n  }\n  console.error(error)\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useStakeFarms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/useTranslation.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/Provider.tsx",["812"],"import React, { createContext, useCallback, useEffect, useState } from 'react'\nimport memoize from 'lodash/memoize'\nimport { ContextApi, ProviderState, TranslateFunction } from './types'\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers'\nimport { EN, languages } from '../../config/localisation/languages'\nimport translations from '../../config/localisation/translations.json'\nimport { Language } from '../../config/constants/types'\n\nconst initialState: ProviderState = {\n  isFetching: true,\n  currentLanguage: EN,\n}\n\nconst includesVariableRegex = new RegExp(/%\\S+?%/, 'gm')\n\nconst translatedTextIncludesVariable = memoize((translatedText: string): boolean => {\n  return !!translatedText?.match(includesVariableRegex)\n})\n\n// Export the translations directly\nexport const languageMap = new Map<Language['locale'], Record<string, string>>()\nlanguageMap.set(EN.locale, translations)\n\n// @ts-ignore\nexport const LanguageContext = createContext<ContextApi>(undefined)\n\nexport const LanguageProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState<ProviderState>(() => {\n\n    return {\n      ...initialState,\n      currentLanguage: EN,\n    }\n  })\n  const { currentLanguage } = state\n\n  useEffect(() => {\n    const fetchInitialLocales = async () => {\n      const codeFromStorage = getLanguageCodeFromLS()\n\n      if (codeFromStorage !== EN.locale) {\n        const enLocale = languageMap.get(EN.locale)\n        const currentLocale = await fetchLocale(codeFromStorage)\n        if (currentLocale) {\n          languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\n        }\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n      }))\n    }\n\n    fetchInitialLocales()\n  }, [setState])\n\n  const setLanguage = useCallback(async (language: Language) => {\n    if (!languageMap.has(language.locale)) {\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: true,\n      }))\n\n      const locale = await fetchLocale(language.locale)\n      if (locale) {\n        const enLocale = languageMap.get(EN.locale)\n        // Merge the EN locale to ensure that any locale fetched has all the keys\n        languageMap.set(language.locale, { ...enLocale, ...locale })\n      }\n\n      localStorage?.setItem(LS_KEY, language.locale)\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    } else {\n      localStorage?.setItem(LS_KEY, language.locale)\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    }\n  }, [])\n\n  const translate: TranslateFunction = useCallback(\n    (key: string, data) => {\n      const translationSet = languageMap.get(currentLanguage.locale) ?? languageMap.get(EN.locale)\n      const translatedText = translationSet?.[key] || key\n\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\n      const includesVariable = translatedTextIncludesVariable(translatedText)\n\n      if (includesVariable && data) {\n        let interpolatedText = translatedText\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\n        })\n\n        return interpolatedText\n      }\n\n      return translatedText\n    },\n    [currentLanguage],\n  )\n\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/PairImage.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/index.ts",["813"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchFarms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchMasterChefData.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/getFarmsPrices.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchFarmUser.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPublicFarmData.ts",[],{"ruleId":"814","replacedBy":"815"},{"ruleId":"816","replacedBy":"817"},{"ruleId":"818","replacedBy":"819"},{"ruleId":"820","replacedBy":"821"},{"ruleId":"822","replacedBy":"823"},{"ruleId":"824","severity":1,"message":"825","line":2,"column":50,"nodeType":"826","messageId":"827","endLine":2,"endColumn":61},{"ruleId":"828","severity":1,"message":"829","line":49,"column":7,"nodeType":"830","messageId":"831","endLine":49,"endColumn":18},{"ruleId":"814","replacedBy":"832"},{"ruleId":"816","replacedBy":"833"},{"ruleId":"818","replacedBy":"834"},{"ruleId":"820","replacedBy":"835"},{"ruleId":"822","replacedBy":"836"},{"ruleId":"824","severity":1,"message":"837","line":4,"column":10,"nodeType":"826","messageId":"827","endLine":4,"endColumn":15},{"ruleId":"824","severity":1,"message":"838","line":18,"column":8,"nodeType":"826","messageId":"827","endLine":18,"endColumn":18},{"ruleId":"824","severity":1,"message":"839","line":28,"column":7,"nodeType":"826","messageId":"827","endLine":28,"endColumn":20},{"ruleId":"824","severity":1,"message":"840","line":60,"column":11,"nodeType":"826","messageId":"827","endLine":60,"endColumn":16},{"ruleId":"824","severity":1,"message":"841","line":60,"column":18,"nodeType":"826","messageId":"827","endLine":60,"endColumn":24},{"ruleId":"824","severity":1,"message":"842","line":63,"column":17,"nodeType":"826","messageId":"827","endLine":63,"endColumn":25},{"ruleId":"824","severity":1,"message":"843","line":64,"column":10,"nodeType":"826","messageId":"827","endLine":64,"endColumn":18},{"ruleId":"824","severity":1,"message":"844","line":64,"column":20,"nodeType":"826","messageId":"827","endLine":64,"endColumn":31},{"ruleId":"824","severity":1,"message":"845","line":66,"column":22,"nodeType":"826","messageId":"827","endLine":66,"endColumn":35},{"ruleId":"824","severity":1,"message":"846","line":67,"column":11,"nodeType":"826","messageId":"827","endLine":67,"endColumn":22},{"ruleId":"824","severity":1,"message":"847","line":75,"column":9,"nodeType":"826","messageId":"827","endLine":75,"endColumn":22},{"ruleId":"824","severity":1,"message":"848","line":13,"column":7,"nodeType":"826","messageId":"827","endLine":13,"endColumn":10},{"ruleId":"814","replacedBy":"849"},{"ruleId":"816","replacedBy":"850"},{"ruleId":"818","replacedBy":"851"},{"ruleId":"820","replacedBy":"852"},{"ruleId":"822","replacedBy":"853"},{"ruleId":"824","severity":1,"message":"854","line":4,"column":22,"nodeType":"826","messageId":"827","endLine":4,"endColumn":30},{"ruleId":"824","severity":1,"message":"855","line":99,"column":72,"nodeType":"826","messageId":"827","endLine":99,"endColumn":80},{"ruleId":"824","severity":1,"message":"856","line":108,"column":9,"nodeType":"826","messageId":"827","endLine":108,"endColumn":18},{"ruleId":"824","severity":1,"message":"854","line":3,"column":35,"nodeType":"826","messageId":"827","endLine":3,"endColumn":43},{"ruleId":"824","severity":1,"message":"857","line":1,"column":49,"nodeType":"826","messageId":"827","endLine":1,"endColumn":58},{"ruleId":"824","severity":1,"message":"858","line":5,"column":10,"nodeType":"826","messageId":"827","endLine":5,"endColumn":16},{"ruleId":"824","severity":1,"message":"859","line":12,"column":8,"nodeType":"826","messageId":"827","endLine":12,"endColumn":28},{"ruleId":"824","severity":1,"message":"860","line":3,"column":10,"nodeType":"826","messageId":"827","endLine":3,"endColumn":23},{"ruleId":"824","severity":1,"message":"861","line":3,"column":25,"nodeType":"826","messageId":"827","endLine":3,"endColumn":29},{"ruleId":"824","severity":1,"message":"862","line":5,"column":10,"nodeType":"826","messageId":"827","endLine":5,"endColumn":17},{"ruleId":"824","severity":1,"message":"863","line":2,"column":8,"nodeType":"826","messageId":"827","endLine":2,"endColumn":17},{"ruleId":"824","severity":1,"message":"864","line":5,"column":10,"nodeType":"826","messageId":"827","endLine":5,"endColumn":20},{"ruleId":"824","severity":1,"message":"865","line":10,"column":10,"nodeType":"826","messageId":"827","endLine":10,"endColumn":24},{"ruleId":"824","severity":1,"message":"866","line":12,"column":10,"nodeType":"826","messageId":"827","endLine":12,"endColumn":18},{"ruleId":"824","severity":1,"message":"867","line":17,"column":10,"nodeType":"826","messageId":"827","endLine":17,"endColumn":25},{"ruleId":"824","severity":1,"message":"868","line":17,"column":27,"nodeType":"826","messageId":"827","endLine":17,"endColumn":43},{"ruleId":"824","severity":1,"message":"869","line":17,"column":45,"nodeType":"826","messageId":"827","endLine":17,"endColumn":66},{"ruleId":"824","severity":1,"message":"870","line":51,"column":9,"nodeType":"826","messageId":"827","endLine":51,"endColumn":24},{"ruleId":"824","severity":1,"message":"871","line":58,"column":10,"nodeType":"826","messageId":"827","endLine":58,"endColumn":16},{"ruleId":"824","severity":1,"message":"857","line":1,"column":42,"nodeType":"826","messageId":"827","endLine":1,"endColumn":51},{"ruleId":"824","severity":1,"message":"869","line":11,"column":28,"nodeType":"826","messageId":"827","endLine":11,"endColumn":49},{"ruleId":"824","severity":1,"message":"872","line":39,"column":33,"nodeType":"826","messageId":"827","endLine":39,"endColumn":40},{"ruleId":"824","severity":1,"message":"873","line":4,"column":33,"nodeType":"826","messageId":"827","endLine":4,"endColumn":43},{"ruleId":"824","severity":1,"message":"874","line":4,"column":45,"nodeType":"826","messageId":"827","endLine":4,"endColumn":52},{"ruleId":"824","severity":1,"message":"875","line":4,"column":54,"nodeType":"826","messageId":"827","endLine":4,"endColumn":63},{"ruleId":"824","severity":1,"message":"876","line":28,"column":9,"nodeType":"826","messageId":"827","endLine":28,"endColumn":24},{"ruleId":"824","severity":1,"message":"877","line":4,"column":10,"nodeType":"826","messageId":"827","endLine":4,"endColumn":24},{"ruleId":"828","severity":1,"message":"829","line":70,"column":7,"nodeType":"830","messageId":"831","endLine":70,"endColumn":18},{"ruleId":"824","severity":1,"message":"878","line":98,"column":7,"nodeType":"826","messageId":"827","endLine":98,"endColumn":21},{"ruleId":"824","severity":1,"message":"879","line":67,"column":7,"nodeType":"826","messageId":"827","endLine":67,"endColumn":57},{"ruleId":"824","severity":1,"message":"880","line":13,"column":29,"nodeType":"826","messageId":"827","endLine":13,"endColumn":47},{"ruleId":"828","severity":1,"message":"829","line":47,"column":11,"nodeType":"830","messageId":"831","endLine":47,"endColumn":22},{"ruleId":"824","severity":1,"message":"881","line":73,"column":10,"nodeType":"826","messageId":"827","endLine":73,"endColumn":14},{"ruleId":"824","severity":1,"message":"882","line":79,"column":10,"nodeType":"826","messageId":"827","endLine":79,"endColumn":15},{"ruleId":"828","severity":1,"message":"829","line":88,"column":11,"nodeType":"830","messageId":"831","endLine":88,"endColumn":22},{"ruleId":"828","severity":1,"message":"829","line":101,"column":11,"nodeType":"830","messageId":"831","endLine":101,"endColumn":22},{"ruleId":"828","severity":1,"message":"829","line":109,"column":11,"nodeType":"830","messageId":"831","endLine":109,"endColumn":22},{"ruleId":"828","severity":1,"message":"829","line":128,"column":13,"nodeType":"830","messageId":"831","endLine":128,"endColumn":24},{"ruleId":"828","severity":1,"message":"829","line":141,"column":13,"nodeType":"830","messageId":"831","endLine":141,"endColumn":24},{"ruleId":"828","severity":1,"message":"829","line":159,"column":11,"nodeType":"830","messageId":"831","endLine":159,"endColumn":22},{"ruleId":"828","severity":1,"message":"829","line":23,"column":27,"nodeType":"830","messageId":"831","endLine":23,"endColumn":38},{"ruleId":"828","severity":1,"message":"829","line":24,"column":27,"nodeType":"830","messageId":"831","endLine":24,"endColumn":38},{"ruleId":"824","severity":1,"message":"883","line":11,"column":52,"nodeType":"826","messageId":"827","endLine":11,"endColumn":64},{"ruleId":"828","severity":1,"message":"829","line":40,"column":30,"nodeType":"830","messageId":"831","endLine":40,"endColumn":41},{"ruleId":"828","severity":1,"message":"829","line":45,"column":30,"nodeType":"830","messageId":"831","endLine":45,"endColumn":41},{"ruleId":"828","severity":1,"message":"829","line":52,"column":30,"nodeType":"830","messageId":"831","endLine":52,"endColumn":41},{"ruleId":"828","severity":1,"message":"829","line":129,"column":13,"nodeType":"830","messageId":"831","endLine":129,"endColumn":24},{"ruleId":"824","severity":1,"message":"884","line":18,"column":34,"nodeType":"826","messageId":"827","endLine":18,"endColumn":41},{"ruleId":"828","severity":1,"message":"829","line":33,"column":17,"nodeType":"830","messageId":"831","endLine":33,"endColumn":28},{"ruleId":"828","severity":1,"message":"829","line":55,"column":25,"nodeType":"830","messageId":"831","endLine":55,"endColumn":36},{"ruleId":"824","severity":1,"message":"885","line":89,"column":25,"nodeType":"826","messageId":"827","endLine":89,"endColumn":26},{"ruleId":"824","severity":1,"message":"886","line":33,"column":7,"nodeType":"826","messageId":"827","endLine":33,"endColumn":43},{"ruleId":"828","severity":1,"message":"829","line":60,"column":7,"nodeType":"830","messageId":"831","endLine":60,"endColumn":18},{"ruleId":"828","severity":1,"message":"829","line":27,"column":39,"nodeType":"830","messageId":"831","endLine":27,"endColumn":52},{"ruleId":"828","severity":1,"message":"829","line":39,"column":45,"nodeType":"830","messageId":"831","endLine":39,"endColumn":58},{"ruleId":"828","severity":1,"message":"829","line":49,"column":45,"nodeType":"830","messageId":"831","endLine":49,"endColumn":58},{"ruleId":"828","severity":1,"message":"829","line":33,"column":3,"nodeType":"830","messageId":"831","endLine":33,"endColumn":16},{"ruleId":"828","severity":1,"message":"829","line":55,"column":11,"nodeType":"830","messageId":"831","endLine":55,"endColumn":24},{"ruleId":"828","severity":1,"message":"829","line":68,"column":5,"nodeType":"830","messageId":"831","endLine":68,"endColumn":18},{"ruleId":"828","severity":1,"message":"829","line":72,"column":5,"nodeType":"830","messageId":"831","endLine":72,"endColumn":18},{"ruleId":"828","severity":1,"message":"829","line":217,"column":15,"nodeType":"830","messageId":"831","endLine":217,"endColumn":28},{"ruleId":"828","severity":1,"message":"829","line":146,"column":7,"nodeType":"830","messageId":"831","endLine":146,"endColumn":20},{"ruleId":"824","severity":1,"message":"887","line":1,"column":10,"nodeType":"826","messageId":"827","endLine":1,"endColumn":18},{"ruleId":"824","severity":1,"message":"888","line":2,"column":8,"nodeType":"826","messageId":"827","endLine":2,"endColumn":14},{"ruleId":"824","severity":1,"message":"889","line":5,"column":7,"nodeType":"826","messageId":"827","endLine":5,"endColumn":14},{"ruleId":"824","severity":1,"message":"890","line":10,"column":9,"nodeType":"826","messageId":"827","endLine":10,"endColumn":17},{"ruleId":"824","severity":1,"message":"890","line":17,"column":9,"nodeType":"826","messageId":"827","endLine":17,"endColumn":17},{"ruleId":"824","severity":1,"message":"890","line":24,"column":9,"nodeType":"826","messageId":"827","endLine":24,"endColumn":17},{"ruleId":"824","severity":1,"message":"891","line":34,"column":11,"nodeType":"826","messageId":"827","endLine":34,"endColumn":12},{"ruleId":"828","severity":1,"message":"829","line":57,"column":9,"nodeType":"830","messageId":"831","endLine":57,"endColumn":20},{"ruleId":"828","severity":1,"message":"829","line":110,"column":17,"nodeType":"830","messageId":"831","endLine":110,"endColumn":28},{"ruleId":"828","severity":1,"message":"829","line":44,"column":9,"nodeType":"830","messageId":"831","endLine":44,"endColumn":20},{"ruleId":"824","severity":1,"message":"892","line":2,"column":7,"nodeType":"826","messageId":"827","endLine":2,"endColumn":18},{"ruleId":"828","severity":1,"message":"829","line":31,"column":7,"nodeType":"830","messageId":"831","endLine":31,"endColumn":18},{"ruleId":"824","severity":1,"message":"893","line":5,"column":14,"nodeType":"826","messageId":"827","endLine":5,"endColumn":23},{"ruleId":"824","severity":1,"message":"859","line":12,"column":8,"nodeType":"826","messageId":"827","endLine":12,"endColumn":28},"lines-around-directive",["894"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","no-console","Unexpected console statement.","MemberExpression","unexpected",["894"],[],[],[],[],"'Image' is defined but never used.","'FlexLayout' is defined but never used.","'getDisplayApr' is assigned a value but never used.","'login' is assigned a value but never used.","'logout' is assigned a value but never used.","'setQuery' is assigned a value but never used.","'viewMode' is assigned a value but never used.","'setViewMode' is assigned a value but never used.","'setSortOption' is assigned a value but never used.","'observerRef' is assigned a value but never used.","'userDataReady' is assigned a value but never used.","'Row' is assigned a value but never used.",["894"],[],[],[],[],"'Skeleton' is defined but never used.","'bnbPrice' is defined but never used.","'farmImage' is assigned a value but never used.","'useEffect' is defined but never used.","'ethers' is defined but never used.","'priceHelperLpsConfig' is defined but never used.","'useRouteMatch' is defined but never used.","'Link' is defined but never used.","'Address' is defined but never used.","'BigNumber' is defined but never used.","'parseUnits' is defined but never used.","'useFarmFromPid' is defined but never used.","'useERC20' is defined but never used.","'formatBigNumber' is defined but never used.","'getBalanceAmount' is defined but never used.","'getFullDisplayBalance' is defined but never used.","'addLiquidityUrl' is assigned a value but never used.","'tokens' is assigned a value but never used.","'loading' is assigned a value but never used.","'IconButton' is defined but never used.","'AddIcon' is defined but never used.","'MinusIcon' is defined but never used.","'TranslateString' is assigned a value but never used.","'defaultChainId' is defined but never used.","'ReferralButton' is assigned a value but never used.","'BSCSCAN_PREFIXES' is assigned a value but never used.","'getHULKSwapAddress' is defined but never used.","'rate' is assigned a value but never used.","'price' is assigned a value but never used.","'shortBalance' is defined but never used.","'chainId' is assigned a value but never used.","'e' is defined but never used.","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","'VaultKey' is defined but never used.","'tokens' is defined but never used.","'options' is assigned a value but never used.","'gasPrice' is assigned a value but never used.","'t' is assigned a value but never used.","'assignError' is assigned a value but never used.","'languages' is defined but never used.","padding-line-between-statements"]