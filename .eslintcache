[{"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/index.tsx":"1","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/Providers.tsx":"2","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/App.tsx":"3","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/PageLoader.tsx":"4","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/style/Global.tsx":"5","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/NotFound.tsx":"6","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/index.ts":"7","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/index.ts":"8","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/index.tsx":"9","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ThemeContext.tsx":"10","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Page.tsx":"11","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/index.ts":"12","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/actions.ts":"13","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/types.ts":"14","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/config.ts":"15","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/Home.tsx":"16","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/Farms.tsx":"17","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/multicall.ts":"18","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useI18n.ts":"19","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Container.tsx":"20","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTheme.ts":"21","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TwitterCard.tsx":"22","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/Divider.tsx":"23","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/FarmCard.tsx":"24","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TotalValueLockedCard.tsx":"25","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeStats.tsx":"26","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/FarmStakingCard.tsx":"27","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/index.ts":"28","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/formatBalance.ts":"29","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/addressHelpers.ts":"30","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Flex.tsx":"31","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmTabButtons/index.tsx":"32","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyButton.tsx":"33","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardActionsContainer.tsx":"34","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CardValue.tsx":"35","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardHeading.tsx":"36","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeHarvestBalance.tsx":"37","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeWalletBalance.tsx":"38","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarmUser.ts":"39","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarms.ts":"40","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/index.ts":"41","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Tags.tsx":"42","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/UnlockButton.tsx":"43","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/farms.ts":"44","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyCalculatorModal.tsx":"45","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx":"46","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/StakeAction.tsx":"47","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/contracts.ts":"48","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Balance.tsx":"49","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/WithdrawModal.tsx":"50","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/DepositModal.tsx":"51","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useContract.ts":"52","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/compoundApyHelpers.ts":"53","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getLiquidityUrlPathParts.ts":"54","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/index.ts":"55","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/index.ts":"56","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/TokenInput.tsx":"57","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/ModalActions.tsx":"58","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/index.ts":"59","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/index.ts":"60","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/index.ts":"61","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/Input.tsx":"62","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/Spacer.tsx":"63","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/DetailsSection.tsx":"64","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/index.ts":"65","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/index.ts":"66","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/ExpandableSectionButton.tsx":"67","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/Label.tsx":"68","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/Timer.tsx":"69","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/PreSale.tsx":"70","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/index.ts":"71","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/PreSale.tsx":"72","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Timeline.tsx":"73","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Form.tsx":"74","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/index.ts":"75","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/usePresale.ts":"76","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ToastContext.tsx":"77","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/index.ts":"78","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/Referral.tsx":"79","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useReferral.ts":"80","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Swap.tsx":"81","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useHulkSwap.ts":"82","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/reducer.ts":"83","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/global/actions.ts":"84","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/reducer.ts":"85","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/reducer.ts":"86","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/reducer.ts":"87","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/getFarmsPrices.ts":"88","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchMasterChefData.ts":"89","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchPublicFarmData.ts":"90","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/actions.ts":"91","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/types.ts":"92","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/actions.ts":"93","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/actions.ts":"94","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/actions.ts":"95","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/bigNumber.ts":"96","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contractHelpers.ts":"97","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/farmsPriceHelpers.ts":"98","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/farmHelpers.ts":"99","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/localStorageOrders.ts":"100","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contracts.ts":"101","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/web3React.ts":"102","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useActiveWeb3React.ts":"103","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/priceHelperLps.ts":"104","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/tokens.ts":"105","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/lists.ts":"106","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/helpers.ts":"107","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useAuth.ts":"108","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/hooks.ts":"109","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useRefreshEffect.ts":"110","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/selectors.ts":"111","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/wallet.ts":"112","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/networks.ts":"113","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useBlockNumber.ts":"114","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/languageContext.tsx":"115","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/translationsContext.ts":"116","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/translateTextHelpers.ts":"117","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/localisation/languages.ts":"118","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/helpers.ts":"119","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useUserAgent.ts":"120","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/updater.ts":"121","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/block/hooks.ts":"122","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/updater.tsx":"123","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/updater.tsx":"124","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/hooks.ts":"125","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/chunkArray.ts":"126","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/retry.ts":"127","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useDebounce.ts":"128","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useFetchListCallback.ts":"129","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useInterval.ts":"130","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useIsWindowVisible.ts":"131","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getTokenList.ts":"132","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/ENS/resolveENSContentHash.ts":"133","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contenthashToUri.ts":"134","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/ENS/parseENSAddress.ts":"135","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/uriToHttp.ts":"136","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useIntersectionObserver.ts":"137","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/apr.ts":"138","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/latinise.ts":"139","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/FarmContext.tsx":"140","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/index.tsx":"141","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Tokens.ts":"142","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/useUserAddedTokens.ts":"143","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/hooks.ts":"144","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/wallet/hooks.ts":"145","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/hooks/useFarmsWithBalance.tsx":"146","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useHarvestFarm.ts":"147","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/index.ts":"148","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/estimateGas.ts":"149","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/farms.ts":"150","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getGasPrice.ts":"151","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTokenBalance.ts":"152","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/FarmList.tsx":"153","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useApproveFarm.ts":"154","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useCatchTxError.tsx":"155","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useCallWithGasPrice.ts":"156","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useUnstakeFarms.ts":"157","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/sentry.ts":"158","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useStakeFarms.ts":"159","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/index.tsx":"160","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/useTranslation.ts":"161","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/Provider.tsx":"162","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/PairImage.tsx":"163","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/index.ts":"164","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchMasterChefData.ts":"165","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPools.ts":"166","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/getPoolsPrices.ts":"167","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPoolsUser.ts":"168","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPublicPoolsData.ts":"169","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/pools.ts":"170","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/index.ts":"171","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/Pools.tsx":"172","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/hooks.ts":"173","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/PoolList.tsx":"174","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/PoolContext.tsx":"175","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/selectors.ts":"176","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolTabButtons/index.tsx":"177","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/PoolCard.tsx":"178","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/CardActionsContainer.tsx":"179","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/DetailsSection.tsx":"180","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/CardHeading.tsx":"181","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/HarvestAction.tsx":"182","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/StakeAction.tsx":"183","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/PairImage.tsx":"184","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/WithdrawModal.tsx":"185","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/DepositModal.tsx":"186","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/PercentButtons.tsx":"187","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/index.tsx":"188","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/useRoiCalculatorReducer.ts":"189","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/RoiCard.tsx":"190","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/RoiCalculatorFooter.tsx":"191","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/BalanceInput.tsx":"192","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/AnimatedArrow.tsx":"193","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/Input.tsx":"194","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/ExpandableButton.tsx":"195","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/styles.tsx":"196","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/types.ts":"197","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Box/index.tsx":"198","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/SVG/index.tsx":"199","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Box/Box.tsx":"200","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Box/Grid.tsx":"201","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/SVG/Pencil.tsx":"202","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Box/Flex.tsx":"203"},{"size":278,"mtime":1620390462404,"results":"204","hashOfConfig":"205"},{"size":1071,"mtime":1653906509355,"results":"206","hashOfConfig":"205"},{"size":3752,"mtime":1663147742500,"results":"207","hashOfConfig":"205"},{"size":397,"mtime":1643802521119,"results":"208","hashOfConfig":"205"},{"size":589,"mtime":1643962053712,"results":"209","hashOfConfig":"205"},{"size":862,"mtime":1653903851134,"results":"210","hashOfConfig":"205"},{"size":35,"mtime":1620390462422,"results":"211","hashOfConfig":"205"},{"size":34,"mtime":1620390462427,"results":"212","hashOfConfig":"205"},{"size":1328,"mtime":1653905469805,"results":"213","hashOfConfig":"205"},{"size":952,"mtime":1653905227374,"results":"214","hashOfConfig":"205"},{"size":426,"mtime":1620390462379,"results":"215","hashOfConfig":"205"},{"size":3306,"mtime":1653980810961,"results":"216","hashOfConfig":"205"},{"size":365,"mtime":1653822420435,"results":"217","hashOfConfig":"218"},{"size":4881,"mtime":1654180629037,"results":"219","hashOfConfig":"205"},{"size":1859,"mtime":1663147755116,"results":"220","hashOfConfig":"205"},{"size":2241,"mtime":1653905410814,"results":"221","hashOfConfig":"205"},{"size":7030,"mtime":1658399343523,"results":"222","hashOfConfig":"205"},{"size":1921,"mtime":1653921310166,"results":"223","hashOfConfig":"205"},{"size":566,"mtime":1620390462401,"results":"224","hashOfConfig":"205"},{"size":321,"mtime":1643887946961,"results":"225","hashOfConfig":"205"},{"size":374,"mtime":1653904099262,"results":"226","hashOfConfig":"205"},{"size":1664,"mtime":1655913110577,"results":"227","hashOfConfig":"205"},{"size":193,"mtime":1620390462417,"results":"228","hashOfConfig":"218"},{"size":6462,"mtime":1658399517656,"results":"229","hashOfConfig":"205"},{"size":2420,"mtime":1655926479164,"results":"230","hashOfConfig":"205"},{"size":3172,"mtime":1655926718417,"results":"231","hashOfConfig":"205"},{"size":5993,"mtime":1655913550145,"results":"232","hashOfConfig":"205"},{"size":7249,"mtime":1658218661709,"results":"233","hashOfConfig":"205"},{"size":2896,"mtime":1653841722530,"results":"234","hashOfConfig":"205"},{"size":971,"mtime":1653908072572,"results":"235","hashOfConfig":"205"},{"size":319,"mtime":1653908519124,"results":"236","hashOfConfig":"205"},{"size":1656,"mtime":1657033798037,"results":"237","hashOfConfig":"205"},{"size":2724,"mtime":1657030687298,"results":"238","hashOfConfig":"205"},{"size":5782,"mtime":1653924809311,"results":"239","hashOfConfig":"205"},{"size":1194,"mtime":1644650992887,"results":"240","hashOfConfig":"205"},{"size":1272,"mtime":1653979987182,"results":"241","hashOfConfig":"205"},{"size":632,"mtime":1653903774492,"results":"242","hashOfConfig":"205"},{"size":633,"mtime":1653903794421,"results":"243","hashOfConfig":"205"},{"size":3148,"mtime":1653927018692,"results":"244","hashOfConfig":"205"},{"size":2242,"mtime":1654004506534,"results":"245","hashOfConfig":"205"},{"size":1840,"mtime":1653824635341,"results":"246","hashOfConfig":"205"},{"size":824,"mtime":1653904600444,"results":"247","hashOfConfig":"205"},{"size":528,"mtime":1653903739013,"results":"248","hashOfConfig":"205"},{"size":2335,"mtime":1657105952391,"results":"249","hashOfConfig":"205"},{"size":5211,"mtime":1653909152461,"results":"250","hashOfConfig":"251"},{"size":3364,"mtime":1657019627560,"results":"252","hashOfConfig":"205"},{"size":2670,"mtime":1653983707968,"results":"253","hashOfConfig":"205"},{"size":859,"mtime":1657106172425,"results":"254","hashOfConfig":"205"},{"size":1141,"mtime":1643802521301,"results":"255","hashOfConfig":"218"},{"size":3250,"mtime":1655909528168,"results":"256","hashOfConfig":"205"},{"size":3347,"mtime":1655909528160,"results":"257","hashOfConfig":"205"},{"size":3126,"mtime":1653903244795,"results":"258","hashOfConfig":"205"},{"size":6340,"mtime":1657027633672,"results":"259","hashOfConfig":"205"},{"size":555,"mtime":1653897531474,"results":"260","hashOfConfig":"205"},{"size":40,"mtime":1620390462376,"results":"261","hashOfConfig":"205"},{"size":42,"mtime":1620390462372,"results":"262","hashOfConfig":"205"},{"size":2084,"mtime":1643802521448,"results":"263","hashOfConfig":"205"},{"size":797,"mtime":1620390462372,"results":"264","hashOfConfig":"205"},{"size":4975,"mtime":1653907643070,"results":"265","hashOfConfig":"205"},{"size":138,"mtime":1655909160669,"results":"266","hashOfConfig":"205"},{"size":36,"mtime":1620390462374,"results":"267","hashOfConfig":"205"},{"size":1135,"mtime":1657024300674,"results":"268","hashOfConfig":"205"},{"size":722,"mtime":1620390462374,"results":"269","hashOfConfig":"205"},{"size":2333,"mtime":1653910250999,"results":"270","hashOfConfig":"205"},{"size":53,"mtime":1620390462368,"results":"271","hashOfConfig":"205"},{"size":35,"mtime":1620390462370,"results":"272","hashOfConfig":"218"},{"size":987,"mtime":1653904384956,"results":"273","hashOfConfig":"205"},{"size":478,"mtime":1620390462370,"results":"274","hashOfConfig":"218"},{"size":2370,"mtime":1644653670453,"results":"275","hashOfConfig":"205"},{"size":2054,"mtime":1644686577720,"results":"276","hashOfConfig":"205"},{"size":37,"mtime":1643901758376,"results":"277","hashOfConfig":"205"},{"size":2181,"mtime":1653903913407,"results":"278","hashOfConfig":"205"},{"size":2297,"mtime":1643963355777,"results":"279","hashOfConfig":"205"},{"size":7889,"mtime":1655907598905,"results":"280","hashOfConfig":"205"},{"size":6174,"mtime":1653927879477,"results":"281","hashOfConfig":"205"},{"size":10769,"mtime":1653906004222,"results":"282","hashOfConfig":"205"},{"size":1283,"mtime":1644226182692,"results":"283","hashOfConfig":"205"},{"size":38,"mtime":1644230850736,"results":"284","hashOfConfig":"205"},{"size":6626,"mtime":1653894193726,"results":"285","hashOfConfig":"205"},{"size":962,"mtime":1657104178713,"results":"286","hashOfConfig":"205"},{"size":5067,"mtime":1653903824637,"results":"287","hashOfConfig":"205"},{"size":5940,"mtime":1653905976634,"results":"288","hashOfConfig":"205"},{"size":6242,"mtime":1652791704283,"results":"289","hashOfConfig":"205"},{"size":402,"mtime":1653828895839,"results":"290","hashOfConfig":"205"},{"size":2880,"mtime":1652791704293,"results":"291","hashOfConfig":"205"},{"size":9274,"mtime":1653982047005,"results":"292","hashOfConfig":"205"},{"size":3958,"mtime":1652791704288,"results":"293","hashOfConfig":"205"},{"size":3857,"mtime":1658399761957,"results":"294","hashOfConfig":"205"},{"size":2200,"mtime":1653916819523,"results":"295","hashOfConfig":"205"},{"size":1544,"mtime":1653922057042,"results":"296","hashOfConfig":"205"},{"size":3598,"mtime":1653982047012,"results":"297","hashOfConfig":"205"},{"size":14824,"mtime":1653981478784,"results":"298","hashOfConfig":"205"},{"size":1160,"mtime":1652791704281,"results":"299","hashOfConfig":"205"},{"size":1232,"mtime":1653829157202,"results":"300","hashOfConfig":"205"},{"size":1687,"mtime":1652791704285,"results":"301","hashOfConfig":"205"},{"size":571,"mtime":1652791704303,"results":"302","hashOfConfig":"205"},{"size":2755,"mtime":1653908049421,"results":"303","hashOfConfig":"205"},{"size":768,"mtime":1653981478793,"results":"304","hashOfConfig":"205"},{"size":381,"mtime":1652791704310,"results":"305","hashOfConfig":"205"},{"size":4285,"mtime":1652791704315,"results":"306","hashOfConfig":"205"},{"size":1822,"mtime":1653841722535,"results":"307","hashOfConfig":"205"},{"size":1046,"mtime":1653904223219,"results":"308","hashOfConfig":"205"},{"size":950,"mtime":1653825402739,"results":"309","hashOfConfig":"205"},{"size":893,"mtime":1653904965165,"results":"310","hashOfConfig":"251"},{"size":46911,"mtime":1654180136170,"results":"311","hashOfConfig":"205"},{"size":788,"mtime":1653906089790,"results":"312","hashOfConfig":"205"},{"size":1125,"mtime":1653904271305,"results":"313","hashOfConfig":"205"},{"size":5012,"mtime":1653904212315,"results":"314","hashOfConfig":"205"},{"size":4535,"mtime":1658218496861,"results":"315","hashOfConfig":"205"},{"size":841,"mtime":1653828574556,"results":"316","hashOfConfig":"205"},{"size":5581,"mtime":1658216468140,"results":"317","hashOfConfig":"205"},{"size":2198,"mtime":1653893890471,"results":"318","hashOfConfig":"205"},{"size":840,"mtime":1653824635304,"results":"319","hashOfConfig":"205"},{"size":821,"mtime":1653826504580,"results":"320","hashOfConfig":"205"},{"size":3152,"mtime":1653904099265,"results":"321","hashOfConfig":"205"},{"size":404,"mtime":1620390462394,"results":"322","hashOfConfig":"205"},{"size":1636,"mtime":1653859596212,"results":"323","hashOfConfig":"205"},{"size":3061,"mtime":1653894283995,"results":"324","hashOfConfig":"205"},{"size":641,"mtime":1653905011220,"results":"325","hashOfConfig":"205"},{"size":205,"mtime":1652791704212,"results":"326","hashOfConfig":"205"},{"size":2981,"mtime":1653904388985,"results":"327","hashOfConfig":"205"},{"size":1248,"mtime":1653828574539,"results":"328","hashOfConfig":"205"},{"size":8613,"mtime":1652791704291,"results":"329","hashOfConfig":"205"},{"size":3459,"mtime":1653839180444,"results":"330","hashOfConfig":"205"},{"size":7050,"mtime":1653828895834,"results":"331","hashOfConfig":"205"},{"size":525,"mtime":1652791704286,"results":"332","hashOfConfig":"205"},{"size":1821,"mtime":1652791704290,"results":"333","hashOfConfig":"205"},{"size":711,"mtime":1652791704186,"results":"334","hashOfConfig":"205"},{"size":1994,"mtime":1653827374222,"results":"335","hashOfConfig":"205"},{"size":642,"mtime":1652791704198,"results":"336","hashOfConfig":"205"},{"size":796,"mtime":1652791704204,"results":"337","hashOfConfig":"205"},{"size":2498,"mtime":1652791704313,"results":"338","hashOfConfig":"205"},{"size":1709,"mtime":1652791704301,"results":"339","hashOfConfig":"205"},{"size":1449,"mtime":1652791704307,"results":"340","hashOfConfig":"205"},{"size":376,"mtime":1652791704300,"results":"341","hashOfConfig":"205"},{"size":815,"mtime":1652791704318,"results":"342","hashOfConfig":"205"},{"size":1516,"mtime":1652791704194,"results":"343","hashOfConfig":"205"},{"size":2057,"mtime":1653908980886,"results":"344","hashOfConfig":"205"},{"size":239,"mtime":1653904248152,"results":"345","hashOfConfig":"205"},{"size":138,"mtime":1652791704157,"results":"346","hashOfConfig":"205"},{"size":17596,"mtime":1653982046995,"results":"347","hashOfConfig":"205"},{"size":6272,"mtime":1653825402731,"results":"348","hashOfConfig":"205"},{"size":661,"mtime":1653904257215,"results":"349","hashOfConfig":"205"},{"size":8092,"mtime":1653841211758,"results":"350","hashOfConfig":"205"},{"size":5222,"mtime":1653839367739,"results":"351","hashOfConfig":"205"},{"size":2148,"mtime":1655925861799,"results":"352","hashOfConfig":"205"},{"size":1355,"mtime":1653928095097,"results":"353","hashOfConfig":"205"},{"size":54,"mtime":1652791704306,"results":"354","hashOfConfig":"205"},{"size":1975,"mtime":1652791704305,"results":"355","hashOfConfig":"205"},{"size":940,"mtime":1656608342559,"results":"356","hashOfConfig":"205"},{"size":528,"mtime":1653841722532,"results":"357","hashOfConfig":"251"},{"size":2630,"mtime":1655926705591,"results":"358","hashOfConfig":"205"},{"size":1430,"mtime":1653906216867,"results":"359","hashOfConfig":"205"},{"size":721,"mtime":1653905256410,"results":"360","hashOfConfig":"205"},{"size":5716,"mtime":1656585384448,"results":"361","hashOfConfig":"205"},{"size":2033,"mtime":1653826504571,"results":"362","hashOfConfig":"205"},{"size":463,"mtime":1652791704168,"results":"363","hashOfConfig":"205"},{"size":872,"mtime":1652791704316,"results":"364","hashOfConfig":"205"},{"size":569,"mtime":1653924357525,"results":"365","hashOfConfig":"205"},{"size":137,"mtime":1650569868470,"results":"366","hashOfConfig":"205"},{"size":322,"mtime":1650569868470,"results":"367","hashOfConfig":"205"},{"size":3602,"mtime":1653906509351,"results":"368","hashOfConfig":"205"},{"size":847,"mtime":1653980670987,"results":"369","hashOfConfig":"205"},{"size":7240,"mtime":1656610377370,"results":"370","hashOfConfig":"205"},{"size":2200,"mtime":1657019009478,"results":"371","hashOfConfig":"205"},{"size":2380,"mtime":1657020285796,"results":"372","hashOfConfig":"205"},{"size":3957,"mtime":1656610697362,"results":"373","hashOfConfig":"205"},{"size":3148,"mtime":1653980951654,"results":"374","hashOfConfig":"205"},{"size":1544,"mtime":1653980951650,"results":"375","hashOfConfig":"205"},{"size":1511,"mtime":1657106107954,"results":"376","hashOfConfig":"205"},{"size":33,"mtime":1653982198289,"results":"377","hashOfConfig":"205"},{"size":7036,"mtime":1658400044964,"results":"378","hashOfConfig":"205"},{"size":4278,"mtime":1658216664505,"results":"379","hashOfConfig":"205"},{"size":1430,"mtime":1653982196161,"results":"380","hashOfConfig":"205"},{"size":138,"mtime":1653982046986,"results":"381","hashOfConfig":"205"},{"size":5576,"mtime":1657184845044,"results":"382","hashOfConfig":"205"},{"size":1452,"mtime":1655907607774,"results":"383","hashOfConfig":"205"},{"size":6392,"mtime":1658400158430,"results":"384","hashOfConfig":"205"},{"size":5782,"mtime":1653982207641,"results":"385","hashOfConfig":"205"},{"size":2333,"mtime":1653910250999,"results":"386","hashOfConfig":"205"},{"size":1272,"mtime":1653982682932,"results":"387","hashOfConfig":"205"},{"size":4613,"mtime":1656183909199,"results":"388","hashOfConfig":"205"},{"size":2541,"mtime":1655907619117,"results":"389","hashOfConfig":"205"},{"size":956,"mtime":1653982787980,"results":"390","hashOfConfig":"205"},{"size":3460,"mtime":1655909528165,"results":"391","hashOfConfig":"205"},{"size":3393,"mtime":1655909528175,"results":"392","hashOfConfig":"205"},{"size":850,"mtime":1655909528171,"results":"393","hashOfConfig":"205"},{"size":8764,"mtime":1657035310022,"results":"394","hashOfConfig":"205"},{"size":10529,"mtime":1657027343547,"results":"395","hashOfConfig":"205"},{"size":5328,"mtime":1657035480885,"results":"396","hashOfConfig":"205"},{"size":5494,"mtime":1657030957861,"results":"397","hashOfConfig":"205"},{"size":1692,"mtime":1657025305197,"results":"398","hashOfConfig":"205"},{"size":1488,"mtime":1657030721682,"results":"399","hashOfConfig":"205"},{"size":1548,"mtime":1657025982976,"results":"400","hashOfConfig":"205"},{"size":981,"mtime":1657026148747,"results":"401","hashOfConfig":"205"},{"size":1165,"mtime":1657030535101,"results":"402","hashOfConfig":"205"},{"size":841,"mtime":1657027084958,"results":"403","hashOfConfig":"205"},{"size":187,"mtime":1650569867808,"results":"404","hashOfConfig":"205"},{"size":49,"mtime":1657026898820,"results":"405","hashOfConfig":"205"},{"size":277,"mtime":1650569867807,"results":"406","hashOfConfig":"205"},{"size":252,"mtime":1650569867807,"results":"407","hashOfConfig":"205"},{"size":505,"mtime":1657026926116,"results":"408","hashOfConfig":"205"},{"size":236,"mtime":1650569867807,"results":"409","hashOfConfig":"205"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},"ifsfno",{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"412"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},"mydm4p",{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"412"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"412"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"461"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"412"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"412"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"412"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"412"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"412"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"412"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"492"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},"26wpob",{"filePath":"514","messages":"515","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"412"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"412"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"412"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"438"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"412"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"412"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"412"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"412"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"412"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"412"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651","usedDeprecatedRules":"412"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"412"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"412"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"412"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725","usedDeprecatedRules":"412"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"412"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"739","usedDeprecatedRules":"412"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"513"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"412"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"412"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758","usedDeprecatedRules":"412"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"767","usedDeprecatedRules":"412"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"776","usedDeprecatedRules":"412"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779","usedDeprecatedRules":"412"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"790","usedDeprecatedRules":"412"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"412"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"412"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"813","usedDeprecatedRules":"412"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816","usedDeprecatedRules":"412"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"821","usedDeprecatedRules":"412"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"824","usedDeprecatedRules":"412"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"835","usedDeprecatedRules":"412"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"846","usedDeprecatedRules":"412"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"849","messages":"850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"851","messages":"852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"412"},"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/index.tsx",[],["861","862","863","864","865"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/Providers.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/App.tsx",["866","867","868"],"import React, { useEffect, Suspense, lazy, useContext, useCallback } from 'react'\r\nimport { BrowserRouter as Router, Route, Switch, useLocation } from 'react-router-dom'\r\nimport { isAddress } from 'ethers/lib/utils'\r\nimport { ResetCSS, ToastContainer } from '@hulkfinance/hulk-uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport { ToastContext } from './contexts/ToastContext'\r\nimport useReferral from './hooks/useReferral'\r\nimport useActiveWeb3React from './hooks/useActiveWeb3React'\r\n\r\nimport ListsUpdater from './state/lists/updater'\r\nimport MulticallUpdater from './state/multicall/updater'\r\nimport TransactionUpdater from './state/transactions/updater'\r\nimport useAuth from './hooks/useAuth'\r\nimport { usePollBlockNumber } from './state/block/hooks'\r\nimport { usePollCoreFarmData } from './state/farms/hooks'\r\nimport useUserAgent from './hooks/useUserAgent'\r\nimport { ConnectorNames } from './utils/web3React'\r\nimport { storageConnectorKey } from './config'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Referral = lazy(() => import('./views/Referral'))\r\nconst PreSale = lazy(() => import('./views/PreSale'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n\r\n  usePollBlockNumber()\r\n  usePollCoreFarmData()\r\n  useUserAgent()\r\n  const { account } = useActiveWeb3React()\r\n  const { login } = useAuth()\r\n  const { onSaveAffiliateAddress } = useReferral()\r\n  const { toasts, removeToast } = useContext(ToastContext)\r\n  useEffect(() => {\r\n    const provider = localStorage.getItem(storageConnectorKey)\r\n    if (provider) {\r\n      console.log(provider)\r\n      login(provider || ConnectorNames.Injected)\r\n    }\r\n  }, [login])\r\n\r\n  // useFetchPublicData()\r\n\r\n  const saveAffiliateHandler = useCallback((search: string) => {\r\n    if (search !== '') {\r\n      const searchSplit = search.split('=')\r\n      if (searchSplit.length > 1) {\r\n        const affiliateAddress = searchSplit[1]\r\n        if (isAddress(affiliateAddress) && affiliateAddress !== account) {\r\n          onSaveAffiliateAddress(affiliateAddress)\r\n        }\r\n      }\r\n    }\r\n  }, [account, onSaveAffiliateAddress])\r\n\r\n  useEffect(() => {\r\n    if (window.location.search) {\r\n      saveAffiliateHandler(window.location.search)\r\n    }\r\n  }, [saveAffiliateHandler])\r\n\r\n  return (\r\n    <>\r\n      <ListsUpdater />\r\n      <TransactionUpdater />\r\n      <MulticallUpdater />\r\n      <Router>\r\n        <ResetCSS />\r\n        <GlobalStyle />\r\n        <ToastContainer toasts={toasts} onRemove={removeToast} />\r\n        <Menu>\r\n          <Suspense fallback={<PageLoader />}>\r\n            <Switch>\r\n              <Route path='/' exact>\r\n                <Home />\r\n              </Route>\r\n              {/* <Route path='/pre-sale' exact> */}\r\n              {/*  <PreSale /> */}\r\n              {/* </Route> */}\r\n              <Route path='/farms'>\r\n                <Farms />\r\n              </Route>\r\n              <Route path='/pools'>\r\n                <Pools />\r\n              </Route>\r\n              <Route path='/referral'>\r\n                <Referral />\r\n              </Route>\r\n              {/* 404 */}\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </Suspense>\r\n        </Menu>\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/PageLoader.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/style/Global.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/NotFound.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ThemeContext.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Page.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/actions.ts",[],["869","870","871","872","873"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/types.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Menu/config.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/Home.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/Farms.tsx",["874","875","876","877","878","879","880","881","882","883","884"],"import React, { useEffect, useCallback, useState, useRef, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Image, Heading } from '@hulkfinance/hulk-uikit'\r\nimport { ChainId } from '@hulkfinance/hulk-swap-sdk'\r\nimport { orderBy } from 'lodash'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport useAuth from '../../hooks/useAuth'\r\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from '../../state/user/hooks'\r\nimport { TranslateString } from '../../utils/translateTextHelpers'\r\nimport { getFarmApr } from '../../utils/apr'\r\nimport { isArchivedPid } from '../../utils/farmHelpers'\r\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceHULKBusd } from '../../state/farms/hooks'\r\nimport { latinise } from '../../utils/latinise'\r\nimport { FarmsContext } from '../../contexts/FarmContext'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport FlexLayout from '../../components/layout/Flex'\r\nimport Page from '../../components/layout/Page'\r\nimport FarmList from './FarmList'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr: any, lpRewardsApr: any) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Banner = styled.div`\r\n  width: 100%;\r\n  height: 186px;\r\n  //background-image: url('../../assets/images/home_banner.png');\r\n  background: url('/images/PageBanner.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  background-size: auto 100%;\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`\r\n\r\nconst BannerHeading = styled(Heading)`\r\n  font-size: 48px;\r\n  font-weight: 900;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Farms: React.FC<FarmsProps> = () => {\r\n  const { login, logout } = useAuth()\r\n  const { data: farmsLP, userDataLoaded, poolLength, regularHulkPerBlock } = useFarms()\r\n  const hulkPrice = usePriceHULKBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\r\n  const { account } = useActiveWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const chosenFarmsLength = useRef(0)\r\n  const [isActive, setIsActive] = useState<boolean>(true)\r\n\r\n  usePollFarmsWithUserData(false)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter(\r\n    (farm: any) =>\r\n      // farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid) && (!poolLength || poolLength > farm.pid),\r\n      farm.multiplier !== '0X' && !isArchivedPid(farm.pid) && (!poolLength || poolLength > farm.pid),\r\n  )\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm: any) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay) => {\r\n      let farmsToDisplayWithAPR = farmsToDisplay.map((farm: any) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\r\n        const { hulkRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(\r\n            new BigNumber(farm.poolWeight),\r\n            hulkPrice,\r\n            totalLiquidity,\r\n            farm.lpAddresses[ChainId.BSCTESTNET],\r\n            regularHulkPerBlock || 0,\r\n          )\r\n          : { hulkRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: hulkRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: any) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [hulkPrice, query, isActive, regularHulkPerBlock],\r\n  )\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: any) => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: any) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: any) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: any) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: any) => Number(farm.liquidity), 'desc')\r\n        case 'latest':\r\n          return orderBy(farms, (farm: any) => Number(farm.pid), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    isActive,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n        }\r\n        return farmsCurrentlyVisible\r\n      })\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  return (\r\n    <FarmsContext.Provider value={{ chosenFarmsMemoized }}>\r\n      <Banner>\r\n        <BannerHeading as='h1' mb={0} style={{ textAlign: 'center' }}>\r\n          {TranslateString(10002, 'Stake tokens to earn HULK ')}\r\n        </BannerHeading>\r\n        <Heading as='h2' color='primary' mt='16px' style={{ textAlign: 'center' }}>\r\n          {TranslateString(10000, 'Stake Tokens to Earn HULK')}\r\n        </Heading>\r\n      </Banner>\r\n      <Page>\r\n        <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} isActive={isActive}\r\n                        setIsActive={setIsActive} />\r\n        <FarmList />\r\n      </Page>\r\n    </FarmsContext.Provider>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/multicall.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useI18n.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Container.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTheme.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TwitterCard.tsx",["885"],"import React from 'react'\r\nimport { Card, CardBody, Heading } from '@hulkfinance/hulk-uikit'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport useTheme from '../../../hooks/useTheme'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 100%;\r\n  //height: 600px;\r\n  & > div {\r\n    flex: 1;\r\n    height: 100%; \r\n  }\r\n  [twdiv=\"yes\"] {\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 28px;\r\n  font-weight: 900;\r\n  @media(min-width: 768px) {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const {theme} = useTheme()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody p={40}>\r\n        <CardHeading mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </CardHeading>\r\n        <Wrapper>\r\n          <Timeline\r\n            dataSource={{\r\n              sourceType: 'profile',\r\n              screenName: 'hulk_finance'\r\n            }}\r\n            options={{\r\n              height: '440px',\r\n              chrome: \"transparent, noheader, nofooter\",\r\n              width: \"100%\",\r\n              theme: 'dark',\r\n              borderColor: theme.colors.card,\r\n            }}\r\n          />\r\n        </Wrapper>\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/Divider.tsx",[],["886","887","888","889","890"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/FarmCard.tsx",["891","892","893","894","895"],"import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton, IconButton, CalculateIcon } from '@hulkfinance/hulk-uikit'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\r\nimport { FarmWithStakedValue } from '../../../../state/types'\r\nimport { defaultChainId } from '../../../../config'\r\nimport { getHULKTokenAddress } from '../../../../utils/addressHelpers'\r\nimport { dateFormat, getBscScanLink } from '../../../../utils'\r\n\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\nconst FarmText = styled(Text)`\r\n  font-weight: 400;\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Row = styled(Flex)`\r\n  margin-bottom: 16px;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  hulkPrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  displayApr: string\r\n  account?: string | null\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, hulkPrice, bnbPrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be hulk-bnb.svg, link-bnb.svg, nar-hulk.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = 'bnb-busd'\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 2 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'HULK'\r\n  const farmAPY = parseInt(String(farm.apr || farm.defaultApr))\r\n\r\n  const timeToHarvest = useMemo(() => {\r\n    if (farm.userData?.nextHarvestUntil) {\r\n      return dateFormat(new Date(farm.userData.nextHarvestUntil))\r\n    }\r\n    return '-'\r\n  }, [farm.userData])\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.token.symbol === 'HULK' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier || '1x'}\r\n        depositFee={farm.depositFeeBP}\r\n        token0={farm.token.symbol || ''}\r\n        token1={farm.quoteToken.symbol || ''}\r\n      />\r\n      {!removed && (\r\n        <Row justifyContent='space-between' alignItems='center'>\r\n          <FarmText>{TranslateString(352, 'APR')}:</FarmText>\r\n          <FarmText style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <ApyButton\r\n                variant=\"text-and-button\"\r\n                pid={farm.pid}\r\n                lpSymbol={farm.lpSymbol}\r\n                multiplier={farm.multiplier || '1x'}\r\n                lpLabel={lpLabel}\r\n                addLiquidityUrl=''\r\n                hulkPrice={hulkPrice}\r\n                apr={farmAPY}\r\n                displayApr={farmAPY.toString()}\r\n              />\r\n            ) : (\r\n              `${farmAPY.toString()}%`\r\n            )}\r\n          </FarmText>\r\n        </Row>\r\n      )}\r\n      <Row justifyContent='space-between'>\r\n        <FarmText>{TranslateString(318, 'Earn')}:</FarmText>\r\n        <FarmText>{earnLabel}</FarmText>\r\n      </Row>\r\n      <Row justifyContent='space-between'>\r\n        <FarmText>{TranslateString(10001, 'Deposit Fee')}:</FarmText>\r\n        <FarmText>{(farm.depositFeeBP / 100)}%</FarmText>\r\n      </Row>\r\n      <Row justifyContent='space-between'>\r\n        <FarmText>Harvest Lockup:</FarmText>\r\n        <FarmText>{timeToHarvest}</FarmText>\r\n      </Row>\r\n      <CardActionsContainer farm={farm} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.token.address === getHULKTokenAddress()}\r\n          bscScanAddress={\r\n            farm.token.address === farm.quoteToken.address ?\r\n              getBscScanLink(farm.token.address, 'token', defaultChainId)\r\n              :\r\n              getBscScanLink(farm.lpAddresses[defaultChainId], 'token', defaultChainId)\r\n          }\r\n          totalValueFormated={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={farm.quoteToken.address}\r\n          quoteTokenSymbol={farm.quoteToken.symbol}\r\n          tokenAddresses={farm.token.address}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n// {/*{farmAPY}%*/}\r\n// {/*<IconButton variant='text' ml='4px'>*/}\r\n// {/*  <CalculateIcon width='18px' />*/}\r\n// {/*</IconButton>*/}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/TotalValueLockedCard.tsx",["896"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@hulkfinance/hulk-uikit'\r\nimport CardValue from './CardValue'\r\nimport tvlImage from '../../../assets/images/TVL.png'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport { usePriceHulkBnb, usePriceHULKBusd, useTotalValue } from '../../../state/farms/hooks'\r\n\r\nconst StyledTotalValueLockedCard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  overflow: hidden;\r\n`\r\nconst CardImage = styled.img`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  height: 100%;\r\n  max-height: 208px;\r\n  display: none;\r\n  @media(min-width: 768px) {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst TextItem = styled(Text)`\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 20px;\r\n  justify-content: space-between;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 24px;\r\n  font-weight: 900;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  const busdPrice = usePriceHULKBusd()\r\n  const bnbPrice = usePriceHulkBnb()\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <Card mb={40}>\r\n        <CardBody p={40}>\r\n          <CardHeading mb=\"16px\">\r\n            {TranslateString(999, 'TVL')}\r\n          </CardHeading>\r\n          <>\r\n            <CardValue bold value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n            <Text mt={16} color=\"primary\" fontSize=\"20px\" style={{lineHeight: 1}}>{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n            <CardImage src={tvlImage} alt='TVL'/>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n      <Card style={{flex: 1}}>\r\n        <CardBody p={40}>\r\n          <CardHeading mb=\"16px\">\r\n            HULK LP Worth\r\n          </CardHeading>\r\n          <>\r\n            <Row>\r\n              <TextItem>HULK-BNB</TextItem>\r\n              <TextItem>${bnbPrice.toNumber()}</TextItem>\r\n            </Row>\r\n            <Row>\r\n              <TextItem>HULK-BUSD</TextItem>\r\n              <TextItem>${busdPrice.toNumber()}</TextItem>\r\n            </Row>\r\n          </>\r\n        </CardBody>\r\n      </Card>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeStats.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/FarmStakingCard.tsx",["897","898","899","900"],"import React, { useState, useCallback, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@hulkfinance/hulk-uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { ethers } from 'ethers'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\nimport hulkLogo from '../../../assets/images/HulkLogo.svg'\r\nimport metamaskLogo from '../../../assets/images/MetamaskIcon.svg'\r\nimport HomeFarm from '../../../assets/images/HomeFarmImage.png'\r\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport { useTokenBalance } from '../../../state/wallet/hooks'\r\nimport UnlockButton from '../../../components/UnlockButton'\r\nimport { usePriceHULKBusd } from '../../../state/farms/hooks'\r\nimport { getHULKTokenAddress } from '../../../utils/addressHelpers'\r\nimport useFarmsWithBalance from '../hooks/useFarmsWithBalance'\r\nimport { useAllHarvest } from '../../../hooks/Farms/useHarvestFarm'\r\nimport tokens from '../../../config/constants/tokens'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  min-height: 376px;\r\n  position: relative;\r\n`\r\n\r\nconst Block = styled.div`\r\n  //margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 20px;\r\n  line-height: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n  position: relative;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  z-index: 0;\r\n  display: none;\r\n  @media(min-width: 768px) {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Token = styled.div`\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst Metamask = styled.div`\r\n  display: flex;\r\n  padding: 11px 13px 11px 24px;\r\n  background: rgba(255, 255, 255, 0.37);\r\n  border-radius: 24px;\r\n  margin-left: 16px;\r\n  transition: background-color .25s ease;\r\n  cursor: pointer;\r\n  span {\r\n    color: #fff;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 20px;\r\n    line-height: 24px;\r\n  }\r\n  img {\r\n    margin-left: 19px;\r\n  }\r\n  &:hover {\r\n    background: rgba(255, 255, 255, 0.6);\r\n  }\r\n`\r\n\r\nconst CardHeading = styled(Heading)`\r\n  font-size: 28px;\r\n  font-weight: 900;\r\n  @media(min-width: 768px) {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const token: {\r\n    symbol: string,\r\n    decimals: number,\r\n    address: string,\r\n    image?: string,\r\n  } = useMemo(() => {\r\n    return {\r\n      symbol: 'HULK',\r\n      decimals: 18,\r\n      address: getHULKTokenAddress(),\r\n      // image: 'https://pbs.twimg.com/profile_images/802481220340908032/M_vde_oi_400x400.jpg',\r\n    }\r\n  }, [])\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account, library } = useActiveWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const hulkBalanceAmount = useTokenBalance(account || undefined, tokens.hulktoken)?.toSignificant(2)\r\n  const hulkBalance: number = useMemo(() => {\r\n    return parseFloat(hulkBalanceAmount || '0')\r\n  }, [hulkBalanceAmount])\r\n  const hulkPrice = usePriceHULKBusd().toNumber()\r\n  const {earningsSum} = farmsWithBalance\r\n  const balancesWithValue = farmsWithBalance.farmsWithStakedBalance\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n  const provider: any = (window as WindowChain).ethereum\r\n  const onAddToken = useCallback(() => {\r\n    if (library) {\r\n      provider.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: token,\r\n        },\r\n      })\r\n    }\r\n  }, [library, provider, token])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardImage src={HomeFarm} alt='Home Farm Image'/>\r\n      <CardBody p={40}>\r\n        <CardHeading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </CardHeading>\r\n        <Token>\r\n          <img src={hulkLogo} alt=\"hulk logo\" width={74} height={74} />\r\n          <Metamask onClick={onAddToken}>\r\n            <span>+</span>\r\n            <img src={metamaskLogo} alt=\"metamask logo\" width={24} height={24} />\r\n          </Metamask>\r\n        </Token>\r\n        <Button\r\n          id=\"buy-all\"\r\n          disabled={false}\r\n          mb={24}\r\n        >\r\n          Buy HULk\r\n        </Button>\r\n        <Block>\r\n          <Label>{TranslateString(544, 'HULK to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(hulkPrice * (earningsSum || 0)).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'HULK in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={hulkBalance} />\r\n          <Label>~${(hulkPrice * hulkBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting HULK')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/index.ts",["901"],"import type {\n  UnknownAsyncThunkFulfilledAction,\n  UnknownAsyncThunkPendingAction,\n  UnknownAsyncThunkRejectedAction,\n  // eslint-disable-next-line import/no-unresolved\n} from '@reduxjs/toolkit/dist/matchers'\nimport { createAsyncThunk, createSlice, isAnyOf } from '@reduxjs/toolkit'\nimport stringify from 'fast-json-stable-stringify'\nimport farmsConfig from '../../config/constants/farms'\nimport { isArchivedPid } from '../../utils/farmHelpers'\nimport type { AppState } from '../index'\nimport priceHelperLpsConfig from '../../config/constants/priceHelperLps'\nimport fetchFarms from './fetchFarms'\nimport getFarmsPrices from './getFarmsPrices'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances, fetchFarmUserCanHarvest,\n} from './fetchFarmUser'\nimport { SerializedFarmsState, SerializedFarm } from '../types'\nimport { fetchMasterChefFarmPoolLength, fetchMasterChefRegularHulkPerBlock } from './fetchMasterChefData'\nimport { resetUserState } from '../global/actions'\n\nconst noAccountFarmConfig = farmsConfig.map((farm: any) => ({\n  ...farm,\n  userData: {\n    allowance: '0',\n    tokenBalance: '0',\n    stakedBalance: '0',\n    earnings: '0',\n    canHarvest: false,\n    nextHarvestUntil: undefined\n  },\n}))\n\nconst initialState: SerializedFarmsState = {\n  data: noAccountFarmConfig,\n  loadArchivedFarmsData: false,\n  userDataLoaded: false,\n  loadingKeys: {},\n}\n\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }: any) => !isArchivedPid(pid))\n\n// Async thunks\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<[SerializedFarm[], number, number], number[], { state: AppState }>(\n  'farms/fetchFarmsPublicDataAsync',\n  async (pids) => {\n    const poolLength = await fetchMasterChefFarmPoolLength()\n    const regularHulkPerBlock = await fetchMasterChefRegularHulkPerBlock()\n    const farmsToFetch = farmsConfig.filter((farmConfig: any) => pids.includes(farmConfig.pid))\n    const farmsCanFetch = farmsToFetch.filter((f: any) => poolLength.gt(f.pid))\n\n    // Add price helper farms\n    const farmsWithPriceHelpers = farmsCanFetch.concat([])\n\n    const farms = await fetchFarms(farmsWithPriceHelpers)\n\n    const farmsWithPrices = getFarmsPrices(farms)\n\n    // Filter out price helper LP config farms\n    const farmsWithoutHelperLps = farmsWithPrices.filter((farm: SerializedFarm) => {\n      return farm.pid || farm.pid === 0\n    })\n    return [farmsWithoutHelperLps, poolLength.toNumber(), regularHulkPerBlock.toNumber()]\n  },\n  {\n    condition: (arg, { getState }) => {\n      const { farms } = getState()\n      if (farms.loadingKeys[stringify({ type: fetchFarmsPublicDataAsync.typePrefix, arg })]) {\n        // console.debug('farms action is fetching, skipping here')\n        return false\n      }\n      return true\n    },\n  },\n)\n\ninterface FarmUserDataResponse {\n  pid: number\n  allowance: string\n  tokenBalance: string\n  stakedBalance: string\n  earnings: string\n  canHarvest: boolean,\n  nextHarvestUntil?: number,\n}\n\nexport const fetchFarmUserDataAsync = createAsyncThunk<\n  FarmUserDataResponse[],\n  { account: string; pids: number[] },\n  {\n    state: AppState\n  }\n>(\n  'farms/fetchFarmUserDataAsync',\n  async ({ account, pids }) => {\n    const poolLength = await fetchMasterChefFarmPoolLength()\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\n    const farmsCanFetch = farmsToFetch.filter((f) => poolLength.gt(f.pid))\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsCanFetch)\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsCanFetch)\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsCanFetch)\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsCanFetch)\n    const userFarmCanHarvest = await fetchFarmUserCanHarvest(account, farmsCanFetch)\n\n    return userFarmAllowances.map((farmAllowance, index) => {\n      return {\n        pid: farmsCanFetch[index].pid,\n        allowance: userFarmAllowances[index],\n        tokenBalance: userFarmTokenBalances[index],\n        stakedBalance: userStakedBalances[index].stakedBalance,\n        nextHarvestUntil: userStakedBalances[index].nextHarvestUntil * 1000,\n        earnings: userFarmEarnings[index],\n        canHarvest: userFarmCanHarvest[index],\n      }\n    })\n  },\n  {\n    condition: (arg, { getState }) => {\n      const { farms } = getState()\n      if (farms.loadingKeys[stringify({ type: fetchFarmUserDataAsync.typePrefix, arg })]) {\n        // console.debug('farms user action is fetching, skipping here')\n        return false\n      }\n      return true\n    },\n  },\n)\n\ntype UnknownAsyncThunkFulfilledOrPendingAction =\n  | UnknownAsyncThunkFulfilledAction\n  | UnknownAsyncThunkPendingAction\n  | UnknownAsyncThunkRejectedAction\n\nconst serializeLoadingKey = (\n  action: UnknownAsyncThunkFulfilledOrPendingAction,\n  suffix: UnknownAsyncThunkFulfilledOrPendingAction['meta']['requestStatus'],\n) => {\n  const type = action.type.split(`/${suffix}`)[0]\n  return stringify({\n    arg: action.meta.arg,\n    type,\n  })\n}\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(resetUserState, (state) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      state.data = state.data.map((farm) => {\n        return {\n          ...farm,\n          userData: {\n            allowance: '0',\n            tokenBalance: '0',\n            stakedBalance: '0',\n            earnings: '0',\n            canHarvest: false,\n            nextHarvestUntil: undefined\n          },\n        }\n      })\n      state.userDataLoaded = false\n    })\n    // Update farms with live data\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\n      const [farmPayload, poolLength, regularHulkPerBlock] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = farmPayload.find((farmData) => farmData.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n      state.poolLength = poolLength\n      state.regularHulkPerBlock = regularHulkPerBlock\n    })\n\n    // Update farms with user data\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\n      action.payload.forEach((userDataEl) => {\n        const { pid } = userDataEl\n        const index = state.data.findIndex((farm) => farm.pid === pid)\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n      state.userDataLoaded = true\n    })\n\n    builder.addMatcher(isAnyOf(fetchFarmUserDataAsync.pending, fetchFarmsPublicDataAsync.pending), (state, action) => {\n      state.loadingKeys[serializeLoadingKey(action, 'pending')] = true\n    })\n    builder.addMatcher(\n      isAnyOf(fetchFarmUserDataAsync.fulfilled, fetchFarmsPublicDataAsync.fulfilled),\n      (state, action) => {\n        state.loadingKeys[serializeLoadingKey(action, 'fulfilled')] = false\n      },\n    )\n    builder.addMatcher(\n      isAnyOf(fetchFarmsPublicDataAsync.rejected, fetchFarmUserDataAsync.rejected),\n      (state, action) => {\n        state.loadingKeys[serializeLoadingKey(action, 'rejected')] = false\n      },\n    )\n  },\n})\n\nexport default farmsSlice.reducer\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/formatBalance.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/addressHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/layout/Flex.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmTabButtons/index.tsx",["902","903"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@hulkfinance/hulk-uikit'\r\nimport useI18n from '../../../../hooks/useI18n'\r\n\r\ninterface FarmTabButtonsProps {\r\n  stakedOnly: boolean,\r\n  setStakedOnly: (arg: boolean) => void,\r\n  isActive: boolean,\r\n  setIsActive: (val: boolean) => void,\r\n}\r\n\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly, isActive, setIsActive }: FarmTabButtonsProps) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isActive ? 0 : 1} size=\"sm\" variant=\"subtle\" onClick={() => setIsActive(!isActive)} >\r\n        <ButtonMenuItem as=\"button\" >\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as=\"button\" >\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n  flex-wrap: wrap;\r\n  * {\r\n    margin-bottom: 4px;\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    * {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardActionsContainer.tsx",["904","905","906","907","908","909","910","911","912"],"import React, { useMemo, useState, useCallback, useEffect, useContext } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Text, Toast, toastTypes } from '@hulkfinance/hulk-uikit'\r\nimport { parseUnits } from '@ethersproject/units'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport { FarmWithStakedValue } from '../../../../state/types'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport { useFarmFromPid, useFarmUser } from '../../../../state/farms/hooks'\r\nimport UnlockButton from '../../../../components/UnlockButton'\r\nimport { useERC20, useLPContract } from '../../../../hooks/useContract'\r\nimport useApproveFarm from '../../../../hooks/Farms/useApproveFarm'\r\nimport getLiquidityUrlPathParts from '../../../../utils/getLiquidityUrlPathParts'\r\nimport { BIG_ZERO } from '../../../../utils/bigNumber'\r\nimport { BASE_ADD_LIQUIDITY_URL, defaultChainId } from '../../../../config'\r\nimport { formatBigNumber, getBalanceAmount, getFullDisplayBalance } from '../../../../utils/formatBalance'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport useCatchTxError from '../../../../hooks/useCatchTxError'\r\nimport { getAddress, getHULKTokenAddress } from '../../../../utils/addressHelpers'\r\nimport { getBscScanLink } from '../../../../utils'\r\nimport { ToastContext } from '../../../../contexts/ToastContext'\r\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\r\n\r\nconst Action = styled.div`\r\n  margin-top: 8px;\r\n`\r\n\r\nconst FarmText = styled(Text)`\r\n  font-weight: 400;\r\n  text-transform: uppercase;\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string | null\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account }) => {\r\n  const TranslateString = useI18n()\r\n  const { pid } = farm\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'HULK'\r\n  const { addToast } = useContext(ToastContext)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\r\n  const { allowance } = farm.userData || {}\r\n  // useEffect(() => {\r\n  //   console.log('allowance', allowance, pid)\r\n  // },[allowance, pid])\r\n  const [tokens, setTokens] = useState<{ token0: string, token1: string }>({ token0: '', token1: '' })\r\n  const isApproved = useMemo(() => {\r\n    return account && allowance && allowance.isGreaterThan(0)\r\n  }, [account, allowance])\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useLPContract(lpAddress)\r\n\r\n  useEffect(() => {\r\n    if (lpContract && lpAddress !== getHULKTokenAddress()) {\r\n      lpContract.token0().then((res: string) => {\r\n        setTokens(prevState => {\r\n          return {\r\n            ...prevState,\r\n            token0: res,\r\n          }\r\n        })\r\n      })\r\n      lpContract.token1().then((res: string) => {\r\n        setTokens(prevState => {\r\n          return {\r\n            ...prevState,\r\n            token1: res,\r\n          }\r\n        })\r\n      })\r\n    } else if (lpAddress !== getHULKTokenAddress()) {\r\n      setTokens({token0: getHULKTokenAddress(), token1: getHULKTokenAddress()})\r\n    }\r\n  }, [lpAddress, lpContract])\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    if (!onApprove) return\r\n    const receipt = await fetchWithCatchTxError(() => {\r\n      return onApprove()\r\n    })\r\n    if (receipt?.status) {\r\n      const toast: Toast = {\r\n        id: `id-${Date.now()}`,\r\n        title: `Contract Enabled`,\r\n        description: `Contract Enabled`,\r\n        type: toastTypes.SUCCESS,\r\n      }\r\n      toast.action = {\r\n        text: 'View transaction',\r\n        url: getBscScanLink(receipt.transactionHash, 'transaction', defaultChainId),\r\n      }\r\n      addToast(toast)\r\n      // @ts-ignore\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    }\r\n  }, [onApprove, fetchWithCatchTxError, addToast, dispatch, account, pid])\r\n  const farmUser = useFarmUser(pid)\r\n  const { stakedBalance, earnings, tokenBalance } = useMemo(() => {\r\n    if (farmUser) {\r\n      return { stakedBalance: farmUser.stakedBalance, earnings: farmUser.earnings, tokenBalance: farmUser.tokenBalance }\r\n    }\r\n    return { stakedBalance: BIG_ZERO, earnings: BIG_ZERO, tokenBalance: BIG_ZERO }\r\n\r\n  }, [farmUser])\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <FarmText color='secondary' pr='3px'>\r\n          {earnLabel}\r\n        </FarmText>\r\n        <FarmText color='primary'>\r\n          {TranslateString(999, 'Earned')}\r\n        </FarmText>\r\n      </Flex>\r\n      <HarvestAction farm={farm} earnings={earnings} pid={farm.pid} />\r\n      <Flex>\r\n        <FarmText color='secondary' pr='3px'>\r\n          {lpLabel}\r\n        </FarmText>\r\n        <FarmText color='textSubtle'>\r\n          {TranslateString(999, 'Staked')}\r\n        </FarmText>\r\n      </Flex>\r\n      {\r\n        // eslint-disable-next-line no-nested-ternary\r\n        !account\r\n          ? <UnlockButton mt='16px' fullWidth />\r\n          : !isApproved\r\n          ? <Button mt='16px' fullWidth disabled={pendingTx} onClick={handleApprove}>\r\n            {TranslateString(999, 'Approve Contract')}\r\n          </Button>\r\n          :\r\n          <StakeAction farm={farm} stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpLabel}\r\n                       pid={pid} depositFeeBP={farm.depositFeeBP} />\r\n      }\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CardValue.tsx",[],["913","914","915","916","917"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/CardHeading.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeHarvestBalance.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/CakeWalletBalance.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarmUser.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchFarms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Tags.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/UnlockButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/farms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/ApyCalculatorModal.tsx",[],["918","919","920","921","922"],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx",["923","924","925"],"import React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, Toast, toastTypes } from '@hulkfinance/hulk-uikit'\r\nimport styled from 'styled-components'\r\nimport { fromWei } from 'web3-utils'\r\nimport useCatchTxError from '../../../../hooks/useCatchTxError'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport { useHarvestFarm } from '../../../../hooks/Farms/useHarvestFarm'\r\nimport { ToastContext } from '../../../../contexts/ToastContext'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport { getBalanceNumber, getFullDisplayBalance } from '../../../../utils/formatBalance'\r\nimport { FarmWithStakedValue } from '../../../../state/types'\r\nimport { getBscScanLink } from '../../../../utils'\r\nimport { defaultChainId } from '../../../../config'\r\nimport { fetchFarmUserDataAsync } from '../../../../state/farms'\r\nimport useActiveWeb3React from '../../../../hooks/useActiveWeb3React'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings: BigNumber\r\n  farm: FarmWithStakedValue\r\n  pid: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Balance = styled(Heading)`\r\n  font-size: 24px;\r\n  word-break: break-all;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({farm, earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const {account} = useActiveWeb3React()\r\n  const {fetchWithCatchTxError, loading} = useCatchTxError()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { addToast } = useContext(ToastContext)\r\n  const rawEarningsBalance = useMemo(() => {\r\n    return getBalanceNumber(earnings)\r\n  }, [earnings])\r\n  const displayBalance = useMemo(() => {\r\n    return fromWei(earnings.toString())\r\n  }, [earnings])\r\n  const {onReward} = useHarvestFarm(pid)\r\n  const canHarvest: boolean = useMemo(() => {\r\n    return farm.userData?.canHarvest || false\r\n  }, [farm])\r\n  const onHarvest = useCallback(async () => {\r\n    setPendingTx(true)\r\n    const receipt = await fetchWithCatchTxError(() => {\r\n      return onReward()\r\n    })\r\n    if (receipt?.status) {\r\n      const toast: Toast = {\r\n        id: `id-${Date.now()}`,\r\n        title: `Harvested`,\r\n        description: `Your ${farm.token.symbol || 'DB'} earnings have been sent to your wallet!`,\r\n        type: toastTypes.SUCCESS,\r\n      }\r\n      toast.action = {\r\n        text: 'View transaction',\r\n        url: getBscScanLink(receipt.transactionHash, 'transaction', defaultChainId),\r\n      }\r\n      addToast(toast)\r\n      // @ts-ignore\r\n      dispatch(fetchFarmUserDataAsync({account, pids: [pid]}))\r\n    }\r\n    setPendingTx(false)\r\n  }, [account, addToast, dispatch, farm.token.symbol, fetchWithCatchTxError, onReward, pid])\r\n\r\n  return (\r\n    <Flex mb='24px' mt={24} justifyContent='space-between' flexWrap=\"wrap\" alignItems='center'>\r\n      <Balance color='#fff'>{displayBalance}</Balance>\r\n      <BalanceAndCompound>\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx || !canHarvest}\r\n          onClick={onHarvest}\r\n        >\r\n          {pendingTx ? 'Harvesting' : TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/StakeAction.tsx",["926","927","928","929","930"],"import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@hulkfinance/hulk-uikit'\r\nimport { parseUnits } from '@ethersproject/units'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport { formatBigNumber, getBalanceNumber, getFullDisplayBalance } from '../../../../utils/formatBalance'\r\nimport useStakeFarms from '../../../../hooks/Farms/useStakeFarms'\r\nimport useUnstakeFarms from '../../../../hooks/Farms/useUnstakeFarms'\r\nimport { FarmWithStakedValue } from '../../../../state/types'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance: BigNumber\r\n  tokenBalance: BigNumber\r\n  tokenName?: string\r\n  pid: number\r\n  depositFeeBP?: number,\r\n  farm: FarmWithStakedValue\r\n}\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ farm, stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n  const displayStaked = useMemo(() => {\r\n    const decimals = 18\r\n    if (stakedBalance.isZero()) {\r\n      return 0\r\n    }\r\n    const balance = getFullDisplayBalance(stakedBalance, farm.token.decimals, farm.token.decimals)\r\n    const balanceUnits = parseUnits(balance, decimals)\r\n    return formatBigNumber(balanceUnits, decimals, decimals)\r\n  }, [farm.token.decimals, stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal decimals={farm.token.decimals} max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal decimals={farm.token.decimals} max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" flexDirection=\"column\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayStaked}</Heading>\r\n      <ButtonWrapper>\r\n          <Button\r\n            onClick={onPresentWithdraw}\r\n          >\r\n            Withdraw\r\n          </Button>\r\n          <Button\r\n            onClick={onPresentDeposit}\r\n          >\r\n            Stake\r\n          </Button>\r\n      </ButtonWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/contracts.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Balance.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/WithdrawModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/DepositModal.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useContract.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/compoundApyHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getLiquidityUrlPathParts.ts",["931"],"// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nimport { defaultChainId } from '../config'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }: any) => {\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses\n  const secondPart = tokenAddresses\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/TokenInput/TokenInput.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ModalActions/ModalActions.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/Input.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Spacer/Spacer.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/DetailsSection.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/ExpandableSectionButton/ExpandableSectionButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Label/Label.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/Timer.tsx",["932"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useMemo } from 'react'\nimport {Text} from '@hulkfinance/hulk-uikit'\nimport styled from 'styled-components'\nimport { useTimer } from 'react-timer-hook'\nimport { addZeroForward } from '../../../utils'\n\nconst TimerStyled = styled.div`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin-top: 56px;\n`\n\nconst TimerBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n`\n\nconst DateBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  align-content: center;\n  margin: 0 8px;\n`\n\nconst DateValue = styled(Text)`\n  font-size: 40px;\n  font-weight: bold;\n  line-height: 1;\n  color: ${({theme}) => theme.colors.primary};\n`\n\nconst DateName = styled(Text)`\n  font-size: 14px;\n  margin-top: 8px;\n  line-height: 1;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n`\n\nconst Separator = styled(Text)`\n  font-size: 60px;\n  font-weight: bold;\n  line-height: 1;\n  color: ${({theme}) => theme.colors.primary};\n  margin: 0 8px;\n`\nfunction Timer() {\n\n  const timestamp: number = useMemo(() => {\n    return 1645621200000\n  }, [])\n\n  const time = useMemo(() => {\n    return new Date(timestamp);\n  }, [timestamp])\n  const {\n    days, hours, minutes,\n    restart,\n  } = useTimer({\n    expiryTimestamp: time, autoStart: true, onExpire: () => {\n      console.log('finish')\n    } \n  });\n\n  useEffect(() => {\n    restart(time, true)\n  }, [time])\n  return (\n    <TimerStyled>\n      <TimerBlock>\n        <DateBlock>\n          {/* <DateValue>{addZeroForward(days.toString())}</DateValue> */}\n          <DateValue>{addZeroForward(days.toString())}</DateValue>\n          <DateName>days</DateName>\n        </DateBlock>\n        <Separator>:</Separator>\n         <DateBlock>\n          <DateValue>{addZeroForward(hours.toString())}</DateValue>\n          <DateName>hours</DateName>\n         </DateBlock>\n        <Separator>:</Separator>\n         <DateBlock>\n          <DateValue>{addZeroForward(minutes.toString())}</DateValue>\n          <DateName>minutes</DateName>\n         </DateBlock>\n      </TimerBlock>\n      {/* <TimerText><span>Finish:</span> 3d 9h 44m (blocks)</TimerText> */}\n    </TimerStyled>\n  )\n}\n\nexport default Timer","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/components/PreSale.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/PreSale.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Timeline.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Form.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/index.ts",["933"],"import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId, Currency, CurrencyAmount, ETHER, Percent, Token } from '@hulkfinance/hulk-swap-sdk'\nimport JSBI from \"jsbi\";\nimport {TokenAddressMap} from \"../state/types\";\nimport {BASE_BSC_SCAN_URLS, defaultChainId} from \"../config\";\n\nexport function escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const inputRegexInt = RegExp(`^\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\nexport function sleep(ms: number) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport const shortBalance = (balance: string, needLength = 6) => {\n    const balanceArr = balance.split('.')\n    if (balanceArr.length > 1) {\n        const integerPart = balanceArr[0]\n        const floatPart = balanceArr[1].length > needLength ? balanceArr[1].slice(0, needLength) : balanceArr[1]\n        return `${integerPart}.${floatPart}`\n    }\n    return balance\n}\n\nexport async function scrollToElement(event: any, href: string, isRedirect = false) {\n    if (isRedirect) {\n        await sleep(300)\n    }\n    const id = href.split('#')[1]\n    if (id) {\n        const element = document.getElementById(id);\n        if (element) {\n            const top = element.offsetTop;\n            window.scrollTo({\n                top,\n                behavior: 'smooth',\n            })\n        }\n    }\n}\nexport const shortAddress = (address: string) => {\n    if (address.length <= 12) return address\n    return `${address.slice(0, 6)}...${address.slice(-6)}`\n}\n\nexport const addZeroForward = (string: string, needLength = 2) => {\n    return `${'0'.repeat(needLength - string.length)}${string}`\n}\n\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n    try {\n        return getAddress(value)\n    } catch {\n        return false\n    }\n}\n\nconst BSCSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n    56: '',\n    97: 'testnet.',\n}\n\nexport function getBscScanLink(\n    data: string | number,\n    type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\n    chainIdOverride?: number,\n): string {\n    const chainId = chainIdOverride || defaultChainId\n    switch (type) {\n        case 'transaction': {\n            return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`\n        }\n        case 'token': {\n            return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`\n        }\n        case 'block': {\n            return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`\n        }\n        case 'countdown': {\n            return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`\n        }\n        default: {\n            return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`\n        }\n    }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n    const parsed = isAddress(address)\n    if (!parsed) {\n        throw Error(`Invalid 'address' parameter '${address}'.`)\n    }\n    return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n    return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n    return new Percent(JSBI.BigInt(Math.floor(num)), JSBI.BigInt(10000))\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\n    if (slippage < 0 || slippage > 10000) {\n        throw Error(`Unexpected slippage value: ${slippage}`)\n    }\n    return [\n        JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\n        JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))\n    ]\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n    return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string | null): Web3Provider | JsonRpcSigner {\n    return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n    if (!isAddress(address) || address === AddressZero) {\n        throw Error(`Invalid 'address' parameter '${address}'.`)\n    }\n\n    return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\n// account is optional\n// export function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\n//     return getContract(ROUTER_ADDRESS, DogBossSideLiquidityRouterABI, library, account)\n// }\n\n\nexport function isTokenOnList(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\n    if (currency === ETHER) return true\n    return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address])\n}\n\nexport const getTokenLogoURL = (address: string) =>\n    `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/assets/${address}/logo.png`\n\nexport const dateFormat = (date: Date) => {\n    const now = new Date()\n    let dif = date.getTime() - now.getTime()\n    if (dif <= 0) return 'available'\n    const min = 60\n    const hour = 60 * min\n    const day = hour * 24\n    if (dif <= 0) return '0'\n    dif /= 1000\n    if (dif >= day) return `${Math.floor(dif / day)} days`\n    if (dif >= hour) return `${Math.floor(dif / hour)} hours`\n    if (dif >= min) return `${Math.floor(dif / min)} mins`\n    return `${dif} sec`\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/usePresale.ts",["934","935","936","937","938","939","940","941","942","943"],"import { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport { fromWei, toWei } from 'web3-utils'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Contract } from 'ethers'\nimport useActiveWeb3React from './useActiveWeb3React'\nimport { useERC20, useHulkPreContract } from './useContract'\nimport { escapeRegExp, getBscScanLink, inputRegex, shortBalance } from '../utils'\nimport { ToastContext } from '../contexts/ToastContext'\nimport useBlockNumber from './useBlockNumber'\nimport { getHULKPreAddress, getHULKSwapAddress } from '../utils/addressHelpers'\nimport { defaultChainId } from '../config'\n\nexport enum ERound {\n  RoundZero = 0,\n  RoundOne = 1,\n  RoundTwo = 2,\n}\n\nexport const ERoundAvailable = {\n  0: '210000000000000000000000000',\n  1: '210000000000000000000000000',\n  2: '210000000000000000000000000',\n}\n\nexport enum ECoins {\n  Zero = '0x0000000000000000000000000000000000000000',\n  BUSD = '0xdB1Cc97ada0D2A0bCE7325699A9F1081C95F0ac9',\n  USDT = '0xbDf2f04a77Ca7474F127208cab24260197D14a04',\n}\n\nexport function useGetCurrentRound() {\n  const hulkPreContract: any = useHulkPreContract()\n  const [round, setRound] = useState<ERound>(ERound.RoundZero)\n  const block = useBlockNumber()\n\n  const getData = useCallback(() => {\n    if (hulkPreContract) {\n      hulkPreContract\n        .getCurrentRound()\n        .then((res:any) => {\n          setRound(parseInt(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n  return round\n}\n\nexport default function usePresale() {\n  const BN_0 = BigNumber.from('0')\n  const { addToast } = useContext(ToastContext)\n  const { account, library } = useActiveWeb3React()\n  const busdToken = useERC20(ECoins.BUSD)\n  const usdtToken = useERC20(ECoins.USDT)\n  const hulkPreContract: any = useHulkPreContract()\n  const round = useGetCurrentRound()\n  const [availableTokens, setAvailableTokens] = useState<BigNumber>(BN_0)\n  const [coin, setCoin] = useState<ECoins | string>(ECoins.Zero)\n  const [balance, setBalance] = useState<BigNumber>(BN_0)\n  const [allowance, setAllowance] = useState<{ busd: BigNumber, usdt: BigNumber }>({ busd: BN_0, usdt: BN_0 })\n  const block = useBlockNumber()\n  const [pending, setPending] = useState<boolean>(false)\n  const [pendingApprove, setPendingApprove] = useState<boolean>(false)\n  const [rate, setRate] = useState<BigNumber>(BN_0)\n  const [amountIn, setAmountIn] = useState<string>('')\n  const [amountOut, setAmountOut] = useState<string>('')\n  const [coinToTokens, setCoinToTokens] = useState<BigNumber>(BN_0)\n  const [tokenToCoins, setTokenToCoins] = useState<BigNumber>(BN_0)\n  const [percent, setPercent] = useState<number>(0)\n  const [price, setPrice] = useState<BigNumber>(BN_0)\n\n  useEffect(() => {\n    if (account && library && coin === ECoins.Zero) {\n      library.getBalance(account)\n        .then((res:any) => {\n          setBalance(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [coin, account, library])\n\n  const getData = useCallback(() => {\n    if (hulkPreContract) {\n      hulkPreContract\n        .getPrice()\n        .then((res:any) => {\n          setPrice(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n      hulkPreContract\n        .getAvailable()\n        .then((res:any) => {\n          setAvailableTokens(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n\n  const getDataCoins = useCallback(() => {\n    if (coin !== ECoins.Zero && account) {\n      const tokenContract = coin === ECoins.BUSD ? busdToken : usdtToken\n      if (tokenContract) {\n        tokenContract\n          .balanceOf(account) \n          .then((res:any) => {\n            setBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => {\n            console.log(e)\n          })\n        tokenContract\n          .allowance(account, getHULKPreAddress())\n          .then((res:any) => {\n            setAllowance(prevState => {\n              return {\n                ...prevState,\n                [coin === ECoins.BUSD ? 'busd' : 'usdt']: BigNumber.from(res),\n              }\n            })\n          })\n          .catch((e: any) => {\n            console.log(e)\n          })\n      }\n    }\n  }, [coin, busdToken, usdtToken, account])\n\n  useEffect(() => {\n    getDataCoins()\n  }, [block, getDataCoins])\n  // 1_000_069_780_000\n  useEffect(() => {\n    if (hulkPreContract) {\n      hulkPreContract\n        .getRate(coin)\n        .then((res: string) => {\n          setRate(BigNumber.from(res))\n        })\n        .catch((e: any) => {\n          console.log(e)\n        })\n    }\n  }, [amountIn, coin, hulkPreContract])\n\n\n  const onChangeAmountIn = useCallback(async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(balance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmountIn(shortBalance(nextUserInput, 8))\n      if (hulkPreContract && nextUserInput !== '') {\n        try {\n          const tokens: string = await hulkPreContract.coinToTokens(toWei(nextUserInput), coin)\n          setCoinToTokens(BigNumber.from(tokens))\n          setAmountOut(fromWei(tokens))\n        } catch {\n          setCoinToTokens(BN_0)\n          setAmountOut('')\n        }\n      } else {\n        setCoinToTokens(BN_0)\n        setAmountOut('')\n      }\n    } else {\n      setCoinToTokens(BN_0)\n      setAmountOut('')\n    }\n  }, [balance, hulkPreContract, coin, BN_0])\n\n  const onChangeAmountOut = useCallback(async (value: string) => {\n    const nextUserInput = value.replace(/,/g, '.')\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      setAmountOut(shortBalance(nextUserInput, 8))\n      if (hulkPreContract && nextUserInput !== '') {\n        try {\n          const coins: string = await hulkPreContract.tokensToCoin(toWei(nextUserInput), coin)\n          setTokenToCoins(BigNumber.from(coins))\n          setAmountIn(fromWei(coins))\n        } catch {\n          setTokenToCoins(BN_0)\n          setAmountIn('')\n        }\n      } else {\n        setTokenToCoins(BN_0)\n        setAmountIn('')\n      }\n    } else {\n      setTokenToCoins(BN_0)\n      setAmountIn('')\n    }\n  }, [BN_0, coin, hulkPreContract])\n\n\n  const onBuyTokens = useCallback(async () => {\n    if (hulkPreContract) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `Buy token: Success`,\n        description: `Confirm! You bought ${fromWei(amountOut.toString())} HULKPre!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPending(true)\n      const valueBnb = toWei(amountIn.toString())\n      const value = coinToTokens.toString()\n      const params: { from: any, value?: string } = { from: account }\n      if (coin === ECoins.Zero) params.value = valueBnb\n      const trx = await hulkPreContract\n        .buyTokens(value, coin, { ...params })\n        .catch((e: any) => {\n          toast.title = 'Buy token: Failed'\n          toast.type = toastTypes.DANGER\n          toast.description = e.receipt !== undefined ? 'Something went wrong!' : e.message\n        })\n        .finally(() => {\n          setPending(false)\n          getData()\n        })\n      if (trx?.hash) {\n        toast.action = {\n          text: 'View transaction',\n          url: `https://testnet.bscscan.com/tx/${trx.hash}`,\n        }\n      }\n      addToast(toast)\n    }\n  }, [hulkPreContract, amountOut, amountIn, coinToTokens, account, coin, addToast, getData])\n\n  useEffect(() => {\n    if (!availableTokens.isZero()) {\n      const availableDefault = parseFloat(fromWei(ERoundAvailable[round]))\n      const availableCurrent = parseFloat(fromWei(availableTokens.toString()))\n      const perc: number = 100 - ((availableCurrent / availableDefault) * 100)\n      setPercent(parseFloat(perc.toFixed(3)))\n    } else {\n      setPercent(100)\n    }\n  }, [round, availableTokens])\n\n  const onMax = useCallback(() => {\n    const maxBalance = shortBalance(fromWei(balance.toString()))\n    setAmountIn(maxBalance)\n  }, [setAmountIn, balance])\n\n  const onSelectCoin = useCallback((selectCoin: ECoins | string) => {\n    setCoin(selectCoin)\n  }, [])\n\n  const approve = useCallback(async (tokenContract: Contract | null) => {\n    if (account) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `Approve token: Success`,\n        description: `Confirm Approve!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPendingApprove(true)\n      if (tokenContract && account) {\n        tokenContract.approve(getHULKPreAddress(), MaxUint256, { from: account })\n          .then((res: TransactionResponse) => {\n            if (res?.hash) {\n              toast.action = {\n                text: 'View transaction',\n                url: getBscScanLink(res.hash, 'transaction', defaultChainId),\n              }\n            }\n            addToast(toast)\n          })\n          .catch((error: any) => {\n            toast.title = 'Aprove token: Failed'\n            toast.type = toastTypes.DANGER\n            toast.description = error.data?.message || error.message || 'Something went wrong!'\n            addToast(toast)\n          })\n          .finally(() => setPendingApprove(false))\n      }\n      setPendingApprove(false)\n    }\n  }, [account, addToast])\n\n  const onApprove = useCallback( async () => {\n    if (coin !== ECoins.Zero && account) {\n      const isBusd = coin === ECoins.BUSD\n      if (isBusd) {\n        await approve(busdToken)\n      } else {\n        await approve(usdtToken)\n      }\n      getDataCoins()\n    }\n  }, [coin, account, getDataCoins, approve, busdToken, usdtToken])\n\n  return useMemo(() => {\n    return {\n      round,\n      availableTokens,\n      onBuyTokens,\n      pending,\n      onChangeAmountIn,\n      balance,\n      amountIn,\n      onMax,\n      coin,\n      onSelectCoin,\n      allowance,\n      onApprove,\n      pendingApprove,\n      percent,\n      tokenToCoins,\n      amountOut,\n      onChangeAmountOut,\n    }\n  }, [\n    round,\n    availableTokens,\n    onBuyTokens,\n    pending,\n    onChangeAmountIn,\n    balance,\n    amountIn,\n    onMax,\n    coin,\n    onSelectCoin,\n    allowance,\n    onApprove,\n    pendingApprove,\n    percent,\n    tokenToCoins,\n    amountOut,\n    onChangeAmountOut,\n  ])\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/ToastContext.tsx",["944","945"],"import { Toast } from \"@hulkfinance/hulk-uikit\";\nimport React, {createContext, useReducer} from \"react\";\n\nconst initialState: Toast[] = []\n\nexport const toastReducer = (state: Toast[], action: any) => {\n    switch (action.type) {\n        case 'add' :\n            return [action.payload.toast, ...state];\n        case 'remove' :\n            return state.filter((prevToast) => prevToast.id !== action.payload.id);\n        default:\n            return state;\n    }\n};\n\nexport const ToastContext = createContext<{\n    toasts: Toast[],\n    addToast: (toast: Toast) => void,\n    removeToast: (id: string) => void,\n}>({\n    toasts: [],\n    addToast: (toast) => {console.log(toast)},\n    removeToast: (id) => {console.log(id)},\n});\n\nexport default function ToastProvider({children}: any) {\n    const [toasts, dispatch] = useReducer(toastReducer, initialState);\n    const removeToast = (id: string) => {\n        dispatch({type: \"remove\", payload: {id}})\n    };\n    const addToast = (toast: Toast) => {\n        dispatch({type: \"add\", payload: {toast}});\n    };\n\n    return (\n        <ToastContext.Provider\n            value={{\n                toasts,\n                removeToast,\n                addToast\n            }}\n        >\n            {children}\n        </ToastContext.Provider>\n    )\n\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Referral/Referral.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useReferral.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/PreSale/components/Swap.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useHulkSwap.ts",["946","947","948","949","950"],"import { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport { fromWei, toWei } from 'web3-utils'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport useActiveWeb3React from './useActiveWeb3React'\nimport { useHulkContract, useHulkPreContract, useHulkSwapContract } from './useContract'\nimport { getHULKSwapAddress } from '../utils/addressHelpers'\nimport { ToastContext } from '../contexts/ToastContext'\nimport { escapeRegExp, getBscScanLink, inputRegex, shortBalance } from '../utils'\nimport useBlockNumber from './useBlockNumber'\nimport { defaultChainId } from '../config'\n\nconst BN_0 = BigNumber.from('0')\n\nexport default function useHulkSwap() {\n  const {account} = useActiveWeb3React()\n  const { addToast } = useContext(ToastContext)\n  const hulkSwapContract = useHulkSwapContract()\n  const hulkPreContract = useHulkPreContract()\n  const hulkContract = useHulkContract()\n  const [pending, setPending] = useState<boolean>(false)\n  const [pendingApprove, setPendingApprove] = useState<boolean>(false)\n  const [amount, setAmount] = useState<string>('')\n  const [amountOut, setAmountOut] = useState<string>('')\n\n  const [hulkBalance, setHulkBalance] = useState<BigNumber>(BN_0)\n  const [hulkPreBalance, setHulkPreBalance] = useState<BigNumber>(BN_0)\n  const [allowance, setAllowance] = useState<BigNumber>(BN_0)\n  const block = useBlockNumber()\n\n  const getData = useCallback(() => {\n    if (account) {\n      if (hulkPreContract) {\n        hulkPreContract.balanceOf(account)\n          .then((res: string) => {\n            setHulkPreBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n        hulkPreContract.allowance(account, getHULKSwapAddress())\n          .then((res: string) => {\n            setAllowance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n      }\n      if (hulkContract) {\n        hulkContract.balanceOf(account)\n          .then((res: string) => {\n            setHulkBalance(BigNumber.from(res))\n          })\n          .catch((e: any) => console.log(e))\n      }\n    }\n  }, [account, hulkContract, hulkPreContract])\n\n  useEffect(() => {\n    getData()\n  }, [getData, block])\n\n  const onChangeAmountIn = useCallback( async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(hulkPreBalance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmount(nextUserInput)\n      setAmountOut(nextUserInput)\n    }\n  }, [hulkPreBalance])\n\n  const onChangeAmountOut = useCallback( async (value: string) => {\n    let nextUserInput = value.replace(/,/g, '.')\n    const maxBalance = fromWei(hulkPreBalance.toString())\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      nextUserInput = parseFloat(nextUserInput) > parseFloat(maxBalance) ? maxBalance.toString() : nextUserInput\n      setAmountOut(nextUserInput)\n      setAmount(nextUserInput)\n    }\n  }, [hulkPreBalance])\n\n  const onSwap = useCallback(async () => {\n    if (hulkSwapContract) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `SWap token: Success`,\n        description: `Confirm! You Swap ${amount} HULKPre to ${amountOut} HULK!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPending(true)\n      const trx = await hulkSwapContract\n        .swap(toWei(amount), { from: account })\n        .catch((e: any) => {\n          toast.title = 'Swap token: Failed'\n          toast.type = toastTypes.DANGER\n          toast.description = e.receipt !== undefined ? 'Something went wrong!' : e.message\n        })\n        .finally(() => {\n          setPending(false)\n          getData()\n        })\n      if (trx?.hash) {\n        toast.action = {\n          text: 'View transaction',\n          url: `https://testnet.bscscan.com/tx/${trx.hash}`,\n        }\n      }\n      addToast(toast)\n    }\n  }, [hulkSwapContract, amount, amountOut, account, addToast, getData])\n\n  const onApprove = useCallback( async () => {\n    if (account) {\n      const now = Date.now()\n      const toast: Toast = {\n        id: `id-${now}`,\n        title: `Approve token: Success`,\n        description: `Confirm! You approve HULKPre!`,\n        type: toastTypes.SUCCESS,\n      }\n      setPendingApprove(true)\n      if (hulkPreContract && account) {\n        return hulkPreContract.approve(getHULKSwapAddress(), MaxUint256, {from: account})\n          .then((res: TransactionResponse) => {\n            console.log(res.hash)\n\n            if (res?.hash) {\n              toast.action = {\n                text: 'View transaction',\n                url: getBscScanLink(res.hash, 'transaction', defaultChainId),\n              }\n            }\n            addToast(toast)\n          })\n          .catch((error: any) => {\n            toast.title = 'Aprove token: Failed'\n            toast.type = toastTypes.DANGER\n            toast.description = error.data?.message || error.message || 'Something went wrong!'\n            addToast(toast)\n          })\n          .finally(() => setPendingApprove(false))\n      }\n      setPendingApprove(false)\n      getData()\n    }\n  }, [account, addToast, getData, hulkPreContract])\n\n  return useMemo(() => {\n    return {\n      allowance,\n      hulkBalance,\n      hulkPreBalance,\n      onApprove,\n      pending,\n      pendingApprove,\n      onSwap,\n      onChangeAmountIn,\n      onChangeAmountOut,\n      amount,\n      amountOut\n    }\n  }, [\n    allowance,\n    hulkBalance,\n    hulkPreBalance,\n    onApprove,\n    pending,\n    pendingApprove,\n    onSwap,\n    onChangeAmountIn,\n    onChangeAmountOut,\n    amount,\n    amountOut\n  ])\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/reducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/global/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/reducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/reducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/reducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/getFarmsPrices.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchMasterChefData.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/fetchPublicFarmData.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/types.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/actions.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/bigNumber.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contractHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/farmsPriceHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/farmHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/localStorageOrders.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contracts.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/web3React.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useActiveWeb3React.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/priceHelperLps.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/tokens.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/lists.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/helpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useAuth.ts",["951","952","953","954"],"import {UnsupportedChainIdError, useWeb3React} from \"@web3-react/core\";\nimport { useCallback, useContext } from 'react'\nimport {\n    NoEthereumProviderError,\n    UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from \"@web3-react/injected-connector\";\nimport {\n    UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n    WalletConnectConnector,\n} from \"@web3-react/walletconnect-connector\";\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport {defaultChainId, storageConnectorKey} from \"../config\";\nimport {ConnectorNames, connectorsByName} from \"../utils/web3React\";\nimport {setupNetwork} from \"../utils/wallet\";\nimport { ToastContext } from '../contexts/ToastContext'\n\nfunction useAuth() {\n    const {activate, deactivate, chainId} = useWeb3React()\n    const { addToast } = useContext(ToastContext)\n    const defaultConnectorKey = window.localStorage.getItem(storageConnectorKey) || ConnectorNames.Injected\n\n    const login = useCallback( async (connectorKey: ConnectorNames | string = defaultConnectorKey) => {\n        const connector: any = connectorsByName[connectorKey]\n        let success = true\n        const toast: Toast = {\n            id: `id-${Date.now()}`,\n            title: `Auth`,\n            description: ``,\n            type: toastTypes.DANGER,\n        }\n        if (connector) {\n            activate(connector, async (error) => {\n                console.log(error.message || error )\n                success = false\n                localStorage.removeItem(storageConnectorKey)\n                if (error instanceof UnsupportedChainIdError) {\n                    if (connectorKey === ConnectorNames.WalletConnect) {\n                        window.localStorage.removeItem('walletconnect')\n                        console.error('Unsupported ChainId. Change network, please!')\n                        toast.description = 'Unsupported ChainId. Change network, please!'\n                        addToast(toast)\n                        return\n                    }\n                    const hasSetup = await setupNetwork(defaultChainId)\n                    if (hasSetup) {\n                        await activate(connector)\n                        localStorage.setItem(storageConnectorKey, connectorKey)\n                        console.error('Change Network: Success')\n                        success = true\n                        toast.description = 'Change Network: Success'\n                        toast.type = toastTypes.SUCCESS\n                        addToast(toast)\n                    } else {\n                        deactivate();\n                        console.log(error.message)\n                        window.localStorage.removeItem(storageConnectorKey)\n                        // showAlert({text: error.message, cls: classAlert.error})\n                    }\n                } else {\n                    deactivate();\n                    window.localStorage.removeItem(storageConnectorKey)\n                    window.localStorage.removeItem('walletconnect')\n                    if (error instanceof NoEthereumProviderError) {\n                        console.info(error.message || 'Provider Error')\n                    } else if (\n                        error instanceof UserRejectedRequestErrorInjected ||\n                        error instanceof UserRejectedRequestErrorWalletConnect\n                    ) {\n                        if (connector instanceof WalletConnectConnector) {\n                            const walletConnector = connector as WalletConnectConnector\n                            walletConnector.walletConnectProvider = undefined\n                        }\n                        console.error(error.message || 'Authorization Error')\n                        // showAlert({text: error.message || 'Authorization Error', cls: classAlert.error})\n                        toast.description = error.message || 'Authorization Error'\n                        addToast(toast)\n                    } else {\n                        console.error(error.message)\n                        window.localStorage.removeItem(storageConnectorKey)\n                        // showAlert({text: error.message, cls: classAlert.error})\n                    }\n                }\n                \n            }).then(() => {\n                if (success) {\n                    localStorage.setItem(storageConnectorKey, connectorKey)\n                }\n            })\n                .catch((e) => {\n                    window.localStorage.removeItem(storageConnectorKey)\n                })\n        } else {\n            console.info('Connector is Failed')\n        }\n    }, [activate, addToast, deactivate, defaultConnectorKey])\n\n    const logout = useCallback(() => {\n        window.localStorage.removeItem(storageConnectorKey)\n        deactivate();\n        window.localStorage.removeItem(storageConnectorKey)\n        window.localStorage.removeItem('walletconnect')\n    }, [deactivate])\n\n    return {\n        login,\n        logout\n    }\n}\n\nexport default useAuth;","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/hooks.ts",["955"],"import { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ChainId } from '@hulkfinance/hulk-swap-sdk'\nimport { farmsConfig } from '../../config/constants'\nimport { useFastRefreshEffect, useSlowRefreshEffect } from '../../hooks/useRefreshEffect'\nimport { useAppDispatch } from '../index'\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\nimport { DeserializedFarm, DeserializedFarmsState, DeserializedFarmUserData, SerializedFarm, State } from '../types'\nimport {\n  farmSelector,\n  farmFromLpSymbolSelector,\n  priceHulkFromPidSelector,\n  makeBusdPriceFromPidSelector,\n  makeUserFarmFromPidSelector,\n  makeLpTokenPriceFromLpSymbolSelector,\n  makeFarmFromPidSelector,\n} from './selectors'\nimport {defaultChainId} from \"../../config\";\nimport {BIG_ZERO} from \"../../utils/bigNumber\";\nimport { QuoteToken } from '../../config/constants/types'\n\nexport const usePollFarmsWithUserData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useSlowRefreshEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch: any) => farmToFetch.pid)\n\n    // @ts-ignore\n    dispatch(fetchFarmsPublicDataAsync(pids))\n\n    if (account) {\n      // @ts-ignore\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\n    }\n  }, [includeArchive, dispatch, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 2 = CAKE-BNB LP\n * 3 = BUSD-BNB LP\n */\nconst coreFarmPIDs: number[] = defaultChainId.toString() === String(ChainId.MAINNET) ? [0, 1, 5] : [0, 1, 5]\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n\n  useFastRefreshEffect(() => {\n    // @ts-ignore\n    dispatch(fetchFarmsPublicDataAsync(coreFarmPIDs))\n  }, [dispatch])\n}\n\nexport const useFarms = (): DeserializedFarmsState => {\n  return useSelector(farmSelector)\n}\n\nexport const useFarmsPoolLength = (): number => {\n  return useSelector((state: State) => state.farms.poolLength || 0)\n}\n\nexport const useFarmFromPid = (pid: number): DeserializedFarm | null => {\n  const farmFromPid = useMemo(() => makeFarmFromPidSelector(pid), [pid])\n  return useSelector(farmFromPid)\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): DeserializedFarm | null => {\n  const farmFromLpSymbol = useMemo(() => farmFromLpSymbolSelector(lpSymbol), [lpSymbol])\n  return useSelector(farmFromLpSymbol)\n}\n\nexport const useFarmUser = (pid: number): DeserializedFarmUserData | undefined => {\n  const farmFromPidUser = useMemo(() => makeUserFarmFromPidSelector(pid), [pid])\n  return useSelector(farmFromPidUser)\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const busdPriceFromPid = useMemo(() => makeBusdPriceFromPidSelector(pid), [pid])\n  return useSelector(busdPriceFromPid) || BIG_ZERO\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const lpTokenPriceFromLpSymbol = useMemo(() => makeLpTokenPriceFromLpSymbolSelector(symbol), [symbol])\n  return useSelector(lpTokenPriceFromLpSymbol)\n}\n\n/**\n * @@deprecated use the BUSD hook in /hooks\n */\nexport const usePriceHULKBusd = (): BigNumber => {\n  return useSelector(priceHulkFromPidSelector) || BIG_ZERO\n}\n\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 5 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  if (farm) {\n    return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\n  }\n  return BIG_ZERO\n}\n\nexport const usePriceHulkBnb = (): BigNumber => {\n  const pid = 1 // HULK-BNB LP\n  const farm = useFarmFromPid(pid)\n  if (farm) {\n    return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\n  }\n  return BIG_ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const hulkPrice = usePriceHULKBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.data.length; i++) {\n    const farm = farms.data[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteToken.symbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      } else if (farm.quoteToken.symbol === QuoteToken.CAKE) {\n        val = (hulkPrice.times(farm.lpTotalInQuoteToken));\n      } else {\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useRefreshEffect.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/farms/selectors.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/wallet.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/networks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useBlockNumber.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/languageContext.tsx",["956","957"],"import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { EN, languages } from '../../config/localisation/languages'\r\nimport { TranslationsContext } from './translationsContext'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = 0\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: '',\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage: any) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }: any) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return Object.values(languages).filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/translationsContext.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/translateTextHelpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/localisation/languages.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/helpers.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useUserAgent.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/updater.ts",["958","959","960"],"import { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useAllLists , useActiveListUrls } from './hooks'\nimport { UNSUPPORTED_LIST_URLS } from '../../config/constants/lists'\nimport useWeb3Provider from '../../hooks/useActiveWeb3React'\nimport useFetchListCallback from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { AppDispatch } from '../index'\nimport { acceptListUpdate } from './actions'\n\n\nexport default function Updater(): null {\n  const { library } = useWeb3Provider()\n  const dispatch = useDispatch<AppDispatch>()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n  const activeListUrls = useActiveListUrls()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach((url) =>\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error)),\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        // eslint-disable-next-line default-case\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          // update any active or inactive lists\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists, activeListUrls])\n\n  return null\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/block/hooks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/updater.tsx",["961","962","963","964","965"],"import { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useCurrentBlock } from '../block/hooks'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { useMulticallContract } from '../../hooks/useContract'\nimport useDebounce from '../../hooks/useDebounce'\nimport { CancelledError, retry, RetryableError } from './retry'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  Call,\n  errorFetchingMulticallResults,\n  fetchingMulticallResults,\n  parseCallKey,\n  updateMulticallResults,\n} from './actions'\nimport chunkArray from './chunkArray'\n\n// chunk calls so we do not exceed the gas limit\nconst CALL_CHUNK_SIZE = 500\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicallContract multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param minBlockNumber minimum block number of the result set\n */\nasync function fetchChunk(\n  multicallContract: Contract,\n  chunk: Call[],\n  minBlockNumber: number,\n): Promise<{ results: string[]; blockNumber: number }> {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber)\n  let resultsBlockNumber\n  let returnData\n  try {\n    // prettier-ignore\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\n      chunk.map((obj) => [obj.address, obj.callData]),\n      {\n        blockTag: minBlockNumber,\n      }\n    )\n  } catch (err) {\n    const error = err as any\n    if (\n      error.code === -32000 ||\n      (error?.data?.message && error?.data?.message?.indexOf('header not found') !== -1) ||\n      error.message?.indexOf('header not found') !== -1\n    ) {\n      throw new RetryableError(`header not found for block number ${minBlockNumber}`)\n    } else if (error.code === -32603 || error.message?.indexOf('execution ran out of gas') !== -1) {\n      if (chunk.length > 1) {\n        if (process.env.NODE_ENV === 'development') {\n          console.debug('Splitting a chunk in 2', chunk)\n        }\n        const half = Math.floor(chunk.length / 2)\n        const [c0, c1] = await Promise.all([\n          fetchChunk(multicallContract, chunk.slice(0, half), minBlockNumber),\n          fetchChunk(multicallContract, chunk.slice(half, chunk.length), minBlockNumber),\n        ])\n        return {\n          results: c0.results.concat(c1.results),\n          blockNumber: c1.blockNumber,\n        }\n      }\n    }\n    console.debug('Failed to fetch chunk inside retry', error)\n    throw error\n  }\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`)\n  }\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: AppState['multicall']['callListeners'],\n  chainId?: number,\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param currentBlock the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: AppState['multicall']['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  currentBlock: number | undefined,\n): string[] {\n  if (!chainId || !currentBlock) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = currentBlock - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\nexport default function Updater(): null {\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['multicall']>((s) => s.multicall)\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const currentBlock = useCurrentBlock()\n  const { chainId } = useActiveWeb3React()\n  const multicallContract = useMulticallContract()\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, currentBlock)\n  }, [chainId, state.callResults, listeningKeys, currentBlock])\n\n  const serializedOutdatedCallKeys = useMemo(\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\n    [unserializedOutdatedCallKeys],\n  )\n\n  useEffect(() => {\n    if (!currentBlock || !chainId || !multicallContract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\n\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\n\n    if (cancellations.current?.blockNumber !== currentBlock) {\n      cancellations.current?.cancellations?.forEach((c) => c())\n    }\n\n    dispatch(\n      fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: currentBlock,\n      }),\n    )\n\n    cancellations.current = {\n      blockNumber: currentBlock,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, currentBlock), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500,\n        })\n        promise\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\n            cancellations.current = { cancellations: [], blockNumber: currentBlock }\n\n            // accumulates the length of all previous indices\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\n\n            dispatch(\n              updateMulticallResults({\n                chainId,\n                results: outdatedCallKeys\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\n                    memo[callKey] = returnData[i] ?? null\n                    return memo\n                  }, {}),\n                blockNumber: fetchBlockNumber,\n              }),\n            )\n          })\n          .catch((error: any) => {\n            if (error instanceof CancelledError) {\n              console.debug('Cancelled fetch for blockNumber', currentBlock)\n              return\n            }\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n            dispatch(\n              errorFetchingMulticallResults({\n                calls: chunk,\n                chainId,\n                fetchingBlockNumber: currentBlock,\n              }),\n            )\n          })\n        return cancel\n      }),\n    }\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, currentBlock])\n\n  return null\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/transactions/updater.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/lists/hooks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/chunkArray.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/retry.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useDebounce.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useFetchListCallback.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useInterval.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useIsWindowVisible.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getTokenList.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/ENS/resolveENSContentHash.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/contenthashToUri.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/ENS/parseENSAddress.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/uriToHttp.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useIntersectionObserver.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/apr.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/latinise.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/FarmContext.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Tokens.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/user/hooks/useUserAddedTokens.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/multicall/hooks.ts",["966"],"import { Interface, FunctionFragment } from '@ethersproject/abi'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useSWRConfig } from 'swr'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { AppDispatch, AppState } from '../index'\nimport {\n  addMulticallListeners,\n  Call,\n  removeMulticallListeners,\n  parseCallKey,\n  toCallKey,\n  ListenerOptions,\n} from './actions'\n\nexport interface Result extends ReadonlyArray<any> {\n  readonly [key: string]: any\n}\n\ntype MethodArg = string | number | BigNumber\ntype MethodArgs = Array<MethodArg | MethodArg[]>\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\nfunction isMethodArg(x: unknown): x is MethodArg {\n  return ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n\ninterface CallResult {\n  readonly valid: boolean\n  readonly data: string | undefined\n  readonly blockNumber: number | undefined\n}\n\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\n\n// use this options object\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity,\n}\n\n// the lowest level call for subscribing to contract data\nfunction useCallsData(calls: (Call | undefined)[], options?: ListenerOptions): CallResult[] {\n  const { chainId } = useActiveWeb3React()\n  const callResults = useSelector<AppState, AppState['multicall']['callResults']>(\n    (state) => state.multicall.callResults,\n  )\n  const dispatch = useDispatch<AppDispatch>()\n\n  const serializedCallKeys: string = useMemo(\n    () =>\n      JSON.stringify(\n        calls\n          ?.filter((c): c is Call => Boolean(c))\n          ?.map(toCallKey)\n          ?.sort() ?? [],\n      ),\n    [calls],\n  )\n\n  // update listeners when there is an actual change that persists for at least 100ms\n  useEffect(() => {\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    if (!chainId || callKeys.length === 0) return undefined\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const calls = callKeys.map((key) => parseCallKey(key))\n    dispatch(\n      addMulticallListeners({\n        chainId,\n        calls,\n        options,\n      }),\n    )\n\n    return () => {\n      dispatch(\n        removeMulticallListeners({\n          chainId,\n          calls,\n          options,\n        }),\n      )\n    }\n  }, [chainId, dispatch, options, serializedCallKeys])\n\n  return useMemo(\n    () =>\n      calls.map<CallResult>((call) => {\n        if (!chainId || !call) return INVALID_RESULT\n\n        const result = callResults[chainId]?.[toCallKey(call)]\n        let data\n        if (result?.data && result?.data !== '0x') {\n          // eslint-disable-next-line prefer-destructuring\n          data = result.data\n        }\n\n        return { valid: true, data, blockNumber: result?.blockNumber }\n      }),\n    [callResults, calls, chainId],\n  )\n}\n\ninterface CallState {\n  readonly valid: boolean\n  // the result, or undefined if loading or errored/no data\n  readonly result: Result | undefined\n  // true if the result has never been fetched\n  readonly loading: boolean\n  // true if the result is not for the latest block\n  readonly syncing: boolean\n  // true if the call was made and is synced, but the return data is invalid\n  readonly error: boolean\n}\n\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\n\nfunction toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: Interface | undefined,\n  fragment: FunctionFragment | undefined,\n  latestBlockNumber: number | undefined,\n): CallState {\n  if (!callResult) return INVALID_CALL_STATE\n  const { valid, data, blockNumber } = callResult\n  if (!valid) return INVALID_CALL_STATE\n  if (valid && !blockNumber) return LOADING_CALL_STATE\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\n  const success = data && data.length > 2\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\n  let result: Result | undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.debug('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result,\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result,\n    error: !success,\n  }\n}\n\nexport function useSingleContractMultipleData(\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options?: ListenerOptions,\n): CallState[] {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const calls = useMemo(\n    () =>\n      contract && fragment && callInputs && callInputs.length > 0\n        ? callInputs.map<Call>((inputs) => {\n            return {\n              address: contract.address,\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\n            }\n          })\n        : [],\n    [callInputs, contract, fragment],\n  )\n\n  const results = useCallsData(calls, options)\n\n  const { cache } = useSWRConfig()\n\n  return useMemo(() => {\n    const currentBlockNumber = cache.get('blockNumber')\n    // @ts-ignore\n    return results.map((result) => toCallState(result, contract?.interface, fragment, currentBlockNumber))\n  }, [fragment, contract, results, cache])\n}\n\nexport function useMultipleContractSingleData(\n  addresses: (string | undefined)[],\n  contractInterface: any,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: ListenerOptions,\n): CallState[] {\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\n  const callData: string | undefined = useMemo(\n    () =>\n      fragment && isValidMethodArgs(callInputs)\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\n        : undefined,\n    [callInputs, contractInterface, fragment],\n  )\n\n  const calls = useMemo(\n    () =>\n      fragment && addresses && addresses.length > 0 && callData\n        ? addresses.map<Call | undefined>((address) => {\n            return address && callData\n              ? {\n                  address,\n                  callData,\n                }\n              : undefined\n          })\n        : [],\n    [addresses, callData, fragment],\n  )\n\n  const results = useCallsData(calls, options)\n\n  const { cache } = useSWRConfig()\n\n  return useMemo(() => {\n    const currentBlockNumber = cache.get('blockNumber')\n    return results.map((result) => toCallState(result, contractInterface, fragment, currentBlockNumber))\n  }, [fragment, results, contractInterface, cache])\n}\n\nexport function useSingleCallResult(\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options?: ListenerOptions,\n): CallState {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const calls = useMemo<Call[]>(() => {\n    return contract && fragment && isValidMethodArgs(inputs)\n      ? [\n          {\n            address: contract.address,\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\n          },\n        ]\n      : []\n  }, [contract, fragment, inputs])\n\n  const result = useCallsData(calls, options)[0]\n  const { cache } = useSWRConfig()\n\n  return useMemo(() => {\n    const currentBlockNumber = cache.get('blockNumber')\n    // @ts-ignore\n    return toCallState(result, contract?.interface, fragment, currentBlockNumber)\n  }, [cache, result, contract?.interface, fragment])\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/wallet/hooks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Home/hooks/useFarmsWithBalance.tsx",["967"],"import BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport useSWR from 'swr'\nimport masterChefABI from '../../../config/abi/masterchef.json'\nimport { farmsConfig, FAST_INTERVAL } from '../../../config/constants'\nimport multicall from '../../../utils/multicall'\nimport { getMasterChefAddress } from '../../../utils/addressHelpers'\nimport { useFarmsPoolLength } from '../../../state/farms/hooks'\nimport { DEFAULT_TOKEN_DECIMAL } from '../../../config'\nimport { SerializedFarmConfig } from '../../../config/constants/types'\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\n\nexport interface FarmWithBalance extends SerializedFarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const { account } = useActiveWeb3React()\n  const poolLength = useFarmsPoolLength()\n\n  const {\n    data: { farmsWithStakedBalance, earningsSum } = {\n      farmsWithStakedBalance: [] as FarmWithBalance[],\n      earningsSum: null,\n    },\n  } = useSWR(\n    account && poolLength ? [account, 'farmsWithBalance'] : null,\n    async () => {\n      const farmsCanFetch = farmsConfig.filter((f) => poolLength > f.pid)\n      const calls = farmsCanFetch.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingHULK',\n        params: [farm.pid, account],\n      }))\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsCanFetch.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n      const farmsWithBalances: FarmWithBalance[] = results.filter((balanceType) => balanceType.balance.gt(0))\n      const totalEarned = farmsWithBalances.reduce((accum, earning) => {\n        const earningNumber = new BigNumber(earning.balance)\n        if (earningNumber.eq(0)) {\n          return accum\n        }\n        return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n      }, 0)\n\n      return {\n        farmsWithStakedBalance: farmsWithBalances,\n        earningsSum: totalEarned,\n      }\n    },\n    { refreshInterval: FAST_INTERVAL },\n  )\n\n  return { farmsWithStakedBalance, earningsSum }\n}\n\nexport default useFarmsWithBalance\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useHarvestFarm.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/estimateGas.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/calls/farms.ts",["968","969","970","971"],"import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from '../../config'\nimport getGasPrice from '../getGasPrice'\nimport { SerializedFarm } from '../../state/types'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract: any, pid: any, amount: any, affiliateAddress: string) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  console.log(pid, value, affiliateAddress)\n  return masterChefContract.deposit(pid, value, affiliateAddress)\n}\n\nexport const unstakeFarm = async (masterChefContract: any, pid: any, amount: any) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.withdraw(pid, value)\n}\n\nexport const harvestFarm = async (masterChefContract: any, pid: any, affiliateAddress: string) => {\n  return masterChefContract.deposit(pid, '0', affiliateAddress)\n}","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/getGasPrice.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useTokenBalance.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/FarmList.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useApproveFarm.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useCatchTxError.tsx",["972","973","974"],"import { useCallback, useContext, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { TransactionReceipt, TransactionResponse } from '@ethersproject/providers'\n\nimport { Toast, toastTypes } from '@hulkfinance/hulk-uikit'\nimport { logError, isUserRejected } from '../utils/sentry'\nimport { useTranslation } from '../contexts/Localisation'\nimport { ToastContext } from '../contexts/ToastContext'\nimport { getBscScanLink } from '../utils'\nimport { defaultChainId } from '../config'\n\nexport type TxResponse = TransactionResponse | null\n\nexport type CatchTxErrorReturn = {\n  fetchWithCatchTxError: (fn: () => Promise<TxResponse>) => Promise<TransactionReceipt | null>\n  loading: boolean\n}\n\ntype ErrorData = {\n  code: number\n  message: string\n}\n\ntype TxError = {\n  data: ErrorData\n  error: string\n}\n\n// -32000 is insufficient funds for gas * price + value\nconst isGasEstimationError = (err: TxError): boolean => err?.data?.code === -32000\n\nexport default function useCatchTxError(): CatchTxErrorReturn {\n  const { library } = useWeb3React()\n  const { t } = useTranslation()\n  const { addToast } = useContext(ToastContext)\n  const [loading, setLoading] = useState(false)\n\n  const handleNormalError = useCallback(\n    (error: any, tx?: TxResponse) => {\n\n      const toast: Toast = {\n        id: `id-${Date.now()}`,\n        title: `Failed`,\n        description: `Please try again. Confirm the transaction and make sure you are paying enough gas!`,\n        type: toastTypes.DANGER,\n      }\n      logError(error)\n\n      if (tx) {\n        toast.action = {\n          text: 'View transaction',\n          url: getBscScanLink(tx.hash, 'transaction', defaultChainId),\n        }\n        addToast(toast)\n      } else {\n        addToast(toast)\n        // console.log('Please try again. Confirm the transaction and make sure you are paying enough gas!')\n      }\n    },\n    [addToast],\n  )\n\n  const fetchWithCatchTxError = useCallback(\n    async (callTx: () => Promise<TxResponse>): Promise<TransactionReceipt | null> => {\n      let tx: TxResponse = null\n      const toast: Toast = {\n        id: `id-${Date.now()}`,\n        title: `Success`,\n        description: `Transaction Submitted!`,\n        type: toastTypes.SUCCESS,\n      }\n      try {\n        setLoading(true)\n\n        /**\n         * https://github.com/vercel/swr/pull/1450\n         *\n         * wait for useSWRMutation finished, so we could apply SWR in case manually trigger tx call\n         */\n        tx = await callTx()\n        console.log(tx, callTx)\n\n        if (tx) {\n          toast.action = {\n            text: 'View transaction',\n            url: getBscScanLink(tx.hash, 'transaction', defaultChainId),\n          }\n          addToast(toast)\n        }\n        if (tx) {\n          const receipt = await tx.wait()\n          if (receipt.status === 0) {\n            toast.type = toastTypes.DANGER\n            toast.title = 'Failed'\n            toast.description = 'Something wrong!'\n            addToast(toast)\n          }\n          return receipt\n        }\n      } catch (error: any) {\n        if (!isUserRejected(error)) {\n          if (!tx) {\n            handleNormalError(error)\n          } else {\n            library\n              .call(tx, tx.blockNumber)\n              .then(() => {\n                handleNormalError(error, tx)\n              })\n              .catch((err: any) => {\n                console.log('err', err)\n                if (isGasEstimationError(err)) {\n                  handleNormalError(error, tx)\n                } else {\n                  logError(err)\n\n                  let recursiveErr = err\n\n                  let reason: string | undefined\n\n                  // for MetaMask\n                  if (recursiveErr?.data?.message) {\n                    reason = recursiveErr?.data?.message\n                  } else {\n                    // for other wallets\n                    // Reference\n                    // https://github.com/Uniswap/interface/blob/ac962fb00d457bc2c4f59432d7d6d7741443dfea/src/hooks/useSwapCallback.tsx#L216-L222\n                    while (recursiveErr) {\n                      reason = recursiveErr.reason ?? recursiveErr.message ?? reason\n                      recursiveErr = recursiveErr.error ?? recursiveErr.data?.originalError\n                    }\n                  }\n\n                  const REVERT_STR = 'execution reverted: '\n                  const indexInfo = reason?.indexOf(REVERT_STR)\n                  if (indexInfo && reason) {\n                    const isRevertedError = indexInfo >= 0\n                    if (isRevertedError) reason = reason.substring(indexInfo + REVERT_STR.length)\n\n                    if (tx) {\n                      toast.action = {\n                        text: 'View transaction',\n                        url: getBscScanLink(tx.hash, 'transaction', defaultChainId),\n                      }\n                      toast.type = toastTypes.DANGER\n                      toast.title = 'Failed'\n                      toast.description = isRevertedError\n                        ? `Transaction failed with error: ${reason}`\n                        : 'Transaction failed. For detailed error message:'\n                      addToast(toast)\n                    }\n                  }\n\n                }\n              })\n          }\n        } else {\n          toast.action = undefined\n          toast.type = toastTypes.DANGER\n          toast.title = 'Failed'\n          toast.description = error.data?.message || error.message || 'User rejected'\n          addToast(toast)\n        }\n      } finally {\n        setLoading(false)\n      }\n\n      return null\n    },\n    [addToast, handleNormalError, library],\n  )\n\n  return {\n    fetchWithCatchTxError,\n    loading,\n  }\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/useCallWithGasPrice.ts",["975"],"import { useCallback } from 'react'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Contract, CallOverrides } from '@ethersproject/contracts'\nimport get from 'lodash/get'\nimport { useGasPrice } from '../state/user/hooks'\n\nexport default function useCallWithGasPrice() {\n  const gasPrice = useGasPrice()\n\n  /**\n   * Perform a contract call with a gas price returned from useGasPrice\n   * @param contract Used to perform the call\n   * @param methodName The name of the method called\n   * @param methodArgs An array of arguments to pass to the method\n   * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n   * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n   */\n  const callWithGasPrice = useCallback(\n    async (\n      contract: Contract,\n      methodName: string,\n      methodArgs: any[] = [],\n      overrides: CallOverrides | null = null,\n    ): Promise<TransactionResponse> => {\n      // Sentry.addBreadcrumb({\n      //   type: 'Transaction',\n      //   message: `Call with gas price: ${gasPrice}`,\n      //   data: {\n      //     contractAddress: contract.address,\n      //     methodName,\n      //     methodArgs,\n      //     overrides,\n      //   },\n      // })\n      const contractMethod = get(contract, methodName)\n      const hasManualGasPriceOverride = overrides?.gasPrice\n\n      const tx = await contractMethod(\n        ...methodArgs,\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\n      )\n\n      if (tx) {\n        console.log(tx)\n        // Sentry.addBreadcrumb({\n        //   type: 'Transaction',\n        //   message: `Transaction sent: ${tx.hash}`,\n        //   data: {\n        //     hash: tx.hash,\n        //     from: tx.from,\n        //     gasLimit: tx.gasLimit?.toString(),\n        //     nonce: tx.nonce,\n        //   },\n        // })\n      }\n\n      return tx\n    },\n    [gasPrice],\n  )\n\n  return { callWithGasPrice }\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useUnstakeFarms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/utils/sentry.ts",["976","977"],"\nconst assignError = (maybeError: any) => {\n  if (typeof maybeError === 'string') {\n    return new Error(maybeError)\n  }\n  if (typeof maybeError === 'object') {\n    const error = new Error(maybeError?.message ?? String(maybeError))\n    if (maybeError?.stack) {\n      error.stack = maybeError.stack\n    }\n    if (maybeError?.code) {\n      error.name = maybeError.code\n    }\n    return error\n  }\n  return maybeError\n}\n\nexport const isUserRejected = (err: any) => {\n  // provider user rejected error code\n  return typeof err === 'object' && 'code' in err && err.code === 4001\n}\n\nconst ENABLED_LOG = false\n\nexport const logError = (error: Error | unknown) => {\n  if (ENABLED_LOG) {\n    if (error instanceof Error) {\n      console.error(error)\n    } else {\n      console.log(error)\n      // Sentry.captureException(assignError(error), error)\n    }\n  }\n  console.error(error)\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/hooks/Farms/useStakeFarms.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/useTranslation.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/Localisation/Provider.tsx",["978"],"import React, { createContext, useCallback, useEffect, useState } from 'react'\nimport memoize from 'lodash/memoize'\nimport { ContextApi, ProviderState, TranslateFunction } from './types'\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers'\nimport { EN, languages } from '../../config/localisation/languages'\nimport translations from '../../config/localisation/translations.json'\nimport { Language } from '../../config/constants/types'\n\nconst initialState: ProviderState = {\n  isFetching: true,\n  currentLanguage: EN,\n}\n\nconst includesVariableRegex = new RegExp(/%\\S+?%/, 'gm')\n\nconst translatedTextIncludesVariable = memoize((translatedText: string): boolean => {\n  return !!translatedText?.match(includesVariableRegex)\n})\n\n// Export the translations directly\nexport const languageMap = new Map<Language['locale'], Record<string, string>>()\nlanguageMap.set(EN.locale, translations)\n\n// @ts-ignore\nexport const LanguageContext = createContext<ContextApi>(undefined)\n\nexport const LanguageProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState<ProviderState>(() => {\n\n    return {\n      ...initialState,\n      currentLanguage: EN,\n    }\n  })\n  const { currentLanguage } = state\n\n  useEffect(() => {\n    const fetchInitialLocales = async () => {\n      const codeFromStorage = getLanguageCodeFromLS()\n\n      if (codeFromStorage !== EN.locale) {\n        const enLocale = languageMap.get(EN.locale)\n        const currentLocale = await fetchLocale(codeFromStorage)\n        if (currentLocale) {\n          languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\n        }\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n      }))\n    }\n\n    fetchInitialLocales()\n  }, [setState])\n\n  const setLanguage = useCallback(async (language: Language) => {\n    if (!languageMap.has(language.locale)) {\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: true,\n      }))\n\n      const locale = await fetchLocale(language.locale)\n      if (locale) {\n        const enLocale = languageMap.get(EN.locale)\n        // Merge the EN locale to ensure that any locale fetched has all the keys\n        languageMap.set(language.locale, { ...enLocale, ...locale })\n      }\n\n      localStorage?.setItem(LS_KEY, language.locale)\n\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    } else {\n      localStorage?.setItem(LS_KEY, language.locale)\n      setState((prevState) => ({\n        ...prevState,\n        isFetching: false,\n        currentLanguage: language,\n      }))\n    }\n  }, [])\n\n  const translate: TranslateFunction = useCallback(\n    (key: string, data) => {\n      const translationSet = languageMap.get(currentLanguage.locale) ?? languageMap.get(EN.locale)\n      const translatedText = translationSet?.[key] || key\n\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\n      const includesVariable = translatedTextIncludesVariable(translatedText)\n\n      if (includesVariable && data) {\n        let interpolatedText = translatedText\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\n        })\n\n        return interpolatedText\n      }\n\n      return translatedText\n    },\n    [currentLanguage],\n  )\n\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\n}\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Farms/components/FarmCard/PairImage.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchMasterChefData.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPools.ts",["979"],"import BigNumber from 'bignumber.js'\nimport { fromWei } from 'web3-utils'\nimport { SerializedPoolConfig } from '../../config/constants/types'\nimport { BIG_TEN, BIG_ZERO } from '../../utils/bigNumber'\nimport { fetchPublicPoolsData } from './fetchPublicPoolsData'\nimport { fetchMasterChefData } from './fetchMasterChefData'\nimport { SerializedPool } from '../types'\n\nconst fetchPools = async (poolsToFetch: SerializedPoolConfig[]): Promise<SerializedPool[]> => {\n  const poolResult = await fetchPublicPoolsData(poolsToFetch)\n  const masterChefResult = await fetchMasterChefData(poolsToFetch)\n\n  return poolsToFetch.map((pool, index) => {\n    const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n      poolResult[index]\n\n    const [info, totalRegularAllocPoint] = masterChefResult[index]\n\n    // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n    const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n    // Raw amount of token in the LP, including those not staked\n    const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\n    const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\n\n    // Amount of quoteToken in the LP that are staked in the MC\n    // const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\n    const quoteTokenAmountMc = info ? new BigNumber(fromWei(info.totalLp.toString())) : BIG_ZERO\n\n    // Total staked in LP, in quote token value\n    const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(1))\n\n    const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\n    const poolWeight = totalRegularAllocPoint ? allocPoint.div(new BigNumber(totalRegularAllocPoint)) : BIG_ZERO\n\n    return {\n      ...pool,\n      token: pool.token,\n      quoteToken: pool.quoteToken,\n      tokenAmountTotal: tokenAmountTotal.toJSON(),\n      quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\n      lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n      poolWeight: poolWeight.toJSON(),\n      multiplier: `${allocPoint.div(100).toString()}X`,\n    }\n  })\n}\n\nexport default fetchPools\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/getPoolsPrices.ts",["980"],"import BigNumber from 'bignumber.js'\nimport { BIG_ONE, BIG_ZERO } from '../../utils/bigNumber'\nimport { filterFarmsByQuoteToken } from '../../utils/farmsPriceHelpers'\nimport { SerializedFarm, SerializedPool } from '../types'\nimport tokens from '../../config/constants/tokens'\nimport { makeFarmFromPidSelector } from '../farms/selectors'\n\nconst getPoolFromTokenSymbol = (\n  pools: SerializedPool[],\n  tokenSymbol: string,\n  preferredQuoteTokens?: string[],\n): SerializedPool => {\n  const poolsWithTokenSymbol = pools.filter((pool) => pool.token.symbol === tokenSymbol)\n  const filteredPool = filterFarmsByQuoteToken(poolsWithTokenSymbol, preferredQuoteTokens)\n  return filteredPool\n}\n\nconst getPoolBaseTokenPrice = (\n  pool: SerializedPool,\n  quoteTokenPool: SerializedPool,\n  bnbPriceBusd: BigNumber,\n): BigNumber => {\n  const hasTokenPriceVsQuote = Boolean(pool.tokenPriceVsQuote)\n\n  if (pool.quoteToken.symbol === tokens.busd.symbol) {\n    return hasTokenPriceVsQuote ? new BigNumber(pool.tokenPriceVsQuote || '') : BIG_ZERO\n  }\n\n  if (pool.quoteToken.symbol === tokens.wbnb.symbol) {\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(pool.tokenPriceVsQuote || '') : BIG_ZERO\n  }\n\n  // We can only calculate profits without a quoteTokenPool for BUSD/BNB pools\n  if (!quoteTokenPool) {\n    return BIG_ZERO\n  }\n\n  // Possible alternative pool quoteTokens:\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n  // If the pool's quote token isn't BUSD or WBNB, we then use the quote token, of the original pool's quote token\n  // i.e. for pool PNT - pBTC we use the pBTC pool's quote token - BNB, (pBTC - BNB)\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\n  if (quoteTokenPool.quoteToken.symbol === tokens.wbnb.symbol) {\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenPool.tokenPriceVsQuote || '')\n    return hasTokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(pool.tokenPriceVsQuote || '').times(quoteTokenInBusd)\n      : BIG_ZERO\n  }\n\n  if (quoteTokenPool.quoteToken.symbol === tokens.busd.symbol) {\n    const quoteTokenInBusd = quoteTokenPool.tokenPriceVsQuote\n    return hasTokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(pool.tokenPriceVsQuote || '').times(quoteTokenInBusd)\n      : BIG_ZERO\n  }\n\n  // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken\n  return BIG_ONE\n}\n\nconst getPoolQuoteTokenPrice = (\n  pool: SerializedPool,\n  quoteTokenPool: SerializedPool,\n  bnbPriceBusd: BigNumber,\n): BigNumber => {\n  if (pool.quoteToken.symbol === 'BUSD') {\n    return BIG_ONE\n  }\n\n  if (pool.quoteToken.symbol === 'WBNB') {\n    return bnbPriceBusd\n  }\n\n  if (!quoteTokenPool) {\n    return BIG_ZERO\n  }\n\n  if (quoteTokenPool.quoteToken.symbol === 'WBNB') {\n    return quoteTokenPool.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenPool.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  if (quoteTokenPool.quoteToken.symbol === 'BUSD') {\n    return quoteTokenPool.tokenPriceVsQuote ? new BigNumber(quoteTokenPool.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  return BIG_ONE\n}\n\nconst getPoolsPrices = (pools: SerializedPool[], farms: SerializedFarm[]) => {\n  const bnbBusdPool = farms.find((farm) => farm.token.symbol === 'BUSD' && farm.quoteToken.symbol === 'WBNB')\n  if (bnbBusdPool) {\n    const bnbPriceBusd = bnbBusdPool.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdPool.tokenPriceVsQuote) : BIG_ZERO\n    const poolsWithPrices = pools.map((pool) => {\n      const quoteTokenPool = getPoolFromTokenSymbol(pools, pool.quoteToken.symbol || '')\n      const tokenPriceBusd = getPoolBaseTokenPrice(pool, quoteTokenPool, bnbPriceBusd)\n      const quoteTokenPriceBusd = getPoolQuoteTokenPrice(pool, quoteTokenPool, bnbPriceBusd)\n\n      return {\n        ...pool,\n        tokenPriceBusd: tokenPriceBusd.toJSON(),\n        quoteTokenPriceBusd: quoteTokenPriceBusd.toJSON(),\n      }\n    })\n    return poolsWithPrices\n  }\n  return []\n}\n\nexport default getPoolsPrices\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPoolsUser.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/fetchPublicPoolsData.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/config/constants/pools.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/index.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/Pools.tsx",["981","982","983","984","985","986","987","988","989","990","991","992"],"import React, { useEffect, useCallback, useState, useRef, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Image, Heading } from '@hulkfinance/hulk-uikit'\r\nimport { ChainId } from '@hulkfinance/hulk-swap-sdk'\r\nimport { orderBy } from 'lodash'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport useAuth from '../../hooks/useAuth'\r\nimport { useUserPoolStakedOnly, useUserPoolsViewMode } from '../../state/user/hooks'\r\nimport { TranslateString } from '../../utils/translateTextHelpers'\r\nimport { getFarmApr, getPoolApr } from '../../utils/apr'\r\nimport { isArchivedPid } from '../../utils/farmHelpers'\r\nimport useIntersectionObserver from '../../hooks/useIntersectionObserver'\r\nimport { usePools, usePollPoolsWithUserData, usePriceHULKBusd } from '../../state/pools/hooks'\r\nimport { latinise } from '../../utils/latinise'\r\nimport { PoolsContext } from '../../contexts/PoolContext'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport FlexLayout from '../../components/layout/Flex'\r\nimport Page from '../../components/layout/Page'\r\nimport PoolList from './PoolList'\r\n\r\nexport interface PoolsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr: any, lpRewardsApr: any) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Banner = styled.div`\r\n  width: 100%;\r\n  height: 186px;\r\n  //background-image: url('../../assets/images/home_banner.png');\r\n  background: url('/images/PageBanner.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  background-size: auto 100%;\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`\r\n\r\nconst BannerHeading = styled(Heading)`\r\n  font-size: 48px;\r\n  font-weight: 900;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Pools: React.FC<PoolsProps> = () => {\r\n  const { login, logout } = useAuth()\r\n  const { data: poolsLP, userDataLoaded, poolLength, regularHulkPerBlock } = usePools()\r\n  const umPrice = usePriceHULKBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useUserPoolsViewMode()\r\n  const { account } = useActiveWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const chosenPoolsLength = useRef(0)\r\n  const [isActive, setIsActive] = useState<boolean>(true)\r\n\r\n  usePollPoolsWithUserData(false)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserPoolStakedOnly(isActive)\r\n\r\n  const activePools = poolsLP.filter(\r\n    (pool: any) =>\r\n      // pool.pid !== 0 && pool.multiplier !== '0X' && !isArchivedPid(pool.pid) && (!poolLength || poolLength > pool.pid),\r\n      pool.multiplier !== '0X' && !isArchivedPid(pool.pid) && (!poolLength || poolLength > pool.pid),\r\n  )\r\n\r\n  const stakedOnlyPools = activePools.filter(\r\n    (pool: any) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const poolsList = useCallback(\r\n    (poolsToDisplay) => {\r\n      let poolsToDisplayWithAPR = poolsToDisplay.map((pool: any) => {\r\n        if (!pool.lpTotalInQuoteToken || !pool.quoteTokenPriceBusd) {\r\n          return pool\r\n        }\r\n        const totalLiquidity = new BigNumber(pool.lpTotalInQuoteToken).times(pool.quoteTokenPriceBusd)\r\n        const { hulkRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(\r\n            new BigNumber(pool.poolWeight),\r\n            umPrice,\r\n            totalLiquidity,\r\n            pool.lpAddresses[ChainId.BSCTESTNET],\r\n            regularHulkPerBlock || 0,\r\n          )\r\n          : { hulkRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...pool, apr: hulkRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        poolsToDisplayWithAPR = poolsToDisplayWithAPR.filter((pool: any) => {\r\n          return latinise(pool.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return poolsToDisplayWithAPR\r\n    },\r\n    [umPrice, query, isActive, regularHulkPerBlock],\r\n  )\r\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  const chosenPoolsMemoized = useMemo(() => {\r\n    let chosenPools = []\r\n\r\n    const sortPools = (pools: any) => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(pools, (pool: any) => pool.apr + pool.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            pools,\r\n            (pool: any) => (pool.multiplier ? Number(pool.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            pools,\r\n            (pool: any) => (pool.userData ? Number(pool.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(pools, (pool: any) => Number(pool.liquidity), 'desc')\r\n        case 'latest':\r\n          return orderBy(pools, (pool: any) => Number(pool.pid), 'desc')\r\n        default:\r\n          return pools\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenPools = stakedOnly ? poolsList(stakedOnlyPools) : poolsList(activePools)\r\n    }\r\n    return sortPools(chosenPools).slice(0, numberOfPoolsVisible)\r\n  }, [\r\n    sortOption,\r\n    activePools,\r\n    poolsList,\r\n    isActive,\r\n    stakedOnly,\r\n    stakedOnlyPools,\r\n    numberOfPoolsVisible,\r\n  ])\r\n\r\n  chosenPoolsLength.current = chosenPoolsMemoized.length\r\n\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setNumberOfPoolsVisible((poolsCurrentlyVisible) => {\r\n        if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\r\n          return poolsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n        }\r\n        return poolsCurrentlyVisible\r\n      })\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  return (\r\n    <PoolsContext.Provider value={{ chosenPoolsMemoized }}>\r\n      <Banner>\r\n        <BannerHeading as='h1' mb={0} style={{ textAlign: 'center' }}>\r\n          {TranslateString(10002, 'Stake tokens to earn HULK ')}\r\n        </BannerHeading>\r\n        <Heading as='h2' color='primary' mt='16px' style={{ textAlign: 'center' }}>\r\n          {TranslateString(10000, 'Stake Tokens to Earn HULK')}\r\n        </Heading>\r\n      </Banner>\r\n      <Page>\r\n        <PoolTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} isActive={isActive}\r\n                        setIsActive={setIsActive} />\r\n        <PoolList />\r\n      </Page>\r\n    </PoolsContext.Provider>\r\n  )\r\n}\r\n\r\nexport default Pools\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/hooks.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/PoolList.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/contexts/PoolContext.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/state/pools/selectors.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolTabButtons/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/PoolCard.tsx",["993","994","995","996"],"import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@hulkfinance/hulk-uikit'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport ExpandableSectionButton from '../../../../components/ExpandableSectionButton'\r\nimport { PoolWithStakedValue } from '../../../../state/types'\r\nimport { BIG_ZERO } from '../../../../utils/bigNumber'\r\nimport { defaultChainId } from '../../../../config'\r\nimport { getHULKTokenAddress } from '../../../../utils/addressHelpers'\r\nimport { dateFormat, getBscScanLink } from '../../../../utils'\r\nimport ApyButton from '../../../Farms/components/FarmCard/ApyButton'\r\n\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\nconst PoolText = styled(Text)`\r\n  font-weight: 400;\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\nconst Row = styled(Flex)`\r\n  margin-bottom: 16px;\r\n`\r\n\r\ninterface PoolCardProps {\r\n  pool: PoolWithStakedValue\r\n  removed: boolean\r\n  hulkPrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  displayApr: string\r\n  account?: string | null\r\n}\r\n\r\nconst PoolCard: React.FC<PoolCardProps> = ({ pool, removed, hulkPrice, bnbPrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityPool = communityPools.includes(pool.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be hulk-bnb.svg, link-bnb.svg, nar-hulk.svg\r\n  // const poolImage = pool.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const poolImage = 'bnb-busd'\r\n\r\n  const totalValueFormatted =\r\n    pool.liquidity && pool.liquidity.gt(0)\r\n      ? `$${pool.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 2 })}`\r\n      : ''\r\n\r\n  const lpLabel = pool.lpSymbol\r\n  const earnLabel = 'HULK'\r\n  const poolAPY = parseInt(String(pool.apr || pool.defaultApr))\r\n\r\n  const timeToHarvest = useMemo(() => {\r\n    if (pool.userData?.nextHarvestUntil) {\r\n      return dateFormat(new Date(pool.userData.nextHarvestUntil))\r\n    }\r\n    return '-'\r\n  }, [pool.userData])\r\n\r\n  return (\r\n    <FCard>\r\n      {pool.token.symbol === 'HULK' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={pool.multiplier || '1x'}\r\n        depositFee={pool.depositFeeBP}\r\n        token0={pool.token.symbol || ''}\r\n        token1={pool.v1pid?.toString() || '1'}\r\n      />\r\n      {!removed && (\r\n        <Row justifyContent='space-between' alignItems='center'>\r\n          <PoolText>{TranslateString(352, 'APR')}:</PoolText>\r\n          <PoolText style={{ display: 'flex', alignItems: 'center' }}>\r\n            {pool.apr ? (\r\n              <ApyButton\r\n                variant=\"text-and-button\"\r\n                pid={pool.pid}\r\n                lpSymbol={pool.lpSymbol}\r\n                multiplier={pool.multiplier || '1x'}\r\n                lpLabel={lpLabel}\r\n                addLiquidityUrl=''\r\n                hulkPrice={hulkPrice}\r\n                apr={poolAPY}\r\n                displayApr={poolAPY.toString()}\r\n              />\r\n            ) : (\r\n              `${poolAPY.toString()}%`\r\n            )}\r\n          </PoolText>\r\n        </Row>\r\n      )}\r\n      <Row justifyContent='space-between'>\r\n        <PoolText>{TranslateString(318, 'Earn')}:</PoolText>\r\n        <PoolText>{earnLabel}</PoolText>\r\n      </Row>\r\n      <Row justifyContent='space-between'>\r\n        <PoolText>{TranslateString(10001, 'Deposit Fee')}:</PoolText>\r\n        <PoolText>{(pool.depositFeeBP / 100)}%</PoolText>\r\n      </Row>\r\n      <Row justifyContent='space-between'>\r\n        <PoolText>Harvest Lockup:</PoolText>\r\n        <PoolText>{timeToHarvest}</PoolText>\r\n      </Row>\r\n      <CardActionsContainer pool={pool} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={pool.token.address === getHULKTokenAddress()}\r\n          bscScanAddress={\r\n            pool.token.address === pool.quoteToken.address ?\r\n              getBscScanLink(pool.token.address, 'token', defaultChainId)\r\n              :\r\n              getBscScanLink(pool.lpAddresses[defaultChainId], 'token', defaultChainId)\r\n          }\r\n          totalValueFormated={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={pool.quoteToken.address}\r\n          quoteTokenSymbol={pool.quoteToken.symbol}\r\n          tokenAddresses={pool.token.address}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default PoolCard\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/CardActionsContainer.tsx",["997","998","999","1000","1001","1002","1003","1004","1005"],"import React, { useMemo, useState, useCallback, useEffect, useContext } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Text, Toast, toastTypes } from '@hulkfinance/hulk-uikit'\r\nimport { parseUnits } from '@ethersproject/units'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport { PoolWithStakedValue } from '../../../../state/types'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport { usePoolFromPid, usePoolUser } from '../../../../state/pools/hooks'\r\nimport UnlockButton from '../../../../components/UnlockButton'\r\nimport { useERC20, useLPContract } from '../../../../hooks/useContract'\r\nimport useApprovePool from '../../../../hooks/Farms/useApproveFarm'\r\nimport getLiquidityUrlPathParts from '../../../../utils/getLiquidityUrlPathParts'\r\nimport { BIG_ZERO } from '../../../../utils/bigNumber'\r\nimport { BASE_ADD_LIQUIDITY_URL, defaultChainId } from '../../../../config'\r\nimport { formatBigNumber, getBalanceAmount, getFullDisplayBalance } from '../../../../utils/formatBalance'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport useCatchTxError from '../../../../hooks/useCatchTxError'\r\nimport { getAddress, getHULKTokenAddress } from '../../../../utils/addressHelpers'\r\nimport { getBscScanLink } from '../../../../utils'\r\nimport { ToastContext } from '../../../../contexts/ToastContext'\r\nimport { fetchPoolUserDataAsync } from '../../../../state/pools'\r\n\r\nconst Action = styled.div`\r\n  margin-top: 8px;\r\n`\r\n\r\nconst PoolText = styled(Text)`\r\n  font-weight: 400;\r\n  text-transform: uppercase;\r\n  font-size: 20px;\r\n  line-height: 1.2;\r\n`\r\n\r\ninterface PoolCardActionsProps {\r\n  pool: PoolWithStakedValue\r\n  account?: string | null\r\n}\r\n\r\nconst CardActions: React.FC<PoolCardActionsProps> = ({ pool, account }) => {\r\n  const TranslateString = useI18n()\r\n  const { pid } = pool\r\n  const lpLabel = pool.lpSymbol\r\n  const earnLabel = pool.dual ? pool.dual.earnLabel : 'HULK'\r\n  const { addToast } = useContext(ToastContext)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: pool.quoteToken.address,\r\n    tokenAddress: pool.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(pool.lpAddresses)\r\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\r\n  const { allowance } = pool.userData || {}\r\n  // useEffect(() => {\r\n  //   console.log('allowance', allowance, pid)\r\n  // },[allowance, pid])\r\n  const [tokens, setTokens] = useState<{ token0: string, token1: string }>({ token0: '', token1: '' })\r\n  const isApproved = useMemo(() => {\r\n    return account && allowance && allowance.isGreaterThan(0)\r\n  }, [account, allowance])\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useLPContract(lpAddress)\r\n\r\n  useEffect(() => {\r\n    if (lpContract && lpAddress !== getHULKTokenAddress()) {\r\n      lpContract.token0().then((res: string) => {\r\n        setTokens(prevState => {\r\n          return {\r\n            ...prevState,\r\n            token0: res,\r\n          }\r\n        })\r\n      })\r\n      lpContract.token1().then((res: string) => {\r\n        setTokens(prevState => {\r\n          return {\r\n            ...prevState,\r\n            token1: res,\r\n          }\r\n        })\r\n      })\r\n    } else if (lpAddress !== getHULKTokenAddress()) {\r\n      setTokens({token0: getHULKTokenAddress(), token1: getHULKTokenAddress()})\r\n    }\r\n  }, [lpAddress, lpContract])\r\n  const { onApprove } = useApprovePool(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    if (!onApprove) return\r\n    const receipt = await fetchWithCatchTxError(() => {\r\n      return onApprove()\r\n    })\r\n    if (receipt?.status) {\r\n      const toast: Toast = {\r\n        id: `id-${Date.now()}`,\r\n        title: `Contract Enabled`,\r\n        description: `Contract Enabled`,\r\n        type: toastTypes.SUCCESS,\r\n      }\r\n      toast.action = {\r\n        text: 'View transaction',\r\n        url: getBscScanLink(receipt.transactionHash, 'transaction', defaultChainId),\r\n      }\r\n      addToast(toast)\r\n      // @ts-ignore\r\n      dispatch(fetchPoolUserDataAsync({ account, pids: [pid] }))\r\n    }\r\n  }, [onApprove, fetchWithCatchTxError, addToast, dispatch, account, pid])\r\n  const poolUser = usePoolUser(pid)\r\n  const { stakedBalance, earnings, tokenBalance } = useMemo(() => {\r\n    if (poolUser) {\r\n      return { stakedBalance: poolUser.stakedBalance, earnings: poolUser.earnings, tokenBalance: poolUser.tokenBalance }\r\n    }\r\n    return { stakedBalance: BIG_ZERO, earnings: BIG_ZERO, tokenBalance: BIG_ZERO }\r\n\r\n  }, [poolUser])\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <PoolText color='secondary' pr='3px'>\r\n          {earnLabel}\r\n        </PoolText>\r\n        <PoolText color='primary'>\r\n          {TranslateString(999, 'Earned')}\r\n        </PoolText>\r\n      </Flex>\r\n      <HarvestAction pool={pool} earnings={earnings} pid={pool.pid} />\r\n      <Flex>\r\n        <PoolText color='secondary' pr='3px'>\r\n          {lpLabel}\r\n        </PoolText>\r\n        <PoolText color='textSubtle'>\r\n          {TranslateString(999, 'Staked')}\r\n        </PoolText>\r\n      </Flex>\r\n      {\r\n        // eslint-disable-next-line no-nested-ternary\r\n        !account\r\n          ? <UnlockButton mt='16px' fullWidth />\r\n          : !isApproved\r\n          ? <Button mt='16px' fullWidth disabled={pendingTx} onClick={handleApprove}>\r\n            {TranslateString(999, 'Approve Contract')}\r\n          </Button>\r\n          :\r\n          <StakeAction pool={pool} stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpLabel}\r\n                       pid={pid} depositFeeBP={pool.depositFeeBP} />\r\n      }\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/DetailsSection.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/CardHeading.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/HarvestAction.tsx",["1006","1007","1008"],"import React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, Toast, toastTypes } from '@hulkfinance/hulk-uikit'\r\nimport styled from 'styled-components'\r\nimport { fromWei } from 'web3-utils'\r\nimport useCatchTxError from '../../../../hooks/useCatchTxError'\r\nimport { useAppDispatch } from '../../../../state'\r\nimport { useHarvestFarm } from '../../../../hooks/Farms/useHarvestFarm'\r\nimport { ToastContext } from '../../../../contexts/ToastContext'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport { getBalanceNumber } from '../../../../utils/formatBalance'\r\nimport { PoolWithStakedValue } from '../../../../state/types'\r\nimport { getBscScanLink } from '../../../../utils'\r\nimport { defaultChainId } from '../../../../config'\r\nimport { fetchPoolUserDataAsync } from '../../../../state/pools'\r\nimport useActiveWeb3React from '../../../../hooks/useActiveWeb3React'\r\nimport useStakePools from '../../../../hooks/Farms/useStakeFarms'\r\n\r\ninterface PoolCardActionsProps {\r\n  earnings: BigNumber\r\n  pool: PoolWithStakedValue\r\n  pid: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Balance = styled(Heading)`\r\n  font-size: 24px;\r\n`\r\n\r\nconst Buttons = styled.div`\r\n  display: flex;\r\n  align-content: center;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<PoolCardActionsProps> = ({ pool, earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useActiveWeb3React()\r\n  const { fetchWithCatchTxError, loading } = useCatchTxError()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { addToast } = useContext(ToastContext)\r\n  const rawEarningsBalance = useMemo(() => {\r\n    return getBalanceNumber(earnings)\r\n  }, [earnings])\r\n  const displayBalance = useMemo(() => {\r\n    return fromWei(earnings.toString())\r\n  }, [earnings])\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { onStake } = useStakePools(pid)\r\n  const canHarvest: boolean = useMemo(() => {\r\n    return pool.userData?.canHarvest || false\r\n  }, [pool])\r\n  const onHarvest = useCallback(async () => {\r\n    setPendingTx(true)\r\n    const receipt = await fetchWithCatchTxError(() => {\r\n      return onReward()\r\n    })\r\n    if (receipt?.status) {\r\n      const toast: Toast = {\r\n        id: `id-${Date.now()}`,\r\n        title: `Harvested`,\r\n        description: `Your ${pool.token.symbol || 'DB'} earnings have been sent to your wallet!`,\r\n        type: toastTypes.SUCCESS,\r\n      }\r\n      toast.action = {\r\n        text: 'View transaction',\r\n        url: getBscScanLink(receipt.transactionHash, 'transaction', defaultChainId),\r\n      }\r\n      addToast(toast)\r\n      // @ts-ignore\r\n      dispatch(fetchPoolUserDataAsync({ account, pids: [pid] }))\r\n    }\r\n    setPendingTx(false)\r\n  }, [account, addToast, dispatch, pool.token.symbol, fetchWithCatchTxError, onReward, pid])\r\n\r\n  const onStakeHandler = useCallback(async () => {\r\n    setPendingTx(true)\r\n    const receipt = await fetchWithCatchTxError(() => {\r\n      return onStake(rawEarningsBalance.toString())\r\n    })\r\n    if (receipt?.status) {\r\n      const toast: Toast = {\r\n        id: `id-${Date.now()}`,\r\n        title: `Stake`,\r\n        description: `You stake ${fromWei(earnings.toString())} ${pool.lpSymbol}!`,\r\n        type: toastTypes.SUCCESS,\r\n      }\r\n      toast.action = {\r\n        text: 'View transaction',\r\n        url: getBscScanLink(receipt.transactionHash, 'transaction', defaultChainId),\r\n      }\r\n      addToast(toast)\r\n    }\r\n    setPendingTx(false)\r\n  }, [addToast, earnings, fetchWithCatchTxError, onStake, pool.lpSymbol, rawEarningsBalance])\r\n\r\n  return (\r\n    <Flex mb='24px' mt={24} justifyContent='space-between' flexWrap='wrap' alignItems='center'>\r\n      <Balance color='#fff'>{displayBalance}</Balance>\r\n\r\n      <BalanceAndCompound>\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          size='sm'\r\n          variant='secondary'\r\n          marginBottom='15px'\r\n          onClick={onStakeHandler}\r\n        >\r\n          {TranslateString(999, 'Compound')}\r\n        </Button>\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx || !canHarvest}\r\n          onClick={onHarvest}\r\n        >\r\n          {pendingTx ? 'Harvesting' : TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/StakeAction.tsx",["1009"],"import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, useModal } from '@hulkfinance/hulk-uikit'\r\nimport { parseUnits } from '@ethersproject/units'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useI18n from '../../../../hooks/useI18n'\r\nimport { formatBigNumber, getBalanceNumber, getFullDisplayBalance } from '../../../../utils/formatBalance'\r\nimport useStakePools from '../../../../hooks/Farms/useStakeFarms'\r\nimport useUnstakePools from '../../../../hooks/Farms/useUnstakeFarms'\r\nimport { PoolWithStakedValue } from '../../../../state/types'\r\n\r\ninterface PoolCardActionsProps {\r\n  stakedBalance: BigNumber\r\n  tokenBalance: BigNumber\r\n  tokenName?: string\r\n  pid: number\r\n  depositFeeBP?: number,\r\n  pool: PoolWithStakedValue\r\n}\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst StakeAction: React.FC<PoolCardActionsProps> = ({ pool, stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const { onStake } = useStakePools(pid)\r\n  const { onUnstake } = useUnstakePools(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayStaked = useMemo(() => {\r\n    const decimals = 18\r\n    if (stakedBalance.isZero()) {\r\n      return 0\r\n    }\r\n    const balance = getFullDisplayBalance(stakedBalance, pool.token.decimals, pool.token.decimals)\r\n    const balanceUnits = parseUnits(balance, decimals)\r\n    return formatBigNumber(balanceUnits, decimals, decimals)\r\n  }, [pool.token.decimals, stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal decimals={pool.token.decimals} max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal decimals={pool.token.decimals} max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" flexDirection=\"column\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayStaked}</Heading>\r\n      <ButtonWrapper>\r\n          <Button\r\n            onClick={onPresentWithdraw}\r\n          >\r\n            Withdraw\r\n          </Button>\r\n          <Button\r\n            onClick={onPresentDeposit}\r\n          >\r\n            Stake\r\n          </Button>\r\n      </ButtonWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/PoolCard/PairImage.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/WithdrawModal.tsx",["1010"],"import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useContext, useMemo, useState } from 'react'\r\nimport { Button, Modal, Toast, toastTypes } from '@hulkfinance/hulk-uikit'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport TokenInput from '../../../components/TokenInput'\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\r\nimport ModalActions from '../../../components/ModalActions'\r\nimport useCatchTxError from '../../../hooks/useCatchTxError'\r\nimport { ToastContext } from '../../../contexts/ToastContext'\r\nimport { getBscScanLink } from '../../../utils'\r\nimport { defaultChainId } from '../../../config'\r\nimport PercentButtons from '../../../components/Input/PercentButtons'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: any\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  decimals: number\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, decimals, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, decimals)\r\n  }, [decimals, max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  const handleSelectPercent = useCallback((percent: number) => {\r\n    setVal(getFullDisplayBalance(max.multipliedBy(percent).div(100), decimals, decimals))\r\n  }, [decimals, max])\r\n\r\n  const {fetchWithCatchTxError} = useCatchTxError()\r\n  const { addToast } = useContext(ToastContext)\r\n  const onWithdraw = useCallback(async () => {\r\n    setPendingTx(true)\r\n    const isWithrdaw = window.confirm('Do you want to withdraw early? There will be a withholding of part of the deposit for early withdrawal.')\r\n    if (isWithrdaw) {\r\n      const receipt = await fetchWithCatchTxError(() => {\r\n        return onConfirm(val)\r\n      })\r\n      if (receipt?.status) {\r\n        const toast: Toast = {\r\n          id: `id-${Date.now()}`,\r\n          title: `Withdraw`,\r\n          description: `You withdraw ${val} ${tokenName}!`,\r\n          type: toastTypes.SUCCESS,\r\n        }\r\n        toast.action = {\r\n          text: 'View transaction',\r\n          url: getBscScanLink(receipt.transactionHash, 'transaction', defaultChainId),\r\n        }\r\n        addToast(toast)\r\n      }\r\n    }\r\n    if (onDismiss) {\r\n      onDismiss()\r\n    }\r\n    setPendingTx(false)\r\n  }, [addToast, fetchWithCatchTxError, onConfirm, onDismiss, tokenName, val])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <PercentButtons handleSelectPercent={handleSelectPercent}/>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={onWithdraw}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/views/Pools/components/DepositModal.tsx",["1011"],"import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useContext, useMemo, useState } from 'react'\r\nimport { Button, Modal, Toast, toastTypes } from '@hulkfinance/hulk-uikit'\r\nimport styled from 'styled-components'\r\nimport useI18n from '../../../hooks/useI18n'\r\nimport TokenInput from '../../../components/TokenInput'\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\r\nimport ModalActions from '../../../components/ModalActions'\r\nimport { getBscScanLink } from '../../../utils'\r\nimport { defaultChainId } from '../../../config'\r\nimport { ToastContext } from '../../../contexts/ToastContext'\r\nimport useCatchTxError from '../../../hooks/useCatchTxError'\r\nimport PercentButtons from '../../../components/Input/PercentButtons'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: any\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n  decimals: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, decimals, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, decimals)\r\n  }, [decimals, max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n  \r\n  const handleSelectPercent = useCallback((percent: number) => {\r\n    setVal(getFullDisplayBalance(max.multipliedBy(percent).div(100), decimals, decimals))\r\n  }, [decimals, max])\r\n\r\n  const {fetchWithCatchTxError} = useCatchTxError()\r\n  const { addToast } = useContext(ToastContext)\r\n  const onStake = useCallback(async () => {\r\n    setPendingTx(true)\r\n    const receipt = await fetchWithCatchTxError(() => {\r\n      return onConfirm(val)\r\n    })\r\n    if (receipt?.status) {\r\n      const toast: Toast = {\r\n        id: `id-${Date.now()}`,\r\n        title: `Stake`,\r\n        description: `You stake ${val} ${tokenName}!`,\r\n        type: toastTypes.SUCCESS,\r\n      }\r\n      toast.action = {\r\n        text: 'View transaction',\r\n        url: getBscScanLink(receipt.transactionHash, 'transaction', defaultChainId),\r\n      }\r\n      addToast(toast)\r\n    }\r\n\r\n    if (onDismiss) {\r\n      onDismiss()\r\n    }\r\n    setPendingTx(false)\r\n  }, [addToast, fetchWithCatchTxError, onConfirm, onDismiss, tokenName, val])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <PercentButtons handleSelectPercent={handleSelectPercent}/>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={onStake}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Input/PercentButtons.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/useRoiCalculatorReducer.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/RoiCard.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/RoiCalculatorFooter.tsx",["1012"],"import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, LinkExternal, Text } from '@hulkfinance/hulk-uikit'\nimport { useTranslation } from '../../contexts/Localisation'\nimport { getApy } from '../../utils/compoundApyHelpers'\nimport { ExpandableLabel } from './ExpandableButton'\nimport { Box, Grid } from '../Box'\n\nconst Footer = styled(Flex)`\n  width: 100%;\n  background: ${({ theme }) => theme.colors.card};\n  max-width: 300px;\n`\n\nconst BulletList = styled.ul`\n  list-style-type: none;\n  margin-top: 16px;\n  padding: 0;\n  li {\n    margin: 0;\n    padding: 0;\n  }\n  li::before {\n    content: '•';\n    margin-right: 4px;\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n  li::marker {\n    font-size: 12px;\n  }\n`\n\ninterface RoiCalculatorFooterProps {\n  isFarm: boolean\n  apr: number\n  apy: number\n  displayApr: string\n  autoCompoundFrequency: number\n  multiplier: string\n  linkLabel: string\n  linkHref: string\n  performanceFee: number\n}\n\nconst TestStyled = styled(Text)<{small?: boolean, textAlign?: string, display?: string, lineHeight?: number}>`\n  font-size: ${({small}) => small ? 14 : 8}px;\n  text-align: ${({textAlign}) => textAlign || 'left'};\n  display: ${({display}) => display || 'flex'};\n  line-height: ${({lineHeight}) => lineHeight || '1'};\n`\n\nconst ExpandableLabelStyled = styled(ExpandableLabel)`\n  margin: 0 auto;\n`\n\nconst RoiCalculatorFooter: React.FC<RoiCalculatorFooterProps> = ({\n  isFarm,\n  apr,\n  apy,\n  displayApr,\n  autoCompoundFrequency,\n  multiplier,\n  linkLabel,\n  linkHref,\n  performanceFee,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const { t } = useTranslation()\n\n  const gridRowCount = isFarm ? 4 : 2\n\n  return (\n    <Footer p=\"16px\" flexDirection=\"column\">\n      <ExpandableLabelStyled expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)}>\n        {isExpanded ? t('Hide') : t('Details')}\n      </ExpandableLabelStyled>\n      {isExpanded && (\n        <Box px=\"8px\">\n          <Grid gridTemplateColumns=\"2.5fr 1fr\" gridRowGap=\"8px\" gridTemplateRows={`repeat(${gridRowCount}, auto)`}>\n            {isFarm && (\n              <>\n                <TestStyled color=\"textSubtle\" small>\n                  {t('APR (incl. LP rewards)')}\n                </TestStyled>\n                <TestStyled small textAlign=\"right\">\n                  {displayApr}%\n                </TestStyled>\n              </>\n            )}\n            {!Number.isFinite(apy) ? (\n              <TestStyled color=\"textSubtle\" small>\n                {isFarm ? t('Base APR (CAKE yield only)') : t('APR')}\n              </TestStyled>\n            ) : (\n              <TestStyled color=\"textSubtle\" small>\n                {t('APY')}\n              </TestStyled>\n            )}\n            <TestStyled small textAlign=\"right\">\n              {(apy ?? apr).toFixed(2)}%\n            </TestStyled>\n            {!Number.isFinite(apy) && (\n              <TestStyled color=\"textSubtle\" small>\n                {t('APY (%compoundTimes%x daily compound)', {\n                  compoundTimes: autoCompoundFrequency > 0 ? autoCompoundFrequency : 1,\n                })}\n              </TestStyled>\n            )}\n            {!Number.isFinite(apy) && (\n              <TestStyled small textAlign=\"right\">\n                {(\n                  getApy(apr, autoCompoundFrequency > 0 ? autoCompoundFrequency : 1, 365, performanceFee) * 100\n                ).toFixed(2)}\n                %\n              </TestStyled>\n            )}\n            {isFarm && (\n              <>\n                <TestStyled color=\"textSubtle\" small>\n                  {t('Farm Multiplier')}\n                </TestStyled>\n                <Flex justifyContent=\"flex-end\" alignItems=\"flex-end\">\n                  <TestStyled small textAlign=\"right\" mr=\"4px\">\n                    {multiplier}\n                  </TestStyled>\n                </Flex>\n              </>\n            )}\n          </Grid>\n          <BulletList>\n            <li>\n              <TestStyled fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\" lineHeight={1.1}>\n                {t('Calculated based on current rates.')}\n              </TestStyled>\n            </li>\n            {isFarm && (\n              <li>\n                <TestStyled fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                  {t('LP rewards: 0.17% trading fees, distributed proportionally among LP token holders.')}\n                </TestStyled>\n              </li>\n            )}\n            <li>\n              <TestStyled fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\" lineHeight={1.1}>\n                {t(\n                  'All figures are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n                )}\n              </TestStyled>\n            </li>\n            {performanceFee > 0 && (\n              <li>\n                <TestStyled mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                  {t('All estimated rates take into account this pool’s %fee%% performance fee', {\n                    fee: performanceFee,\n                  })}\n                </TestStyled>\n              </li>\n            )}\n          </BulletList>\n          <Flex justifyContent=\"center\" mt=\"24px\">\n            <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n          </Flex>\n        </Box>\n      )}\n    </Footer>\n  )\n}\n\nexport default RoiCalculatorFooter\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/BalanceInput.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/AnimatedArrow.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/Input.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/ExpandableButton.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/styles.tsx",["1013"],"import React from 'react'\nimport styled from \"styled-components\";\nimport { IconButton, Text } from '@hulkfinance/hulk-uikit'\nimport { BalanceInputProps } from \"./types\";\nimport Input from './Input'\n\nexport const SwitchUnitsButton = styled(IconButton)`\n  width: 16px;\n`;\n\nexport const UnitContainer = styled(Text)`\n  margin-left: 4px;\n  text-align: right;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  white-space: nowrap;\n`;\n\nexport const StyledBalanceInput = styled.div<{ isWarning: BalanceInputProps[\"isWarning\"] }>`\n  background-color: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\n  border-radius: 16px;\n  box-shadow: ${({ theme, isWarning }) => theme.shadows[isWarning ? \"warning\" : \"inset\"]};\n  padding: 8px 16px;\n`;\n\nexport const StyledInput = styled(Input)<{ textAlign?: string }>`\n  background: transparent;\n  border-radius: 0;\n  box-shadow: none;\n  padding-left: 0;\n  padding-right: 0;\n  text-align: ${({ textAlign = \"right\" }) => textAlign};\n  border: none;\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`;\n","/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/RoiCalculatorModal/types.ts",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Box/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/SVG/index.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Box/Box.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Box/Grid.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/SVG/Pencil.tsx",[],"/Users/uraelizarov/Desktop/HulkFinance/hulk-frontend/src/components/Box/Flex.tsx",[],{"ruleId":"1014","replacedBy":"1015"},{"ruleId":"1016","replacedBy":"1017"},{"ruleId":"1018","replacedBy":"1019"},{"ruleId":"1020","replacedBy":"1021"},{"ruleId":"1022","replacedBy":"1023"},{"ruleId":"1024","severity":1,"message":"1025","line":2,"column":50,"nodeType":"1026","messageId":"1027","endLine":2,"endColumn":61},{"ruleId":"1024","severity":1,"message":"1028","line":27,"column":7,"nodeType":"1026","messageId":"1027","endLine":27,"endColumn":14},{"ruleId":"1029","severity":1,"message":"1030","line":50,"column":7,"nodeType":"1031","messageId":"1032","endLine":50,"endColumn":18},{"ruleId":"1014","replacedBy":"1033"},{"ruleId":"1016","replacedBy":"1034"},{"ruleId":"1018","replacedBy":"1035"},{"ruleId":"1020","replacedBy":"1036"},{"ruleId":"1022","replacedBy":"1037"},{"ruleId":"1024","severity":1,"message":"1038","line":4,"column":10,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":15},{"ruleId":"1024","severity":1,"message":"1039","line":18,"column":8,"nodeType":"1026","messageId":"1027","endLine":18,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1040","line":28,"column":7,"nodeType":"1026","messageId":"1027","endLine":28,"endColumn":20},{"ruleId":"1024","severity":1,"message":"1041","line":60,"column":11,"nodeType":"1026","messageId":"1027","endLine":60,"endColumn":16},{"ruleId":"1024","severity":1,"message":"1042","line":60,"column":18,"nodeType":"1026","messageId":"1027","endLine":60,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1043","line":63,"column":17,"nodeType":"1026","messageId":"1027","endLine":63,"endColumn":25},{"ruleId":"1024","severity":1,"message":"1044","line":64,"column":10,"nodeType":"1026","messageId":"1027","endLine":64,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1045","line":64,"column":20,"nodeType":"1026","messageId":"1027","endLine":64,"endColumn":31},{"ruleId":"1024","severity":1,"message":"1046","line":66,"column":22,"nodeType":"1026","messageId":"1027","endLine":66,"endColumn":35},{"ruleId":"1024","severity":1,"message":"1047","line":67,"column":11,"nodeType":"1026","messageId":"1027","endLine":67,"endColumn":22},{"ruleId":"1024","severity":1,"message":"1048","line":75,"column":9,"nodeType":"1026","messageId":"1027","endLine":75,"endColumn":22},{"ruleId":"1024","severity":1,"message":"1049","line":13,"column":7,"nodeType":"1026","messageId":"1027","endLine":13,"endColumn":10},{"ruleId":"1014","replacedBy":"1050"},{"ruleId":"1016","replacedBy":"1051"},{"ruleId":"1018","replacedBy":"1052"},{"ruleId":"1020","replacedBy":"1053"},{"ruleId":"1022","replacedBy":"1054"},{"ruleId":"1024","severity":1,"message":"1055","line":4,"column":22,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":30},{"ruleId":"1024","severity":1,"message":"1056","line":4,"column":32,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":42},{"ruleId":"1024","severity":1,"message":"1057","line":4,"column":44,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":57},{"ruleId":"1024","severity":1,"message":"1058","line":98,"column":72,"nodeType":"1026","messageId":"1027","endLine":98,"endColumn":80},{"ruleId":"1024","severity":1,"message":"1059","line":107,"column":9,"nodeType":"1026","messageId":"1027","endLine":107,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1055","line":3,"column":35,"nodeType":"1026","messageId":"1027","endLine":3,"endColumn":43},{"ruleId":"1024","severity":1,"message":"1060","line":1,"column":49,"nodeType":"1026","messageId":"1027","endLine":1,"endColumn":58},{"ruleId":"1024","severity":1,"message":"1061","line":4,"column":8,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":17},{"ruleId":"1024","severity":1,"message":"1062","line":5,"column":10,"nodeType":"1026","messageId":"1027","endLine":5,"endColumn":16},{"ruleId":"1024","severity":1,"message":"1063","line":8,"column":10,"nodeType":"1026","messageId":"1027","endLine":8,"endColumn":26},{"ruleId":"1024","severity":1,"message":"1064","line":12,"column":8,"nodeType":"1026","messageId":"1027","endLine":12,"endColumn":28},{"ruleId":"1024","severity":1,"message":"1065","line":3,"column":10,"nodeType":"1026","messageId":"1027","endLine":3,"endColumn":23},{"ruleId":"1024","severity":1,"message":"1066","line":3,"column":25,"nodeType":"1026","messageId":"1027","endLine":3,"endColumn":29},{"ruleId":"1024","severity":1,"message":"1061","line":2,"column":8,"nodeType":"1026","messageId":"1027","endLine":2,"endColumn":17},{"ruleId":"1024","severity":1,"message":"1067","line":5,"column":10,"nodeType":"1026","messageId":"1027","endLine":5,"endColumn":20},{"ruleId":"1024","severity":1,"message":"1068","line":10,"column":10,"nodeType":"1026","messageId":"1027","endLine":10,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1069","line":12,"column":10,"nodeType":"1026","messageId":"1027","endLine":12,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1070","line":17,"column":10,"nodeType":"1026","messageId":"1027","endLine":17,"endColumn":25},{"ruleId":"1024","severity":1,"message":"1071","line":17,"column":27,"nodeType":"1026","messageId":"1027","endLine":17,"endColumn":43},{"ruleId":"1024","severity":1,"message":"1072","line":17,"column":45,"nodeType":"1026","messageId":"1027","endLine":17,"endColumn":66},{"ruleId":"1024","severity":1,"message":"1073","line":51,"column":9,"nodeType":"1026","messageId":"1027","endLine":51,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1074","line":58,"column":10,"nodeType":"1026","messageId":"1027","endLine":58,"endColumn":16},{"ruleId":"1014","replacedBy":"1075"},{"ruleId":"1016","replacedBy":"1076"},{"ruleId":"1018","replacedBy":"1077"},{"ruleId":"1020","replacedBy":"1078"},{"ruleId":"1022","replacedBy":"1079"},{"ruleId":"1014","replacedBy":"1080"},{"ruleId":"1016","replacedBy":"1081"},{"ruleId":"1018","replacedBy":"1082"},{"ruleId":"1020","replacedBy":"1083"},{"ruleId":"1022","replacedBy":"1084"},{"ruleId":"1024","severity":1,"message":"1060","line":1,"column":42,"nodeType":"1026","messageId":"1027","endLine":1,"endColumn":51},{"ruleId":"1024","severity":1,"message":"1072","line":11,"column":28,"nodeType":"1026","messageId":"1027","endLine":11,"endColumn":49},{"ruleId":"1024","severity":1,"message":"1085","line":40,"column":33,"nodeType":"1026","messageId":"1027","endLine":40,"endColumn":40},{"ruleId":"1024","severity":1,"message":"1056","line":4,"column":33,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":43},{"ruleId":"1024","severity":1,"message":"1086","line":4,"column":45,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":52},{"ruleId":"1024","severity":1,"message":"1087","line":4,"column":54,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":63},{"ruleId":"1024","severity":1,"message":"1088","line":31,"column":9,"nodeType":"1026","messageId":"1027","endLine":31,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1089","line":36,"column":9,"nodeType":"1026","messageId":"1027","endLine":36,"endColumn":23},{"ruleId":"1024","severity":1,"message":"1090","line":4,"column":10,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":24},{"ruleId":"1029","severity":1,"message":"1030","line":70,"column":7,"nodeType":"1031","messageId":"1032","endLine":70,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1091","line":67,"column":7,"nodeType":"1026","messageId":"1027","endLine":67,"endColumn":57},{"ruleId":"1024","severity":1,"message":"1092","line":13,"column":29,"nodeType":"1026","messageId":"1027","endLine":13,"endColumn":47},{"ruleId":"1029","severity":1,"message":"1030","line":47,"column":11,"nodeType":"1031","messageId":"1032","endLine":47,"endColumn":22},{"ruleId":"1024","severity":1,"message":"1093","line":73,"column":10,"nodeType":"1026","messageId":"1027","endLine":73,"endColumn":14},{"ruleId":"1024","severity":1,"message":"1094","line":79,"column":10,"nodeType":"1026","messageId":"1027","endLine":79,"endColumn":15},{"ruleId":"1029","severity":1,"message":"1030","line":88,"column":11,"nodeType":"1031","messageId":"1032","endLine":88,"endColumn":22},{"ruleId":"1029","severity":1,"message":"1030","line":101,"column":11,"nodeType":"1031","messageId":"1032","endLine":101,"endColumn":22},{"ruleId":"1029","severity":1,"message":"1030","line":109,"column":11,"nodeType":"1031","messageId":"1032","endLine":109,"endColumn":22},{"ruleId":"1029","severity":1,"message":"1030","line":128,"column":13,"nodeType":"1031","messageId":"1032","endLine":128,"endColumn":24},{"ruleId":"1029","severity":1,"message":"1030","line":141,"column":13,"nodeType":"1031","messageId":"1032","endLine":141,"endColumn":24},{"ruleId":"1029","severity":1,"message":"1030","line":159,"column":11,"nodeType":"1031","messageId":"1032","endLine":159,"endColumn":22},{"ruleId":"1029","severity":1,"message":"1030","line":23,"column":27,"nodeType":"1031","messageId":"1032","endLine":23,"endColumn":38},{"ruleId":"1029","severity":1,"message":"1030","line":24,"column":27,"nodeType":"1031","messageId":"1032","endLine":24,"endColumn":38},{"ruleId":"1024","severity":1,"message":"1095","line":11,"column":52,"nodeType":"1026","messageId":"1027","endLine":11,"endColumn":64},{"ruleId":"1029","severity":1,"message":"1030","line":40,"column":30,"nodeType":"1031","messageId":"1032","endLine":40,"endColumn":41},{"ruleId":"1029","severity":1,"message":"1030","line":45,"column":30,"nodeType":"1031","messageId":"1032","endLine":45,"endColumn":41},{"ruleId":"1029","severity":1,"message":"1030","line":52,"column":30,"nodeType":"1031","messageId":"1032","endLine":52,"endColumn":41},{"ruleId":"1029","severity":1,"message":"1030","line":125,"column":13,"nodeType":"1031","messageId":"1032","endLine":125,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1096","line":18,"column":34,"nodeType":"1026","messageId":"1027","endLine":18,"endColumn":41},{"ruleId":"1029","severity":1,"message":"1030","line":33,"column":17,"nodeType":"1031","messageId":"1032","endLine":33,"endColumn":28},{"ruleId":"1029","severity":1,"message":"1030","line":55,"column":25,"nodeType":"1031","messageId":"1032","endLine":55,"endColumn":36},{"ruleId":"1024","severity":1,"message":"1097","line":89,"column":25,"nodeType":"1026","messageId":"1027","endLine":89,"endColumn":26},{"ruleId":"1024","severity":1,"message":"1098","line":10,"column":78,"nodeType":"1026","messageId":"1027","endLine":10,"endColumn":92},{"ruleId":"1024","severity":1,"message":"1099","line":33,"column":7,"nodeType":"1026","messageId":"1027","endLine":33,"endColumn":43},{"ruleId":"1029","severity":1,"message":"1030","line":60,"column":7,"nodeType":"1031","messageId":"1032","endLine":60,"endColumn":18},{"ruleId":"1029","severity":1,"message":"1030","line":27,"column":39,"nodeType":"1031","messageId":"1032","endLine":27,"endColumn":52},{"ruleId":"1029","severity":1,"message":"1030","line":39,"column":45,"nodeType":"1031","messageId":"1032","endLine":39,"endColumn":58},{"ruleId":"1029","severity":1,"message":"1030","line":49,"column":45,"nodeType":"1031","messageId":"1032","endLine":49,"endColumn":58},{"ruleId":"1029","severity":1,"message":"1030","line":33,"column":3,"nodeType":"1031","messageId":"1032","endLine":33,"endColumn":16},{"ruleId":"1029","severity":1,"message":"1030","line":55,"column":11,"nodeType":"1031","messageId":"1032","endLine":55,"endColumn":24},{"ruleId":"1029","severity":1,"message":"1030","line":68,"column":5,"nodeType":"1031","messageId":"1032","endLine":68,"endColumn":18},{"ruleId":"1029","severity":1,"message":"1030","line":72,"column":5,"nodeType":"1031","messageId":"1032","endLine":72,"endColumn":18},{"ruleId":"1029","severity":1,"message":"1030","line":217,"column":15,"nodeType":"1031","messageId":"1032","endLine":217,"endColumn":28},{"ruleId":"1029","severity":1,"message":"1030","line":146,"column":7,"nodeType":"1031","messageId":"1032","endLine":146,"endColumn":20},{"ruleId":"1024","severity":1,"message":"1100","line":2,"column":10,"nodeType":"1026","messageId":"1027","endLine":2,"endColumn":22},{"ruleId":"1024","severity":1,"message":"1101","line":3,"column":8,"nodeType":"1026","messageId":"1027","endLine":3,"endColumn":19},{"ruleId":"1024","severity":1,"message":"1098","line":4,"column":10,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1102","line":6,"column":7,"nodeType":"1026","messageId":"1027","endLine":6,"endColumn":14},{"ruleId":"1029","severity":1,"message":"1030","line":13,"column":3,"nodeType":"1031","messageId":"1032","endLine":13,"endColumn":14},{"ruleId":"1024","severity":1,"message":"1103","line":34,"column":11,"nodeType":"1026","messageId":"1027","endLine":34,"endColumn":12},{"ruleId":"1029","severity":1,"message":"1030","line":81,"column":9,"nodeType":"1031","messageId":"1032","endLine":81,"endColumn":20},{"ruleId":"1029","severity":1,"message":"1030","line":111,"column":17,"nodeType":"1031","messageId":"1032","endLine":111,"endColumn":28},{"ruleId":"1029","severity":1,"message":"1030","line":44,"column":9,"nodeType":"1031","messageId":"1032","endLine":44,"endColumn":20},{"ruleId":"1024","severity":1,"message":"1104","line":2,"column":7,"nodeType":"1026","messageId":"1027","endLine":2,"endColumn":18},{"ruleId":"1029","severity":1,"message":"1030","line":31,"column":7,"nodeType":"1031","messageId":"1032","endLine":31,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1105","line":5,"column":14,"nodeType":"1026","messageId":"1027","endLine":5,"endColumn":23},{"ruleId":"1024","severity":1,"message":"1106","line":20,"column":11,"nodeType":"1026","messageId":"1027","endLine":20,"endColumn":23},{"ruleId":"1024","severity":1,"message":"1107","line":6,"column":10,"nodeType":"1026","messageId":"1027","endLine":6,"endColumn":33},{"ruleId":"1024","severity":1,"message":"1038","line":4,"column":10,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":15},{"ruleId":"1024","severity":1,"message":"1108","line":11,"column":22,"nodeType":"1026","messageId":"1027","endLine":11,"endColumn":32},{"ruleId":"1024","severity":1,"message":"1039","line":18,"column":8,"nodeType":"1026","messageId":"1027","endLine":18,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1040","line":28,"column":7,"nodeType":"1026","messageId":"1027","endLine":28,"endColumn":20},{"ruleId":"1024","severity":1,"message":"1041","line":60,"column":11,"nodeType":"1026","messageId":"1027","endLine":60,"endColumn":16},{"ruleId":"1024","severity":1,"message":"1042","line":60,"column":18,"nodeType":"1026","messageId":"1027","endLine":60,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1043","line":63,"column":17,"nodeType":"1026","messageId":"1027","endLine":63,"endColumn":25},{"ruleId":"1024","severity":1,"message":"1044","line":64,"column":10,"nodeType":"1026","messageId":"1027","endLine":64,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1045","line":64,"column":20,"nodeType":"1026","messageId":"1027","endLine":64,"endColumn":31},{"ruleId":"1024","severity":1,"message":"1046","line":66,"column":22,"nodeType":"1026","messageId":"1027","endLine":66,"endColumn":35},{"ruleId":"1024","severity":1,"message":"1047","line":67,"column":11,"nodeType":"1026","messageId":"1027","endLine":67,"endColumn":22},{"ruleId":"1024","severity":1,"message":"1048","line":75,"column":9,"nodeType":"1026","messageId":"1027","endLine":75,"endColumn":22},{"ruleId":"1024","severity":1,"message":"1055","line":4,"column":22,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":30},{"ruleId":"1024","severity":1,"message":"1109","line":11,"column":10,"nodeType":"1026","messageId":"1027","endLine":11,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1058","line":99,"column":72,"nodeType":"1026","messageId":"1027","endLine":99,"endColumn":80},{"ruleId":"1024","severity":1,"message":"1110","line":108,"column":9,"nodeType":"1026","messageId":"1027","endLine":108,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1061","line":2,"column":8,"nodeType":"1026","messageId":"1027","endLine":2,"endColumn":17},{"ruleId":"1024","severity":1,"message":"1067","line":5,"column":10,"nodeType":"1026","messageId":"1027","endLine":5,"endColumn":20},{"ruleId":"1024","severity":1,"message":"1111","line":10,"column":10,"nodeType":"1026","messageId":"1027","endLine":10,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1069","line":12,"column":10,"nodeType":"1026","messageId":"1027","endLine":12,"endColumn":18},{"ruleId":"1024","severity":1,"message":"1070","line":17,"column":10,"nodeType":"1026","messageId":"1027","endLine":17,"endColumn":25},{"ruleId":"1024","severity":1,"message":"1071","line":17,"column":27,"nodeType":"1026","messageId":"1027","endLine":17,"endColumn":43},{"ruleId":"1024","severity":1,"message":"1072","line":17,"column":45,"nodeType":"1026","messageId":"1027","endLine":17,"endColumn":66},{"ruleId":"1024","severity":1,"message":"1073","line":51,"column":9,"nodeType":"1026","messageId":"1027","endLine":51,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1074","line":58,"column":10,"nodeType":"1026","messageId":"1027","endLine":58,"endColumn":16},{"ruleId":"1024","severity":1,"message":"1060","line":1,"column":42,"nodeType":"1026","messageId":"1027","endLine":1,"endColumn":51},{"ruleId":"1024","severity":1,"message":"1112","line":36,"column":7,"nodeType":"1026","messageId":"1027","endLine":36,"endColumn":14},{"ruleId":"1024","severity":1,"message":"1085","line":48,"column":34,"nodeType":"1026","messageId":"1027","endLine":48,"endColumn":41},{"ruleId":"1024","severity":1,"message":"1113","line":8,"column":8,"nodeType":"1026","messageId":"1027","endLine":8,"endColumn":15},{"ruleId":"1114","severity":1,"message":"1115","line":49,"column":24,"nodeType":"1116","messageId":"1032","endLine":49,"endColumn":145},{"ruleId":"1024","severity":1,"message":"1117","line":4,"column":8,"nodeType":"1026","messageId":"1027","endLine":4,"endColumn":14},{"ruleId":"1024","severity":1,"message":"1118","line":3,"column":16,"nodeType":"1026","messageId":"1027","endLine":3,"endColumn":24},{"ruleId":"1024","severity":1,"message":"1119","line":1,"column":8,"nodeType":"1026","messageId":"1027","endLine":1,"endColumn":13},"lines-around-directive",["1120"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'PreSale' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected",["1120"],[],[],[],[],"'Image' is defined but never used.","'FlexLayout' is defined but never used.","'getDisplayApr' is assigned a value but never used.","'login' is assigned a value but never used.","'logout' is assigned a value but never used.","'setQuery' is assigned a value but never used.","'viewMode' is assigned a value but never used.","'setViewMode' is assigned a value but never used.","'setSortOption' is assigned a value but never used.","'observerRef' is assigned a value but never used.","'userDataReady' is assigned a value but never used.","'Row' is assigned a value but never used.",["1120"],[],[],[],[],"'Skeleton' is defined but never used.","'IconButton' is defined but never used.","'CalculateIcon' is defined but never used.","'bnbPrice' is defined but never used.","'farmImage' is assigned a value but never used.","'useEffect' is defined but never used.","'BigNumber' is defined but never used.","'ethers' is defined but never used.","'getBalanceNumber' is defined but never used.","'priceHelperLpsConfig' is defined but never used.","'useRouteMatch' is defined but never used.","'Link' is defined but never used.","'parseUnits' is defined but never used.","'useFarmFromPid' is defined but never used.","'useERC20' is defined but never used.","'formatBigNumber' is defined but never used.","'getBalanceAmount' is defined but never used.","'getFullDisplayBalance' is defined but never used.","'addLiquidityUrl' is assigned a value but never used.","'tokens' is assigned a value but never used.",["1120"],[],[],[],[],["1120"],[],[],[],[],"'loading' is assigned a value but never used.","'AddIcon' is defined but never used.","'MinusIcon' is defined but never used.","'TranslateString' is assigned a value but never used.","'displayBalance' is assigned a value but never used.","'defaultChainId' is defined but never used.","'BSCSCAN_PREFIXES' is assigned a value but never used.","'getHULKSwapAddress' is defined but never used.","'rate' is assigned a value but never used.","'price' is assigned a value but never used.","'shortBalance' is defined but never used.","'chainId' is assigned a value but never used.","'e' is defined but never used.","'SerializedFarm' is defined but never used.","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","'useWeb3React' is defined but never used.","'getGasPrice' is defined but never used.","'options' is assigned a value but never used.","'t' is assigned a value but never used.","'assignError' is assigned a value but never used.","'languages' is defined but never used.","'lpTokenRatio' is assigned a value but never used.","'makeFarmFromPidSelector' is defined but never used.","'getPoolApr' is defined but never used.","'BIG_ZERO' is defined but never used.","'poolImage' is assigned a value but never used.","'usePoolFromPid' is defined but never used.","'Buttons' is assigned a value but never used.","'useI18n' is defined but never used.","no-alert","Unexpected confirm.","CallExpression","'styled' is defined but never used.","'HelpIcon' is defined but never used.","'React' is defined but never used.","padding-line-between-statements"]